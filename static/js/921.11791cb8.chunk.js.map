{"version":3,"file":"static/js/921.11791cb8.chunk.js","mappings":"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","sources":["components/Description.tsx","components/ClinicalTrial.tsx","utils/values.ts","components/Patient.tsx","components/Study.tsx","data/uids.tsx","utils/PubSub.js","utils/CustomError.js","services/NotificationMiddleware.js","components/SlideItem.tsx","components/SlideList.tsx","components/AnnotationItem.tsx","components/AnnotationList.tsx","components/AnnotationGroupItem.tsx","components/AnnotationGroupList.tsx","components/Button.tsx","components/Equipment.tsx","utils/sr.tsx","components/Report.tsx","components/Item.tsx","data/specimens.tsx","components/SpecimenItem.tsx","components/SpecimenList.tsx","components/OpticalPathItem.tsx","components/OpticalPathList.tsx","components/MappingItem.tsx","components/MappingList.tsx","components/SegmentItem.tsx","components/SegmentList.tsx","utils/router.tsx","components/ColorSettingsMenu.tsx","components/AnnotationCategoryItem.tsx","components/AnnotationCategoryList.tsx","components/HoveredRoiTooltip.tsx","components/SlideViewer.tsx","services/RoiToAnnotationAdapter.ts","data/slides.tsx","services/fetchImageMetadata.ts","hooks/useSlides.ts","components/CaseViewer.tsx","components/DicomTagBrowser/dicomTagUtils.ts","utils/formatDicomDate.ts","components/DicomTagBrowser/DicomTagBrowser.tsx","components/Header.tsx","components/InfoPage.tsx","components/Worklist.tsx","utils/url.tsx","auth/OidcManager.tsx","utils/xhrRetryHook.ts","DicomWebManager.ts","App.tsx"],"sourcesContent":["import React from 'react'\nimport { v4 as generateUUID } from 'uuid'\nimport { Card, Descriptions } from 'antd'\n\nexport interface Attribute {\n  name: string\n  value: any\n}\n\nexport interface AttributeGroup {\n  name: string\n  attributes: Attribute[]\n}\n\ninterface DescriptionProps {\n  header?: string\n  icon?: any\n  attributes: Attribute[]\n  selectable?: boolean\n  hasLongValues?: boolean\n  methods?: React.ReactNode[]\n  children?: React.ReactNode\n}\n\n/**\n * React component for a description consisting of a header containing a\n * header and a body containing a list of name-value pairs.\n */\nclass Description extends React.Component<DescriptionProps, {}> {\n  render (): React.ReactNode {\n    let layout: 'horizontal' | 'vertical' = 'horizontal'\n    let labelLineHeight = '14px'\n    const contentLineHeight = '14px'\n    if (this.props.hasLongValues !== undefined && this.props.hasLongValues) {\n      layout = 'vertical'\n      labelLineHeight = '20px'\n    }\n    const items = this.props.attributes.map((item: Attribute, index: number) => {\n      const uid = generateUUID()\n      return (\n        <Descriptions.Item\n          key={uid}\n          label={item.name}\n          labelStyle={{\n            lineHeight: labelLineHeight\n          }}\n          contentStyle={{\n            fontWeight: 600,\n            whiteSpace: 'pre-line',\n            lineHeight: contentLineHeight\n          }}\n          span={1}\n        >\n          {item.value}\n        </Descriptions.Item>\n      )\n    })\n    let icon = null\n    if (this.props.icon !== undefined) {\n      icon = <this.props.icon />\n    }\n    return (\n      <Card\n        title={this.props.header}\n        extra={icon}\n        size='small'\n        hoverable={this.props.selectable}\n        bordered={this.props.header !== undefined}\n        actions={this.props.methods}\n      >\n        <Descriptions\n          column={1}\n          size='small'\n          layout={layout}\n          bordered={false}\n        >\n          {items}\n        </Descriptions>\n        {this.props.children}\n      </Card>\n    )\n  }\n}\n\nexport default Description\n","import React from 'react'\nimport * as dmv from 'dicom-microscopy-viewer'\n\nimport Description from './Description'\n\ninterface ClinicalTrialProps {\n  metadata: dmv.metadata.SOPClass\n}\n\n/**\n * React component representing a DICOM ClinicalTrial Information Entity that displays\n * common study-level attributes of contained DICOM Slide Microscopy images.\n */\nclass ClinicalTrial extends React.Component<ClinicalTrialProps> {\n  render (): React.ReactNode {\n    const attributes = []\n    if (this.props.metadata.ClinicalTrialSponsorName != null) {\n      // Attributes of Clinical Trial Subject module\n      attributes.push(\n        ...[\n          {\n            name: 'Sponsor Name',\n            value: this.props.metadata.ClinicalTrialSponsorName\n          },\n          {\n            name: 'Protocol ID',\n            value: this.props.metadata.ClinicalTrialProtocolID\n          },\n          {\n            name: 'Protocol Name',\n            value: this.props.metadata.ClinicalTrialProtocolName\n          },\n          {\n            name: 'Site Name',\n            value: this.props.metadata.ClinicalTrialSiteName\n          }\n        ]\n      )\n    }\n    if (this.props.metadata.ClinicalTrialTimePointID != null) {\n      // Attributes of Clinical Trial Study module\n      attributes.push(\n        {\n          name: 'Time Point ID',\n          value: this.props.metadata.ClinicalTrialTimePointID\n        }\n      )\n    }\n    // Attributes of Clinical Trial Subject module\n    return <Description attributes={attributes} />\n  }\n}\n\nexport default ClinicalTrial\n","import * as dmv from 'dicom-microscopy-viewer'\n\nfunction parseName (value: dmv.metadata.PersonName|null|undefined): string {\n  if (typeof value === 'object' && value !== null && value !== undefined) {\n    if (value.Alphabetic !== undefined) {\n      return value.Alphabetic.split('^').join(' ')\n    }\n    return ''\n  }\n  return ''\n}\n\nfunction parseDate (value: string|null|undefined): string {\n  if (value !== null && value !== undefined) {\n    const year = value.substring(0, 4)\n    const month = value.substring(4, 6)\n    const day = value.substring(6, 8)\n    return `${year}-${month}-${day}`\n  }\n  return ''\n}\n\nfunction parseTime (value: string|null|undefined): string {\n  if (value !== null && value !== undefined) {\n    const hours = value.substring(0, 2)\n    const minutes = value.substring(2, 4)\n    const seconds = value.substring(4, 6)\n    return `${hours}:${minutes}:${seconds}`\n  }\n  return ''\n}\n\nfunction parseDateTime (value: string|null|undefined): string {\n  if (value !== null && value !== undefined) {\n    const year = value.substring(0, 4)\n    const month = value.substring(4, 6)\n    const day = value.substring(6, 8)\n    const hours = value.substring(8, 10)\n    const minutes = value.substring(10, 12)\n    const seconds = value.substring(12, 14)\n    return `${year}-${month}-${day} ${hours}:${minutes}:${seconds}`\n  }\n  return ''\n}\n\nfunction parseSex (value: string|null|undefined): string {\n  const lut: { [key: string]: string } = {\n    F: 'Female',\n    M: 'Male',\n    O: 'Other'\n  }\n  if (value !== null && value !== undefined) {\n    return lut[value]\n  }\n  return ''\n}\n\nexport { parseDate, parseDateTime, parseName, parseSex, parseTime }\n","import React from 'react'\nimport * as dmv from 'dicom-microscopy-viewer'\n\nimport Description from './Description'\nimport { parseName, parseSex, parseDate } from '../utils/values'\n\ninterface PatientProps {\n  metadata: dmv.metadata.Study|dmv.metadata.SOPClass\n}\n\n/**\n * React component representing a DICOM Patient Information Entity that\n * displays common study-level, patient-related attributes of contained\n * DICOM Slide Microscopy images.\n */\nclass Patient extends React.Component<PatientProps, {}> {\n  render (): React.ReactNode {\n    const attributes = [\n      {\n        name: 'ID',\n        value: this.props.metadata.PatientID\n      },\n      {\n        name: 'Name',\n        value: parseName(this.props.metadata.PatientName)\n      },\n      {\n        name: 'Gender',\n        value: parseSex(this.props.metadata.PatientSex)\n      },\n      {\n        name: 'Birthdate',\n        value: parseDate(this.props.metadata.PatientBirthDate)\n      }\n    ]\n    return (\n      <Description attributes={attributes} />\n    )\n  }\n}\n\nexport default Patient\n","import React from 'react'\nimport * as dmv from 'dicom-microscopy-viewer'\n\nimport Description from './Description'\nimport { parseDate, parseTime } from '../utils/values'\n\ninterface StudyProps {\n  metadata: dmv.metadata.Study|dmv.metadata.SOPClass\n}\n\n/**\n * React component representing a DICOM Study Information Entity that displays\n * common study-level attributes of contained DICOM Slide Microscopy images.\n */\nclass Study extends React.Component<StudyProps> {\n  render (): React.ReactNode {\n    const attributes = [\n      {\n        name: 'Accession #',\n        value: this.props.metadata.AccessionNumber\n      },\n      {\n        name: 'ID',\n        value: this.props.metadata.StudyID\n      },\n      {\n        name: 'Date',\n        value: parseDate(this.props.metadata.StudyDate)\n      },\n      {\n        name: 'Time',\n        value: parseTime(this.props.metadata.StudyTime)\n      }\n    ]\n    return <Description attributes={attributes} />\n  }\n}\n\nexport default Study\n","export enum StorageClasses {\n  VL_WHOLE_SLIDE_MICROSCOPY_IMAGE = '1.2.840.10008.5.1.4.1.1.77.1.6',\n  COMPREHENSIVE_SR = '1.2.840.10008.5.1.4.1.1.88.33',\n  COMPREHENSIVE_3D_SR = '1.2.840.10008.5.1.4.1.1.88.34',\n  SEGMENTATION = '1.2.840.10008.5.1.4.1.1.66.4',\n  MICROSCOPY_BULK_SIMPLE_ANNOTATION = '1.2.840.10008.5.1.4.1.1.91.1',\n  PARAMETRIC_MAP = '1.2.840.10008.5.1.4.1.1.30',\n  ADVANCED_BLENDING_PRESENTATION_STATE = '1.2.840.10008.5.1.4.1.1.11.8',\n  COLOR_SOFTCOPY_PRESENTATION_STATE = '1.2.840.10008.5.1.4.1.1.11.2',\n  GRAYSCALE_SOFTCOPY_PRESENTATION_STATE = '1.2.840.10008.5.1.4.1.1.11.1',\n  PSEUDOCOLOR_SOFTCOPY_PRESENTATION_STATE = '1.2.840.10008.5.1.4.1.1.11.3'\n}\n","// Use symbols to prevent exposing private attributes\nconst _subscriptions = Symbol('subscriptions')\nconst _lastSubscriptionId = Symbol('lastSubscriptionId')\n\n/**\n * Class to enable implementation of publish/subscribe pattern\n * @class\n * @classdesc Enables publishing/subscribing\n */\nexport default class PubSub {\n  constructor () {\n    this[_subscriptions] = {}\n    this[_lastSubscriptionId] = 0\n  }\n\n  /**\n   * Adds a subscription callback to the provided event name\n   * @param {string} eventName Event name that will trigger the callback\n   * @param {Function} callback Function to be executed when event is published\n   * @returns {void}\n   */\n  subscribe (eventName, callback) {\n    if (eventName === undefined) {\n      throw new Error('Trying to subscribe to an inexistent event')\n    }\n\n    if (typeof callback !== 'function') {\n      throw new Error('The provided callback must be a function')\n    }\n\n    if (!this[_subscriptions].hasOwnProperty(eventName)) {\n      this[_subscriptions][eventName] = {}\n    }\n\n    const subscriptionId = `sub${this[_lastSubscriptionId]++}`\n    this[_subscriptions][eventName][subscriptionId] = callback\n  }\n\n  /**\n   * Removes a subscription callback for the provided event name\n   * @param {string} eventName Event name for the registerd callback\n   * @param {Function} [callback] Function to have its subscription removed\n   * @returns {void}\n   */\n  unsubscribe (eventName, callback) {\n    const callbacks = this[_subscriptions][eventName] || {}\n    for (const subscriptionId in callbacks) {\n      if (!callback) {\n        delete callbacks[subscriptionId]\n      } else if (callbacks[subscriptionId] === callback) {\n        delete callbacks[subscriptionId]\n      }\n    }\n  }\n\n  /**\n   * Trigger all registered subscription callbacks for a specific event name\n   * @param {String} eventName Event name to trigger subscriptions from\n   * @param {any} [payload] Payload that will be passed to the callback fuction\n   * @returns {void}\n   */\n  publish (eventName, ...payload) {\n    if (eventName === undefined) {\n      throw new Error('Trying to publish an inexistent event')\n    }\n\n    const callbacks = this[_subscriptions][eventName] || {}\n    for (const subscriptionId in callbacks) {\n      callbacks[subscriptionId](...payload)\n    }\n  }\n\n  /**\n   * Cleares all subscriptions for current instance\n   * @returns {void}\n   */\n  unsubscribeFromAll () {\n    for (const eventName in this[_subscriptions]) {\n      const callbacks = this[_subscriptions][eventName]\n      for (const subscriptionId in callbacks) {\n        delete callbacks[subscriptionId]\n      }\n    }\n  }\n}\n","const errorTypes = {\n  AUTHENTICATION: 'Authentication',\n  COMMUNICATION: 'Communication',\n  ENCODINGANDDECODING: 'EncodingDecoding',\n  VISUALIZATION: 'Visualization'\n}\n\nclass CustomError extends Error {\n  constructor (type, message) {\n    super()\n    this.message = message\n    this.stack = new Error().stack\n    this.type = type\n  }\n}\n\nexport { errorTypes, CustomError }\n","import PubSub from '../utils/PubSub'\nimport { notification } from 'antd'\nimport { CustomError, errorTypes } from '../utils/CustomError'\n\nexport const NotificationMiddlewareEvents = {\n  OnError: 'onError',\n  OnWarning: 'onWarning'\n}\n\nexport const NotificationMiddlewareContext = {\n  DICOMWEB: 'dicomweb-client',\n  DMV: 'dicom-microscopy-viewer',\n  DCMJS: 'dcmjs',\n  SLIM: 'slim',\n  AUTH: 'authentication'\n}\n\nconst NotificationType = {\n  TOAST: 'toast',\n  CONSOLE: 'console'\n}\n\n/* Sources of Error:\n  1. 'dicomweb-client': Error while requesting/fetching data, tagged as 'Communication'\n  2. 'slim' and 'dicom-microscopy-viewer' library: Error related to dicom data encoding/decoding,\n  could directly/indirectly impact image-related visualization, tagged as 'Visualization' or\n  'Encoding/Decoding' accordingly\n  3. 'dcmjs' library: Data parsing error, tagged as 'DICOMError'\n  4. 'authentication': Error during user authentication, tagged as 'Authentication'\n  */\nconst NotificationSourceDefinition = {\n  sources: [\n    {\n      category: errorTypes.AUTHENTICATION,\n      notificationType: NotificationType.TOAST\n    },\n    {\n      category: errorTypes.COMMUNICATION,\n      notificationType: NotificationType.TOAST\n    },\n    {\n      category: errorTypes.VISUALIZATION,\n      notificationType: NotificationType.TOAST\n    },\n    {\n      category: errorTypes.ENCODINGANDDECODING,\n      notificationType: NotificationType.CONSOLE\n    },\n    {\n      category: 'Warning',\n      notificationType: NotificationType.TOAST\n    }\n  ]\n}\n\nclass NotificationMiddleware extends PubSub {\n  constructor () {\n    super()\n\n    const outerContext = (args) => {\n      this.publish(NotificationMiddlewareEvents.OnWarning, Array.from(args).join(' '))\n    }\n\n    (function () {\n      const warn = console.warn\n      console.warn = function () {\n        if (!JSON.stringify(arguments).includes('request')) {\n          outerContext(arguments)\n        }\n        warn.apply(this, Array.prototype.slice.call(arguments))\n      }\n    }())\n  }\n\n  /**\n   * Error handling middleware function\n   *\n   * @param source - source of error - dicomweb-client, dmv, dcmjs or slim itself\n   * @param error - error object\n   */\n  onError (source, error) {\n    const errorCategory = error.type\n    const sourceConfig = NotificationSourceDefinition.sources.find(\n      s => s.category === errorCategory\n    )\n\n    const { notificationType } = sourceConfig\n\n    this.publish(NotificationMiddlewareEvents.OnError, {\n      source,\n      error\n    })\n\n    let notificationMsg\n    if (error instanceof CustomError) {\n      notificationMsg = error.message\n    } else {\n      notificationMsg = String(error)\n    }\n\n    switch (notificationType) {\n      case NotificationType.TOAST:\n        console.error(`A ${errorCategory} error occurred: `, error)\n        return notification.error({\n          message: `${errorCategory} error`,\n          description: notificationMsg,\n          duration: 3\n        })\n\n      case NotificationType.CONSOLE:\n        console.error(`A ${errorCategory} error occurred: `, error)\n        break\n\n      default:\n    }\n  }\n}\n\nexport default new NotificationMiddleware()\n","import React from 'react'\nimport { FaSpinner } from 'react-icons/fa'\nimport * as dmv from 'dicom-microscopy-viewer'\nimport { Menu } from 'antd'\n\nimport DicomWebManager from '../DicomWebManager'\nimport Description from './Description'\nimport { Slide } from '../data/slides'\nimport { StorageClasses } from '../data/uids'\nimport NotificationMiddleware, {\n  NotificationMiddlewareContext\n} from '../services/NotificationMiddleware'\nimport { CustomError } from '../utils/CustomError'\n\ninterface SlideItemProps {\n  clients: { [key: string]: DicomWebManager }\n  slide: Slide\n}\n\ninterface SlideItemState {\n  isLoading: boolean\n}\n\n/**\n * React component representing a DICOM Series Information Entity that displays\n * common series-level attributes of contained DICOM Slide Microscopy images\n * as well as the OVERVIEW image (if available).\n * When selected a Slide Viewer instance is created for the display of the\n * contained images.\n */\nclass SlideItem extends React.Component<SlideItemProps, SlideItemState> {\n  state = { isLoading: false }\n\n  private readonly overviewViewportRef = React.createRef<HTMLDivElement>()\n\n  private overviewViewer?: dmv.viewer.OverviewImageViewer\n\n  constructor (props: SlideItemProps) {\n    super(props)\n    this.overviewViewer = undefined\n  }\n\n  componentDidMount (): void {\n    this.setState({ isLoading: true })\n    if (this.props.slide.overviewImages.length > 0) {\n      const metadata = this.props.slide.overviewImages[0]\n      if (this.overviewViewportRef.current !== null) {\n        this.overviewViewportRef.current.innerHTML = ''\n        console.info(\n          'instantiate viewer for OVERVIEW image of slide ' +\n          `\"${metadata.ContainerIdentifier}\"`\n        )\n        this.overviewViewer = new dmv.viewer.OverviewImageViewer({\n          client: this.props.clients[\n            StorageClasses.VL_WHOLE_SLIDE_MICROSCOPY_IMAGE\n          ],\n          metadata: metadata,\n          resizeFactor: 1,\n          errorInterceptor: (error: CustomError) => {\n            NotificationMiddleware.onError(\n              NotificationMiddlewareContext.DMV,\n              error\n            )\n          }\n        })\n        this.overviewViewer.render({\n          container: this.overviewViewportRef.current\n        })\n      }\n    }\n\n    this.setState({ isLoading: false })\n  }\n\n  render (): React.ReactNode {\n    if (this.overviewViewer !== undefined) {\n      this.overviewViewer.resize()\n    }\n    const attributes = []\n    const description = this.props.slide.description\n    if (description != null && description !== '') {\n      attributes.push({\n        name: 'Description',\n        value: description\n      })\n    }\n    if (this.state.isLoading) {\n      return (<FaSpinner />)\n    }\n\n    /* Properties need to be propagated down to Menu.Item:\n     * https://github.com/react-component/menu/issues/142\n     */\n    return (\n      <Menu.Item\n        style={{ height: '100%' }}\n        key={this.props.slide.seriesInstanceUIDs[0]}\n        {...this.props}\n      >\n        <Description\n          header={this.props.slide.containerIdentifier}\n          attributes={attributes}\n          selectable\n        >\n          {(this.overviewViewportRef.current != null) && <div style={{ height: '100px' }} ref={this.overviewViewportRef} />}\n        </Description>\n      </Menu.Item>\n    )\n  }\n}\n\nexport default SlideItem\n","import React from 'react'\nimport { Menu } from 'antd'\n\nimport DicomWebManager from '../DicomWebManager'\nimport SlideItem from './SlideItem'\nimport { Slide } from '../data/slides'\n\ninterface SlideListProps {\n  metadata: Slide[]\n  clients: { [key: string]: DicomWebManager }\n  selectedSeriesInstanceUID: string\n  onSeriesSelection: (\n    { seriesInstanceUID }: { seriesInstanceUID: string }\n  ) => void\n}\n\ninterface SlideListState {\n  selectedSeriesInstanceUID: string\n}\n\n/**\n * React component representing a list of DICOM Series Information Entities.\n */\nclass SlideList extends React.Component<SlideListProps, SlideListState> {\n  state = {\n    selectedSeriesInstanceUID: this.props.selectedSeriesInstanceUID\n  }\n\n  componentDidMount (): void {\n    this.props.onSeriesSelection({\n      seriesInstanceUID: this.state.selectedSeriesInstanceUID\n    })\n  }\n\n  render (): React.ReactNode {\n    const slideList = this.props.metadata\n    const slideItemList = []\n    for (let i = 0; i < slideList.length; ++i) {\n      const slide = slideList[i]\n      const slideItem = (\n        <SlideItem\n          key={slide.seriesInstanceUIDs[0]}\n          slide={slide}\n          clients={this.props.clients}\n        />\n      )\n\n      slideItemList.push(slideItem)\n    }\n\n    const handleMenuItemSelection = ({ key, keyPath, domEvent, selectedKeys }: {\n      key: React.ReactText\n      keyPath: React.ReactText[]\n      domEvent: React.MouseEvent<HTMLElement> | React.KeyboardEvent<HTMLElement>\n      selectedKeys?: React.ReactText[]\n    }): void => {\n      console.info(`select slide \"${key}\"`)\n      this.setState({ selectedSeriesInstanceUID: key.toString() })\n      this.props.onSeriesSelection({ seriesInstanceUID: key.toString() })\n    }\n\n    let selectedKeys\n    if (this.state.selectedSeriesInstanceUID !== undefined &&\n      this.state.selectedSeriesInstanceUID !== null) {\n      selectedKeys = [this.state.selectedSeriesInstanceUID]\n    }\n\n    return (\n      <Menu\n        style={{ width: '100%' }}\n        selectedKeys={selectedKeys}\n        onSelect={handleMenuItemSelection}\n        mode='inline'\n        inlineIndent={0}\n      >\n        {slideItemList}\n      </Menu>\n    )\n  }\n}\n\nexport default SlideList\n","import React from 'react'\nimport * as dmv from 'dicom-microscopy-viewer'\nimport * as dcmjs from 'dcmjs'\nimport { Menu, Space, Switch } from 'antd'\nimport { FaEye, FaEyeSlash } from 'react-icons/fa'\n\nimport Description from './Description'\n\ninterface AnnotationItemProps {\n  roi: dmv.roi.ROI\n  index: number\n  isVisible: boolean\n  onVisibilityChange: ({ roiUID, isVisible }: {\n    roiUID: string\n    isVisible: boolean\n  }) => void\n}\n\n/**\n * React component representing a Region of Interest (ROI) annotation.\n */\nclass AnnotationItem extends React.Component<AnnotationItemProps, {}> {\n  constructor (props: AnnotationItemProps) {\n    super(props)\n    this.handleVisibilityChange = this.handleVisibilityChange.bind(this)\n  }\n\n  handleVisibilityChange (\n    checked: boolean,\n    event: React.MouseEvent<HTMLButtonElement>\n  ): void {\n    this.props.onVisibilityChange({\n      roiUID: this.props.roi.uid,\n      isVisible: checked\n    })\n  }\n\n  render (): React.ReactNode {\n    const identifier = `ROI ${this.props.index + 1}`\n    const attributes: Array<{ name: string, value: string }> = []\n    /**\n     * This hack is required for Menu.Item to work properly:\n     * https://github.com/react-component/menu/issues/142\n     */\n    const { isVisible, onVisibilityChange, ...otherProps } = this.props\n    this.props.roi.evaluations.forEach((\n      item: (\n        dcmjs.sr.valueTypes.TextContentItem |\n        dcmjs.sr.valueTypes.CodeContentItem\n      )\n    ) => {\n      const nameValue = item.ConceptNameCodeSequence[0].CodeValue\n      const nameMeaning = item.ConceptNameCodeSequence[0].CodeMeaning\n      const name = `${nameMeaning}`\n      if (item.ValueType === dcmjs.sr.valueTypes.ValueTypes.CODE) {\n        const codeContentItem = item as dcmjs.sr.valueTypes.CodeContentItem\n        const valueMeaning = codeContentItem.ConceptCodeSequence[0].CodeMeaning\n        // For consistency with Segment and Annotation Group\n        if (nameValue === '276214006') {\n          attributes.push({\n            name: 'Property category',\n            value: `${valueMeaning}`\n          })\n        } else if (nameValue === '121071') {\n          attributes.push({\n            name: 'Property type',\n            value: `${valueMeaning}`\n          })\n        } else if (nameValue === '111001') {\n          attributes.push({\n            name: 'Algorithm Name',\n            value: `${valueMeaning}`\n          })\n        } else {\n          attributes.push({\n            name: name,\n            value: `${valueMeaning}`\n          })\n        }\n      } else if (item.ValueType === dcmjs.sr.valueTypes.ValueTypes.TEXT) {\n        const textContentItem = item as dcmjs.sr.valueTypes.TextContentItem\n        attributes.push({\n          name: name,\n          value: textContentItem.TextValue\n        })\n      }\n    })\n    this.props.roi.measurements.forEach(item => {\n      const nameMeaning = item.ConceptNameCodeSequence[0].CodeMeaning\n      const name = `${nameMeaning}`\n      const seq = item.MeasuredValueSequence[0]\n      const value = seq.NumericValue.toPrecision(6)\n      const unit = seq.MeasurementUnitsCodeSequence[0].CodeValue\n      attributes.push({\n        name: name,\n        value: `${value} ${unit}`\n      })\n    })\n    return (\n      <Space align='start'>\n        <div style={{ paddingLeft: '14px' }}>\n          <Switch\n            size='small'\n            onChange={this.handleVisibilityChange}\n            checked={this.props.isVisible}\n            checkedChildren={<FaEye />}\n            unCheckedChildren={<FaEyeSlash />}\n          />\n        </div>\n        <Menu.Item\n          style={{ height: '100%', paddingLeft: '3px' }}\n          key={this.props.roi.uid}\n          {...otherProps}\n        >\n          <Description\n            header={identifier}\n            attributes={attributes}\n            selectable\n            hasLongValues\n          />\n        </Menu.Item>\n      </Space>\n    )\n  }\n}\n\nexport default AnnotationItem\n","import React from 'react'\nimport * as dmv from 'dicom-microscopy-viewer'\nimport { Menu, Switch } from 'antd'\nimport { FaEye, FaEyeSlash } from 'react-icons/fa'\n\nimport AnnotationItem from './AnnotationItem'\n\ninterface AnnotationListProps {\n  rois: dmv.roi.ROI[]\n  selectedRoiUIDs: Set<string>\n  visibleRoiUIDs: Set<string>\n  onVisibilityChange: ({ roiUID, isVisible }: {\n    roiUID: string\n    isVisible: boolean\n  }) => void\n  onSelection: ({ roiUID }: { roiUID: string }) => void\n}\n\n/**\n * React component representing a list of Region of Interest (ROI)\n * annotations.\n */\nclass AnnotationList extends React.Component<AnnotationListProps, {}> {\n  constructor (props: AnnotationListProps) {\n    super(props)\n    this.handleMenuItemSelection = this.handleMenuItemSelection.bind(this)\n    this.handleVisibilityChange = this.handleVisibilityChange.bind(this)\n  }\n\n  handleVisibilityChange (\n    checked: boolean,\n    event: React.MouseEvent<HTMLButtonElement>\n  ): void {\n    if (checked) {\n      this.props.rois.forEach(roi => {\n        this.props.onVisibilityChange({ roiUID: roi.uid, isVisible: checked })\n      })\n    } else {\n      this.props.visibleRoiUIDs.forEach(roiUID => {\n        this.props.onVisibilityChange({ roiUID, isVisible: checked })\n      })\n    }\n  }\n\n  handleMenuItemSelection (object: any): void {\n    this.props.onSelection({ roiUID: object.key })\n  }\n\n  render (): React.ReactNode {\n    const items = this.props.rois.map((roi, index) => (\n      <AnnotationItem\n        key={roi.uid}\n        roi={roi}\n        index={index}\n        isVisible={this.props.visibleRoiUIDs.has(roi.uid)}\n        onVisibilityChange={this.props.onVisibilityChange}\n      />\n    ))\n\n    return (\n      <>\n        <div style={{ paddingLeft: '14px', paddingTop: '7px', paddingBottom: '7px' }}>\n          <Switch\n            size='small'\n            onChange={this.handleVisibilityChange}\n            checked={this.props.visibleRoiUIDs.size > 0}\n            checkedChildren={<FaEye />}\n            unCheckedChildren={<FaEyeSlash />}\n          />\n        </div>\n        <Menu\n          selectedKeys={[...this.props.selectedRoiUIDs.values()]}\n          onSelect={this.handleMenuItemSelection}\n          onClick={this.handleMenuItemSelection}\n        >\n          {items}\n        </Menu>\n      </>\n    )\n  }\n}\n\nexport default AnnotationList\n","import React from 'react'\nimport {\n  Badge,\n  Button,\n  Col,\n  Divider,\n  InputNumber,\n  Menu,\n  Popover,\n  Row,\n  Select,\n  Slider,\n  Space,\n  Switch\n} from 'antd'\nimport { SettingOutlined } from '@ant-design/icons'\nimport { FaEye, FaEyeSlash } from 'react-icons/fa'\nimport * as dmv from 'dicom-microscopy-viewer'\nimport * as dcmjs from 'dcmjs'\n\nimport Description from './Description'\n\ninterface AnnotationGroupItemProps {\n  annotationGroup: dmv.annotation.AnnotationGroup\n  isVisible: boolean\n  metadata: dmv.metadata.MicroscopyBulkSimpleAnnotations\n  defaultStyle: {\n    opacity: number\n    color: number[]\n  }\n  onVisibilityChange: ({ annotationGroupUID, isVisible }: {\n    annotationGroupUID: string\n    isVisible: boolean\n  }) => void\n  onStyleChange: ({ uid, styleOptions }: {\n    uid: string\n    styleOptions: {\n      opacity?: number\n      color?: number[]\n      limitValues?: number[]\n      measurement?: dcmjs.sr.coding.CodedConcept\n    }\n  }) => void\n}\n\ninterface AnnotationGroupItemState {\n  isVisible: boolean\n  currentStyle: {\n    opacity: number\n    color?: number[]\n    limitValues?: number[]\n    measurement?: dcmjs.sr.coding.CodedConcept\n  }\n}\n\n/**\n * React component representing an Annotation Group.\n */\nclass AnnotationGroupItem extends React.Component<AnnotationGroupItemProps, AnnotationGroupItemState> {\n  constructor (props: AnnotationGroupItemProps) {\n    super(props)\n    this.handleVisibilityChange = this.handleVisibilityChange.bind(this)\n    this.handleMeasurementSelection = this.handleMeasurementSelection.bind(this)\n    this.handleOpacityChange = this.handleOpacityChange.bind(this)\n    this.handleColorRChange = this.handleColorRChange.bind(this)\n    this.handleColorGChange = this.handleColorGChange.bind(this)\n    this.handleColorBChange = this.handleColorBChange.bind(this)\n    this.getCurrentColor = this.getCurrentColor.bind(this)\n    this.state = {\n      isVisible: this.props.isVisible,\n      currentStyle: {\n        opacity: this.props.defaultStyle.opacity,\n        color: this.props.defaultStyle.color\n      }\n    }\n  }\n\n  handleVisibilityChange (\n    checked: boolean,\n    event: React.MouseEvent<HTMLButtonElement>\n  ): void {\n    this.props.onVisibilityChange({\n      annotationGroupUID: this.props.annotationGroup.uid,\n      isVisible: checked\n    })\n    this.setState({ isVisible: checked })\n  }\n\n  handleOpacityChange (value: number | null): void {\n    if (value != null) {\n      this.props.onStyleChange({\n        uid: this.props.annotationGroup.uid,\n        styleOptions: {\n          opacity: value\n        }\n      })\n      this.setState({\n        currentStyle: {\n          opacity: value,\n          color: this.state.currentStyle.color,\n          limitValues: this.state.currentStyle.limitValues\n        }\n      })\n    }\n  }\n\n  handleColorRChange (\n    value: number | number[] | null\n  ): void {\n    if (value != null && this.state.currentStyle.color !== undefined) {\n      const color = [\n        Array.isArray(value) ? value[0] : value,\n        this.state.currentStyle.color[1],\n        this.state.currentStyle.color[2]\n      ]\n      this.setState(state => ({\n        currentStyle: {\n          color: color,\n          opacity: state.currentStyle.opacity,\n          limitValues: state.currentStyle.limitValues\n        }\n      }))\n      this.props.onStyleChange({\n        uid: this.props.annotationGroup.uid,\n        styleOptions: { color: color }\n      })\n    }\n  }\n\n  handleColorGChange (\n    value: number | number[] | null\n  ): void {\n    if (value != null && this.state.currentStyle.color !== undefined) {\n      const color = [\n        this.state.currentStyle.color[0],\n        Array.isArray(value) ? value[0] : value,\n        this.state.currentStyle.color[2]\n      ]\n      this.setState(state => ({\n        currentStyle: {\n          color: color,\n          opacity: state.currentStyle.opacity,\n          limitValues: state.currentStyle.limitValues\n        }\n      }))\n      this.props.onStyleChange({\n        uid: this.props.annotationGroup.uid,\n        styleOptions: { color: color }\n      })\n    }\n  }\n\n  handleColorBChange (\n    value: number | number[] | null\n  ): void {\n    if (value != null && this.state.currentStyle.color !== undefined) {\n      const color = [\n        this.state.currentStyle.color[0],\n        this.state.currentStyle.color[1],\n        Array.isArray(value) ? value[0] : value\n      ]\n      this.setState(state => ({\n        currentStyle: {\n          color: color,\n          opacity: state.currentStyle.opacity,\n          limitValues: state.currentStyle.limitValues\n        }\n      }))\n      this.props.onStyleChange({\n        uid: this.props.annotationGroup.uid,\n        styleOptions: { color: color }\n      })\n    }\n  }\n\n  getCurrentColor (): string {\n    const rgb2hex = (values: number[]): string => {\n      const r = values[0]\n      const g = values[1]\n      const b = values[2]\n      return '#' + (0x1000000 + (r << 16) + (g << 8) + b).toString(16).slice(1)\n    }\n\n    if (this.state.currentStyle.color != null) {\n      return rgb2hex(this.state.currentStyle.color)\n    } else {\n      return 'white'\n    }\n  }\n\n  handleLowerLimitChange (\n    value: number | null\n  ): void {\n    if (value != null && this.state.currentStyle.limitValues !== undefined) {\n      this.setState(state => {\n        if (state.currentStyle.limitValues !== undefined) {\n          return {\n            currentStyle: {\n              color: state.currentStyle.color,\n              opacity: state.currentStyle.opacity,\n              limitValues: [value, state.currentStyle.limitValues[1]]\n            }\n          }\n        } else {\n          return {\n            currentStyle: {\n              color: state.currentStyle.color,\n              opacity: state.currentStyle.opacity,\n              limitValues: state.currentStyle.limitValues\n            }\n          }\n        }\n      })\n      this.props.onStyleChange({\n        uid: this.props.annotationGroup.uid,\n        styleOptions: {\n          limitValues: [\n            value,\n            this.state.currentStyle.limitValues[1]\n          ]\n        }\n      })\n    }\n  }\n\n  handleUpperLimitChange (\n    value: number | null\n  ): void {\n    if (value != null && this.state.currentStyle.limitValues !== undefined) {\n      this.setState(state => {\n        if (state.currentStyle.limitValues !== undefined) {\n          return {\n            currentStyle: {\n              color: state.currentStyle.color,\n              opacity: state.currentStyle.opacity,\n              limitValues: [state.currentStyle.limitValues[0], value]\n            }\n          }\n        } else {\n          return {\n            currentStyle: {\n              color: state.currentStyle.color,\n              opacity: state.currentStyle.opacity,\n              limitValues: state.currentStyle.limitValues\n            }\n          }\n        }\n      })\n      this.props.onStyleChange({\n        uid: this.props.annotationGroup.uid,\n        styleOptions: {\n          limitValues: [\n            this.state.currentStyle.limitValues[0],\n            value\n          ]\n        }\n      })\n    }\n  }\n\n  handleLimitChange (\n    values: number[]\n  ): void {\n    this.setState(state => ({\n      currentStyle: {\n        color: state.currentStyle.color,\n        opacity: state.currentStyle.opacity,\n        limitValues: values\n      }\n    }))\n    this.props.onStyleChange({\n      uid: this.props.annotationGroup.uid,\n      styleOptions: { limitValues: values }\n    })\n  }\n\n  handleMeasurementSelection (value?: string, option?: any): void {\n    if (value != null && option.children != null) {\n      const codeComponents = value.split('-')\n      const measurement = new dcmjs.sr.coding.CodedConcept({\n        value: codeComponents[1],\n        schemeDesignator: codeComponents[0],\n        meaning: option.children\n      })\n      this.props.onStyleChange({\n        uid: this.props.annotationGroup.uid,\n        styleOptions: { measurement }\n      })\n      this.setState(state => ({\n        currentStyle: {\n          opacity: state.currentStyle.opacity,\n          measurement\n        }\n      }))\n    } else {\n      this.props.onStyleChange({\n        uid: this.props.annotationGroup.uid,\n        styleOptions: {\n          color: this.props.defaultStyle.color\n        }\n      })\n      this.setState(state => ({\n        currentStyle: {\n          opacity: state.currentStyle.opacity,\n          color: this.props.defaultStyle.color,\n          limitValues: undefined\n        }\n      }))\n    }\n  }\n\n  render (): React.ReactNode {\n    const index = this.props.metadata.AnnotationGroupSequence.findIndex(\n      item => (item.AnnotationGroupUID === this.props.annotationGroup.uid)\n    )\n    const item = this.props.metadata.AnnotationGroupSequence[index]\n    const attributes: Array<{ name: string, value: string }> = [\n      {\n        name: 'Property type',\n        value: this.props.annotationGroup.propertyType.CodeMeaning\n      },\n      {\n        name: 'Property category',\n        value: this.props.annotationGroup.propertyCategory.CodeMeaning\n      },\n      // {\n      //   name: 'Algorithm Name',\n      //   value: this.props.annotationGroup.algorithmName\n      // },\n      {\n        name: 'Graphic type',\n        value: item.GraphicType\n      },\n      {\n        name: 'Annotation coordinate type',\n        value: this.props.metadata.AnnotationCoordinateType\n      }\n    ]\n\n    const measurementsSequence = item.MeasurementsSequence ?? []\n    const measurementOptions = measurementsSequence.map((measurementItem, i) => {\n      const name = measurementItem.ConceptNameCodeSequence[0]\n      return (\n        <Select.Option\n          key={i}\n          value={`${name.CodingSchemeDesignator}-${name.CodeValue}`}\n          dropdownMatchSelectWidth={false}\n          size='small'\n          disabled={!this.props.isVisible}\n        >\n          {name.CodeMeaning}\n        </Select.Option>\n      )\n    })\n    measurementOptions.push(\n      <Select.Option\n        key='-'\n        value={undefined}\n        dropdownMatchSelectWidth={false}\n        size='small'\n        disabled={!this.props.isVisible}\n      >\n        <></>\n      </Select.Option>\n    )\n\n    let colorSettings\n    if (this.state.currentStyle.color != null) {\n      colorSettings = (\n        <>\n          <Divider plain>\n            Color\n          </Divider>\n          <Row justify='center' align='middle' gutter={[8, 8]}>\n            <Col span={5}>\n              Red\n            </Col>\n            <Col span={14}>\n              <Slider\n                range={false}\n                min={0}\n                max={255}\n                step={1}\n                value={this.state.currentStyle.color[0]}\n                onChange={this.handleColorRChange}\n              />\n            </Col>\n            <Col span={5}>\n              <InputNumber\n                min={0}\n                max={255}\n                size='small'\n                style={{ width: '65px' }}\n                value={this.state.currentStyle.color[0]}\n                onChange={this.handleColorRChange}\n              />\n            </Col>\n          </Row>\n\n          <Row justify='center' align='middle' gutter={[8, 8]}>\n            <Col span={5}>\n              Green\n            </Col>\n            <Col span={14}>\n              <Slider\n                range={false}\n                min={0}\n                max={255}\n                step={1}\n                value={this.state.currentStyle.color[1]}\n                onChange={this.handleColorGChange}\n              />\n            </Col>\n            <Col span={5}>\n              <InputNumber\n                min={0}\n                max={255}\n                size='small'\n                style={{ width: '65px' }}\n                value={this.state.currentStyle.color[1]}\n                onChange={this.handleColorGChange}\n              />\n            </Col>\n          </Row>\n\n          <Row justify='center' align='middle' gutter={[8, 8]}>\n            <Col span={5}>\n              Blue\n            </Col>\n            <Col span={14}>\n              <Slider\n                range={false}\n                min={0}\n                max={255}\n                step={1}\n                value={this.state.currentStyle.color[2]}\n                onChange={this.handleColorBChange}\n              />\n            </Col>\n            <Col span={5}>\n              <InputNumber\n                min={0}\n                max={255}\n                size='small'\n                style={{ width: '65px' }}\n                value={this.state.currentStyle.color[2]}\n                onChange={this.handleColorBChange}\n              />\n            </Col>\n          </Row>\n          <Divider plain />\n        </>\n      )\n    }\n\n    let windowSettings\n    let explorationSettings\n    if (measurementsSequence.length > 0) {\n      if (this.state.currentStyle.limitValues != null) {\n        // TODO: need to get default min/max values from viewer first\n        const minValue = 0\n        const maxValue = 1000\n        windowSettings = (\n          <>\n            <Divider plain>\n              Values of interest\n            </Divider>\n            <Row justify='center' align='middle' gutter={[8, 8]}>\n              <Col span={6}>\n                <InputNumber\n                  min={0}\n                  max={this.state.currentStyle.limitValues[1]}\n                  size='small'\n                  style={{ width: '75px' }}\n                  value={this.state.currentStyle.limitValues[0]}\n                  onChange={this.handleLowerLimitChange}\n                />\n              </Col>\n              <Col span={12}>\n                <Slider\n                  range\n                  min={minValue}\n                  max={maxValue}\n                  step={1}\n                  value={[\n                    this.state.currentStyle.limitValues[0],\n                    this.state.currentStyle.limitValues[1]\n                  ]}\n                  onChange={this.handleLimitChange}\n                />\n              </Col>\n              <Col span={6}>\n                <InputNumber\n                  min={this.state.currentStyle.limitValues[0]}\n                  max={maxValue}\n                  size='small'\n                  style={{ width: '75px' }}\n                  value={this.state.currentStyle.limitValues[1]}\n                  onChange={this.handleUpperLimitChange}\n                />\n              </Col>\n            </Row>\n          </>\n        )\n      }\n      explorationSettings = (\n        <>\n          <Divider plain>\n            Exploration\n          </Divider>\n          <Row justify='start' align='middle' gutter={[8, 8]}>\n            <Col span={8}>\n              Measurement\n            </Col>\n            <Col span={16}>\n              <Select\n                style={{ minWidth: '65px', width: '90%' }}\n                onSelect={this.handleMeasurementSelection}\n                key='annotation-group-measurements'\n                defaultValue={undefined}\n              >\n                {measurementOptions}\n              </Select>\n            </Col>\n          </Row>\n        </>\n      )\n    }\n\n    const settings = (\n      <div>\n        {colorSettings}\n        {windowSettings}\n        <Row justify='start' align='middle' gutter={[8, 8]}>\n          <Col span={6}>\n            Opacity\n          </Col>\n          <Col span={12}>\n            <Slider\n              range={false}\n              min={0}\n              max={1}\n              step={0.01}\n              value={this.state.currentStyle.opacity}\n              onChange={this.handleOpacityChange}\n            />\n          </Col>\n          <Col span={6}>\n            <InputNumber\n              min={0}\n              max={1}\n              size='small'\n              step={0.1}\n              style={{ width: '65px' }}\n              value={this.state.currentStyle.opacity}\n              onChange={this.handleOpacityChange}\n            />\n          </Col>\n        </Row>\n        {explorationSettings}\n      </div>\n    )\n\n    const color = this.getCurrentColor()\n    const isBadgeVisible = (\n      this.state.isVisible && this.state.currentStyle.measurement == null\n    )\n    const {\n      annotationGroup,\n      defaultStyle,\n      isVisible,\n      metadata,\n      onVisibilityChange,\n      onStyleChange,\n      ...otherProps\n    } = this.props\n    return (\n      <Menu.Item\n        style={{ height: '100%', paddingLeft: '3px' }}\n        key={this.props.annotationGroup.uid}\n        {...otherProps}\n      >\n        <Space align='start'>\n          <div style={{ paddingLeft: '14px' }}>\n            <Space direction='vertical' align='end'>\n              <Switch\n                size='small'\n                onChange={this.handleVisibilityChange}\n                checked={this.props.isVisible}\n                checkedChildren={<FaEye />}\n                unCheckedChildren={<FaEyeSlash />}\n              />\n              <Popover\n                placement='left'\n                content={settings}\n                overlayStyle={{ width: '350px' }}\n                title='Display Settings'\n              >\n                <Button\n                  type='primary'\n                  shape='circle'\n                  icon={<SettingOutlined />}\n                />\n              </Popover>\n            </Space>\n          </div>\n          <Badge\n            offset={[-20, 20]}\n            count={' '}\n            style={{\n              borderStyle: 'solid',\n              borderWidth: '1px',\n              borderColor: 'gray',\n              visibility: isBadgeVisible ? 'visible' : 'hidden',\n              backgroundImage: `linear-gradient(to bottom, ${color}, ${color}`\n            }}\n          >\n            <Description\n              header={this.props.annotationGroup.label}\n              attributes={attributes}\n              selectable\n              hasLongValues\n            />\n          </Badge>\n        </Space>\n      </Menu.Item>\n    )\n  }\n}\n\nexport default AnnotationGroupItem\n","import React from 'react'\nimport { Menu } from 'antd'\nimport * as dmv from 'dicom-microscopy-viewer'\nimport * as dcmjs from 'dcmjs'\n\nimport AnnotationGroupItem from './AnnotationGroupItem'\n\ninterface AnnotationGroupListProps {\n  annotationGroups: dmv.annotation.AnnotationGroup[]\n  visibleAnnotationGroupUIDs: Set<string>\n  metadata: {\n    [annotationGroupUID: string]: dmv.metadata.MicroscopyBulkSimpleAnnotations\n  }\n  defaultAnnotationGroupStyles: {\n    [annotationGroupUID: string]: {\n      opacity: number\n      color: number[]\n    }\n  }\n  onAnnotationGroupVisibilityChange: ({ annotationGroupUID, isVisible }: {\n    annotationGroupUID: string\n    isVisible: boolean\n  }) => void\n  onAnnotationGroupStyleChange: ({ uid, styleOptions }: {\n    uid: string\n    styleOptions: {\n      opacity?: number\n      color?: number[]\n      measurement?: dcmjs.sr.coding.CodedConcept\n    }\n  }) => void\n}\n\n/**\n * React component representing a list of Annotation Groups.\n */\nclass AnnotationGroupList extends React.Component<AnnotationGroupListProps, {}> {\n  render (): React.ReactNode {\n    const items = this.props.annotationGroups.map((annotationGroup, index) => {\n      const uid = annotationGroup.uid\n      return (\n        <AnnotationGroupItem\n          key={annotationGroup.uid}\n          annotationGroup={annotationGroup}\n          metadata={this.props.metadata[uid]}\n          isVisible={this.props.visibleAnnotationGroupUIDs.has(uid)}\n          defaultStyle={this.props.defaultAnnotationGroupStyles[uid]}\n          onVisibilityChange={this.props.onAnnotationGroupVisibilityChange}\n          onStyleChange={this.props.onAnnotationGroupStyleChange}\n        />\n      )\n    })\n\n    return (\n      <Menu selectable={false}>\n        {items}\n      </Menu>\n    )\n  }\n}\n\nexport default AnnotationGroupList\n","import React from 'react'\nimport { Button as Btn, Divider, Tooltip } from 'antd'\n\ninterface ButtonProps {\n  icon: any\n  tooltip?: string\n  label?: string\n  onClick?: (options: any) => void\n  isSelected?: boolean\n}\n\n/**\n * React component for a button.\n */\nclass Button extends React.Component<ButtonProps, {}> {\n  constructor (props: ButtonProps) {\n    super(props)\n    this.handleClick = this.handleClick.bind(this)\n  }\n\n  handleClick (event: React.SyntheticEvent): void {\n    if (this.props.onClick !== undefined) {\n      this.props.onClick(event)\n    }\n  }\n\n  render (): React.ReactNode {\n    const Icon = this.props.icon\n    if (Icon === undefined) {\n      return null\n    }\n\n    let text\n    if (this.props.label != null) {\n      text = (\n        <>\n          <Divider type='vertical' />\n          {this.props.label}\n        </>\n      )\n    }\n\n    let button\n    if (this.props.isSelected ?? false) {\n      button = (\n        <Btn\n          onClick={this.handleClick}\n          icon={<Icon />}\n          type='primary'\n          style={{ lineHeight: '1.0' }}\n        >\n          {text}\n        </Btn>\n      )\n    } else {\n      button = (\n        <Btn\n          onClick={this.handleClick}\n          icon={<Icon />}\n          type='default'\n          style={{ lineHeight: '1.0' }}\n        >\n          {text}\n        </Btn>\n      )\n    }\n\n    if (this.props.tooltip !== undefined) {\n      return (\n        <Tooltip title={this.props.tooltip}>\n          {button}\n        </Tooltip>\n      )\n    } else {\n      return button\n    }\n  }\n}\n\nexport default Button\n","import React from 'react'\nimport * as dmv from 'dicom-microscopy-viewer'\n\nimport Description from './Description'\n\ninterface EquipmentProps {\n  metadata?: dmv.metadata.VLWholeSlideMicroscopyImage\n}\n\n/**\n * React component representing a list of DICOM Equipment Entities.\n */\nclass Equipment extends React.Component<EquipmentProps, {}> {\n  render (): React.ReactNode {\n    if (this.props.metadata === undefined) {\n      return null\n    }\n    const attributes = [\n      {\n        name: 'Manufacturer',\n        value: this.props.metadata.Manufacturer\n      },\n      {\n        name: 'Model Name',\n        value: this.props.metadata.ManufacturerModelName\n      },\n      {\n        name: 'Device Serial Number',\n        value: this.props.metadata.DeviceSerialNumber\n      },\n      {\n        name: 'Software Versions',\n        value: this.props.metadata.SoftwareVersions\n      }\n    ]\n    if (this.props.metadata.InstitutionName != null) {\n      attributes.push({\n        name: 'Institution Name',\n        value: this.props.metadata.InstitutionName\n      })\n    }\n    return <Description attributes={attributes} hasLongValues />\n  }\n}\n\nexport default Equipment\n","import * as dcmjs from 'dcmjs'\n\n/**\n * Check whether a DICOM SR content item has a given name.\n *\n * @param item - Content item\n * @param name - Coded name that should be compared\n * @returns Whether the content item has the given name\n */\nconst hasName = (\n  item: dcmjs.sr.valueTypes.ContentItem,\n  name: dcmjs.sr.coding.CodedConcept\n): boolean => {\n  const concept = item.ConceptNameCodeSequence[0]\n  return (\n    concept.CodeValue === name.CodeValue &&\n    concept.CodingSchemeDesignator === name.CodingSchemeDesignator\n  )\n}\n\n/**\n * Check whether a DICOM SR content item has a given value type.\n *\n * @param item - Content item\n * @param valueType - Value Type\n * @returns Whether the content item has the given value type\n */\nconst hasValueType = (\n  item: dcmjs.sr.valueTypes.ContentItem,\n  valueType: dcmjs.sr.valueTypes.ValueTypes\n): boolean => {\n  console.log(item.ValueType, valueType)\n  return item.ValueType === valueType\n}\n\n/**\n * Find content items in a DICOM SR document given their name.\n *\n * Only finds content items at the root level, but not any nested content items.\n *\n * @param content - Document content, i.e., sequence of content items\n * @param name - Coded name that should be compared\n * @returns Matched content items\n */\nexport const findContentItemsByName = (\n  { content, name }: {\n    content: dcmjs.sr.valueTypes.ContentItem[]\n    name: dcmjs.sr.coding.CodedConcept\n  }\n): dcmjs.sr.valueTypes.ContentItem[] => {\n  const items: dcmjs.sr.valueTypes.ContentItem[] = []\n  content.forEach(i => {\n    if (hasName(i, name)) {\n      items.push(i)\n    }\n  })\n  return items\n}\n\n/**\n * Find content items in a DICOM SR document given their value type.\n *\n * Only finds content items at the root level, but not any nested content items.\n *\n * @param content - Document content, i.e., sequence of content items\n * @param valueType - Value Type\n * @returns Matched content items\n */\nexport const findContentItemsByValueType = (\n  { content, valueType }: {\n    content: dcmjs.sr.valueTypes.ContentItem[]\n    valueType: dcmjs.sr.valueTypes.ValueTypes\n  }\n): dcmjs.sr.valueTypes.ContentItem[] => {\n  const items: dcmjs.sr.valueTypes.ContentItem[] = []\n  content.forEach(i => {\n    if (hasValueType(i, valueType)) {\n      items.push(i)\n    }\n  })\n  return items\n}\n","import React from 'react'\nimport * as dmv from 'dicom-microscopy-viewer'\nimport * as dcmjs from 'dcmjs'\nimport { Divider } from 'antd'\nimport { v4 as generateUUID } from 'uuid'\n\nimport Description from './Description'\nimport Patient from './Patient'\nimport Study from './Study'\nimport { findContentItemsByName } from '../utils/sr'\nimport { CustomError, errorTypes } from '../utils/CustomError'\nimport NotificationMiddleware, {\n  NotificationMiddlewareContext\n} from '../services/NotificationMiddleware'\n\nexport const hasValueType = (\n  item: dcmjs.sr.valueTypes.ContentItem,\n  valueType: string\n): boolean => {\n  return item.ValueType === valueType\n}\n\nconst findMeasurementItems = (\n  { content }: { content: dcmjs.sr.valueTypes.ContentItem[] }\n): dcmjs.sr.valueTypes.NumContentItem[] => {\n  const items: dcmjs.sr.valueTypes.NumContentItem[] = []\n  content.forEach(i => {\n    if (hasValueType(i, dcmjs.sr.valueTypes.ValueTypes.NUM)) {\n      const measurement = i as dcmjs.sr.valueTypes.NumContentItem\n      items.push(measurement)\n    }\n  })\n  return items\n}\n\nconst findEvaluationItems = (\n  { content }: { content: dcmjs.sr.valueTypes.ContentItem[] }\n): dcmjs.sr.valueTypes.CodeContentItem[] => {\n  const items: dcmjs.sr.valueTypes.CodeContentItem[] = []\n  content.forEach(i => {\n    if (hasValueType(i, dcmjs.sr.valueTypes.ValueTypes.CODE)) {\n      const evaluation = i as dcmjs.sr.valueTypes.CodeContentItem\n      items.push(evaluation)\n    }\n  })\n  return items\n}\n\nconst getROIs = (report: dmv.metadata.Comprehensive3DSR): dmv.roi.ROI[] => {\n  // TID 1500 Measurement Report\n  const matches = findContentItemsByName({\n    content: report.ContentSequence,\n    name: new dcmjs.sr.coding.CodedConcept({\n      value: '126010',\n      schemeDesignator: 'DCM',\n      meaning: 'Imaging Measurements'\n    })\n  })\n  if (matches.length !== 1) {\n    NotificationMiddleware.onError(\n      NotificationMiddlewareContext.SLIM,\n      new CustomError(\n        errorTypes.ENCODINGANDDECODING,\n        'Content item \"Imaging Measurements\" not found.' +\n        'Content of Comprehensive 3D SR document is not structured based on ' +\n        'TID 1500 \"Measurement Report\".'\n      )\n    )\n  }\n  const measurementsItem = matches[0] as dcmjs.sr.valueTypes.ContainerContentItem\n  // TID 1410 Planar ROI Measurements and Qualitative Evaluations\n  const measurementGroupItems = findContentItemsByName({\n    content: measurementsItem.ContentSequence,\n    name: new dcmjs.sr.coding.CodedConcept({\n      value: '125007',\n      schemeDesignator: 'DCM',\n      meaning: 'Measurement Group'\n    })\n  })\n\n  const rois: dmv.roi.ROI[] = []\n  measurementGroupItems.forEach((item) => {\n    const evaluations = []\n    let observerType: string\n    const group = item as dcmjs.sr.valueTypes.ContainerContentItem\n    let items = findContentItemsByName({\n      content: group.ContentSequence,\n      name: new dcmjs.sr.coding.CodedConcept({\n        value: '112040',\n        schemeDesignator: 'DCM',\n        meaning: 'Tracking Unique Identifier'\n      })\n    })\n    if (items.length === 0) {\n      NotificationMiddleware.onError(\n        NotificationMiddlewareContext.SLIM,\n        new CustomError(\n          errorTypes.ENCODINGANDDECODING,\n          'Content item \"Tracking Unique Identifier\" not found. ' +\n          'Content of Comprehensive 3D SR document is not structured ' +\n          'based on TID 1500 \"Measurement Report\" -> ' +\n          'TID 1410 \"Planar ROI Measurements and Qualitative Evaluations\".'\n        )\n      )\n    }\n    const trackingUIDItem = items[0] as dcmjs.sr.valueTypes.UIDRefContentItem\n\n    items = findContentItemsByName({\n      content: group.ContentSequence,\n      name: new dcmjs.sr.coding.CodedConcept({\n        value: '121071',\n        schemeDesignator: 'DCM',\n        meaning: 'Finding'\n      })\n    })\n    if (items.length === 0) {\n      NotificationMiddleware.onError(\n        NotificationMiddlewareContext.SLIM,\n        new CustomError(\n          errorTypes.ENCODINGANDDECODING,\n          'Content item \"Finding\" not found. ' +\n          'Content of Comprehensive 3D SR document is not structured ' +\n          'based on TID 1500 \"Measurement Report\" -> ' +\n          'TID 1410 \"Planar ROI Measurements and Qualitative Evaluations\".'\n        )\n      )\n    }\n\n    items = findContentItemsByName({\n      content: group.ContentSequence,\n      name: new dcmjs.sr.coding.CodedConcept({\n        value: '111001',\n        schemeDesignator: 'DCM',\n        meaning: 'Algorithm Name'\n      })\n    })\n    if (items.length !== 0) {\n      const algorithmNameItem = items[0] as dcmjs.sr.valueTypes.CodeContentItem\n      evaluations.push(algorithmNameItem)\n      observerType = 'Device'\n    } else {\n      observerType = 'Person'\n    }\n\n    items = findContentItemsByName({\n      content: group.ContentSequence,\n      name: new dcmjs.sr.coding.CodedConcept({\n        value: '111003',\n        schemeDesignator: 'DCM',\n        meaning: 'Algorithm Version'\n      })\n    })\n    if (items.length !== 0) {\n      const algorithmVersionItem = items[0] as dcmjs.sr.valueTypes.CodeContentItem\n      evaluations.push(algorithmVersionItem)\n    }\n\n    items = findContentItemsByName({\n      content: group.ContentSequence,\n      name: new dcmjs.sr.coding.CodedConcept({\n        value: '111030',\n        schemeDesignator: 'DCM',\n        meaning: 'Image Region'\n      })\n    })\n    if (items.length === 0) {\n      NotificationMiddleware.onError(\n        NotificationMiddlewareContext.SLIM,\n        new CustomError(\n          errorTypes.ENCODINGANDDECODING,\n          'Content item \"Image Region\" not found. ' +\n          'Content of Comprehensive 3D SR document is not structured ' +\n          'based on TID 1500 \"Measurement Report\" -> ' +\n          'TID 1410 \"Planar ROI Measurements and Qualitative Evaluations\".'\n        )\n      )\n    }\n    const regionItem = items[0] as dcmjs.sr.valueTypes.Scoord3DContentItem\n    let scoord3d: any\n    if (regionItem.GraphicType === 'POINT') {\n      scoord3d = new dmv.scoord3d.Point({\n        frameOfReferenceUID: regionItem.ReferencedFrameOfReferenceUID,\n        coordinates: regionItem.GraphicData\n      })\n    } else {\n      const coordinates: number[][] = []\n      for (let i = 0; i < regionItem.GraphicData.length; i += 3) {\n        coordinates.push(regionItem.GraphicData.slice(i, i + 3))\n      }\n      if (regionItem.GraphicType === 'POLYGON') {\n        scoord3d = new dmv.scoord3d.Polygon({\n          frameOfReferenceUID: regionItem.ReferencedFrameOfReferenceUID,\n          coordinates: coordinates\n        })\n      } else if (regionItem.GraphicType === 'MULTIPOINT') {\n        scoord3d = new dmv.scoord3d.MultiPoint({\n          frameOfReferenceUID: regionItem.ReferencedFrameOfReferenceUID,\n          coordinates: coordinates\n        })\n      } else if (regionItem.GraphicType === 'POLYLINE') {\n        scoord3d = new dmv.scoord3d.Polyline({\n          frameOfReferenceUID: regionItem.ReferencedFrameOfReferenceUID,\n          coordinates: coordinates\n        })\n      } else if (regionItem.GraphicType === 'ELLIPSE') {\n        scoord3d = new dmv.scoord3d.Ellipse({\n          frameOfReferenceUID: regionItem.ReferencedFrameOfReferenceUID,\n          coordinates: coordinates\n        })\n      } else if (regionItem.GraphicType === 'ELLIPSOID') {\n        scoord3d = new dmv.scoord3d.Ellipsoid({\n          frameOfReferenceUID: regionItem.ReferencedFrameOfReferenceUID,\n          coordinates: coordinates\n        })\n      } else {\n        NotificationMiddleware.onError(\n          NotificationMiddlewareContext.SLIM,\n          new CustomError(\n            errorTypes.ENCODINGANDDECODING,\n            'Content item \"Image Region\" has unknown graphic type ' +\n            `\"${regionItem.GraphicType}\". ` +\n            'Content of Comprehensive 3D SR document is not structured ' +\n            'based on TID 1500 \"Measurement Report\" -> ' +\n            'TID 1410 \"Planar ROI Measurements and Qualitative Evaluations\".'\n          )\n        )\n      }\n    }\n\n    evaluations.push(\n      ...findEvaluationItems({ content: group.ContentSequence })\n    )\n    const measurements = findMeasurementItems({\n      content: group.ContentSequence\n    })\n\n    const roi = new dmv.roi.ROI({\n      scoord3d: scoord3d,\n      uid: generateUUID(),\n      properties: {\n        trackingUID: trackingUIDItem.UID,\n        observerType: observerType,\n        evaluations: evaluations,\n        measurements: measurements\n      }\n    })\n    rois.push(roi)\n  })\n  return rois\n}\n\nclass MeasurementReport {\n  public PersonObserverName?: string\n\n  public PersonObserverLoginName?: string\n\n  public DeviceObserverUID?: string\n\n  public DeviceObserverName?: string\n\n  public SpecimenUID: string\n\n  public SpecimenIdentifier: string\n\n  public ContainerIdentifier: string\n\n  public ROIs: dmv.roi.ROI[] = []\n\n  constructor (report: dmv.metadata.Comprehensive3DSR) {\n    let items = findContentItemsByName({\n      content: report.ContentSequence,\n      name: new dcmjs.sr.coding.CodedConcept({\n        value: '121039',\n        schemeDesignator: 'DCM',\n        meaning: 'Specimen UID'\n      })\n    })\n    if (items.length === 0) {\n      NotificationMiddleware.onError(\n        NotificationMiddlewareContext.SLIM,\n        new CustomError(\n          errorTypes.ENCODINGANDDECODING,\n          'Content item \"Specimen UID\" not found. ' +\n          'Content of Comprehensive 3D SR document is not structured based on ' +\n          'TID 1500 \"Measurement Report\" -> TID 1001 \"Observation Context\" -> ' +\n          'TID 1006 \"Subject Context\" -> TID 1009 \"Subject Context, Specimen\".'\n        )\n      )\n    }\n    const specimenUIDItem = (\n      items[0] as unknown as dcmjs.sr.valueTypes.UIDRefContentItem\n    )\n    this.SpecimenUID = specimenUIDItem.UID\n\n    items = findContentItemsByName({\n      content: report.ContentSequence,\n      name: new dcmjs.sr.coding.CodedConcept({\n        value: '121041',\n        schemeDesignator: 'DCM',\n        meaning: 'Specimen Identifier'\n      })\n    })\n    if (items.length === 0) {\n      NotificationMiddleware.onError(\n        NotificationMiddlewareContext.SLIM,\n        new CustomError(\n          errorTypes.ENCODINGANDDECODING,\n          'Content item \"Specimen Identifier\" not found. ' +\n          'Content of Comprehensive 3D SR document is not structured based on ' +\n          'TID 1500 \"Measurement Report\" -> TID 1001 \"Observation Context\" -> ' +\n          'TID 1006 \"Subject Context\" -> TID 1009 \"Subject Context, Specimen\".'\n        )\n      )\n    }\n    const specimenIdItem = (\n      items[0] as unknown as dcmjs.sr.valueTypes.TextContentItem\n    )\n    this.SpecimenIdentifier = specimenIdItem.TextValue\n\n    items = findContentItemsByName({\n      content: report.ContentSequence,\n      name: new dcmjs.sr.coding.CodedConcept({\n        value: '111700',\n        schemeDesignator: 'DCM',\n        meaning: 'Specimen Container Identifier'\n      })\n    })\n    if (items.length === 0) {\n      NotificationMiddleware.onError(\n        NotificationMiddlewareContext.SLIM,\n        new CustomError(\n          errorTypes.ENCODINGANDDECODING,\n          'Content item \"Specimen Container Identifier\" not found. ' +\n          'Content of Comprehensive 3D SR document is not structured based on ' +\n          'TID 1500 \"Measurement Report\" -> TID 1001 \"Observation Context\" -> ' +\n          'TID 1006 \"Subject Context\" -> TID 1009 \"Subject Context, Specimen\".'\n        )\n      )\n    }\n    const containerIdItem = (\n      items[0] as unknown as dcmjs.sr.valueTypes.TextContentItem\n    )\n    this.ContainerIdentifier = containerIdItem.TextValue\n\n    items = findContentItemsByName({\n      content: report.ContentSequence,\n      name: new dcmjs.sr.coding.CodedConcept({\n        value: '121008',\n        schemeDesignator: 'DCM',\n        meaning: 'Person Observer Name'\n      })\n    })\n    if (items.length !== 0) {\n      const personNameItem = (\n        items[0] as unknown as dcmjs.sr.valueTypes.PNameContentItem\n      )\n      this.PersonObserverName = personNameItem.PersonName\n    }\n\n    items = findContentItemsByName({\n      content: report.ContentSequence,\n      name: new dcmjs.sr.coding.CodedConcept({\n        value: '128774',\n        schemeDesignator: 'DCM',\n        meaning: \"Person Observer's Login Name\"\n      })\n    })\n    if (items.length !== 0) {\n      const personLoginNameItem = (\n        items[0] as unknown as dcmjs.sr.valueTypes.TextContentItem\n      )\n      this.PersonObserverLoginName = personLoginNameItem.TextValue\n    }\n\n    items = findContentItemsByName({\n      content: report.ContentSequence,\n      name: new dcmjs.sr.coding.CodedConcept({\n        value: '121012',\n        schemeDesignator: 'DCM',\n        meaning: 'Device Observer UID'\n      })\n    })\n    if (items.length > 0) {\n      const deviceUIDItem = (\n        items[0] as unknown as dcmjs.sr.valueTypes.UIDRefContentItem\n      )\n      this.DeviceObserverUID = deviceUIDItem.UID\n    }\n\n    items = findContentItemsByName({\n      content: report.ContentSequence,\n      name: new dcmjs.sr.coding.CodedConcept({\n        value: '121013',\n        schemeDesignator: 'DCM',\n        meaning: 'Device Observer Name'\n      })\n    })\n    if (items.length !== 0) {\n      const deviceNameItem = (\n        items[0] as unknown as dcmjs.sr.valueTypes.TextContentItem\n      )\n      this.DeviceObserverName = deviceNameItem.TextValue\n    }\n\n    this.ROIs = getROIs(report)\n  }\n}\n\ninterface ReportProps {\n  dataset: dmv.metadata.Comprehensive3DSR\n}\n\n/**\n * React component representing a DICOM SR document that displays the\n * document content (a selected subset of content items).\n */\nclass Report extends React.Component<ReportProps, {}> {\n  render (): React.ReactNode {\n    const report = new MeasurementReport(this.props.dataset)\n    const containerAttrs = [\n      {\n        name: 'ID',\n        value: report.ContainerIdentifier\n      }\n    ]\n    const specimenAttrs = [\n      {\n        name: 'ID',\n        value: report.SpecimenIdentifier\n      }\n    ]\n    const observerAttrs = [\n      {\n        name: 'Name',\n        value: report.PersonObserverName\n      }\n    ]\n    const annotations = report.ROIs.map(\n      (roi, index): React.ReactNode => {\n        const id = `Region ${index + 1}`\n        const attrs: Array<{ name: string, value: string }> = []\n        roi.evaluations.forEach((\n          item: (\n            dcmjs.sr.valueTypes.CodeContentItem |\n            dcmjs.sr.valueTypes.TextContentItem\n          )\n        ) => {\n          if (item.ValueType === dcmjs.sr.valueTypes.ValueTypes.CODE) {\n            item = item as dcmjs.sr.valueTypes.CodeContentItem\n            attrs.push({\n              name: item.ConceptNameCodeSequence[0].CodeMeaning,\n              value: item.ConceptCodeSequence[0].CodeMeaning\n            })\n          } else if (item.ValueType === dcmjs.sr.valueTypes.ValueTypes.TEXT) {\n            item = item as dcmjs.sr.valueTypes.TextContentItem\n            attrs.push({\n              name: item.ConceptNameCodeSequence[0].CodeMeaning,\n              value: item.TextValue\n            })\n          }\n        })\n        return <Description key={roi.uid} header={id} attributes={attrs} />\n      }\n    )\n\n    return (\n      <div>\n        <Divider orientation='left'>Patient</Divider>\n        <Patient metadata={this.props.dataset} />\n        <Divider orientation='left'>Case</Divider>\n        <Study metadata={this.props.dataset} />\n        <Divider orientation='left'>Slide</Divider>\n        <Description attributes={containerAttrs} />\n        <Divider orientation='left'>Specimen</Divider>\n        <Description attributes={specimenAttrs} />\n        <Divider orientation='left'>Observer</Divider>\n        <Description attributes={observerAttrs} />\n        <Divider orientation='left'>Annotations</Divider>\n        {annotations}\n      </div>\n    )\n  }\n}\n\nexport default Report\nexport { MeasurementReport }\n","import React from 'react'\nimport { List } from 'antd'\n\nimport Description, { Attribute, AttributeGroup } from './Description'\n\ninterface ItemProps {\n  uid: string\n  identifier: string\n  attributes: Attribute[]\n  groups?: AttributeGroup[]\n  children?: React.ReactElement[]\n  type?: string\n  hasLongValues?: boolean\n}\n\n/**\n * React component for a list item that consists of a header element\n * containing an identifier and a body element containing a description list\n * of attributes rendered as name-value pairs.\n */\nclass Item extends React.Component<ItemProps, {}> {\n  render (): React.ReactNode {\n    let groups = null\n    if (this.props.groups !== undefined) {\n      groups = this.props.groups.map((item, index: number) => (\n        <Description\n          key={index}\n          header={item.name}\n          attributes={item.attributes}\n        />\n      ))\n    }\n    let title\n    if (this.props.type !== undefined) {\n      title = `${this.props.type}: ${this.props.identifier}`\n    } else {\n      title = this.props.identifier\n    }\n    return (\n      <List.Item key={this.props.uid}>\n        <Description\n          header={title}\n          attributes={this.props.attributes}\n          hasLongValues={this.props.hasLongValues}\n        >\n          {groups}\n        </Description>\n        {this.props.children}\n      </List.Item>\n    )\n  }\n}\n\nexport default Item\n","import * as dcmjs from 'dcmjs'\n\nexport const SpecimenPreparationTypes: {\n  [key: string]: dcmjs.sr.coding.CodedConcept\n} = {\n  COLLECTION: new dcmjs.sr.coding.CodedConcept({\n    value: '17636008',\n    schemeDesignator: 'SCT',\n    meaning: 'Specimen collection'\n  }),\n  SAMPLING: new dcmjs.sr.coding.CodedConcept({\n    value: '433465004',\n    schemeDesignator: 'SCT',\n    meaning: 'Sampling of tissue specimen'\n  }),\n  STAINING: new dcmjs.sr.coding.CodedConcept({\n    value: '127790008',\n    schemeDesignator: 'SCT',\n    meaning: 'Specimen staining'\n  }),\n  PROCESSING: new dcmjs.sr.coding.CodedConcept({\n    value: '9265001',\n    schemeDesignator: 'SCT',\n    meaning: 'Specimen processing'\n  })\n}\n\nexport const SpecimenPreparationAdditives: {\n  [key: string]: dcmjs.sr.coding.CodedConcept\n} = {\n  FIXATIVE: new dcmjs.sr.coding.CodedConcept({\n    value: '430864009',\n    schemeDesignator: 'SCT',\n    meaning: 'Tissue fixative'\n  }),\n  EMBEDDING_MEDIUM: new dcmjs.sr.coding.CodedConcept({\n    value: '430863003',\n    schemeDesignator: 'SCT',\n    meaning: 'Embedding medium'\n  })\n}\n\nexport const SpecimenPreparationStepItems: {\n  [key: string]: dcmjs.sr.coding.CodedConcept\n} = {\n  SPECIMEN_IDENTIFIER: new dcmjs.sr.coding.CodedConcept({\n    value: '121041',\n    schemeDesignator: 'DCM',\n    meaning: 'Specimen identifier'\n  }),\n  PARENT_SPECIMEN_IDENTIFIER: new dcmjs.sr.coding.CodedConcept({\n    value: '111705',\n    schemeDesignator: 'DCM',\n    meaning: 'Parent specimen identifier'\n  }),\n  PROCESSING_TYPE: new dcmjs.sr.coding.CodedConcept({\n    value: '111701',\n    schemeDesignator: 'DCM',\n    meaning: 'Processing type'\n  }),\n  DATETIME_OF_PROCESSING: new dcmjs.sr.coding.CodedConcept({\n    value: '111702',\n    schemeDesignator: 'DCM',\n    meaning: 'Datetime of processing'\n  }),\n  PROCESSING_STEP_DESCRIPTION: new dcmjs.sr.coding.CodedConcept({\n    value: '111703',\n    schemeDesignator: 'DCM',\n    meaning: 'Processing step description'\n  }),\n  COLLECTION_METHOD: new dcmjs.sr.coding.CodedConcept({\n    value: '17636008',\n    schemeDesignator: 'SCT',\n    meaning: 'Specimen collection'\n  }),\n  SAMPLING_METHOD: new dcmjs.sr.coding.CodedConcept({\n    value: '111704',\n    schemeDesignator: 'DCM',\n    meaning: 'Sampling method'\n  }),\n  STAIN: new dcmjs.sr.coding.CodedConcept({\n    value: '424361007',\n    schemeDesignator: 'SCT',\n    meaning: 'Using substance'\n  }),\n  ...SpecimenPreparationAdditives\n}\n","import React from 'react'\nimport * as dmv from 'dicom-microscopy-viewer'\nimport * as dcmjs from 'dcmjs'\n\nimport Item from './Item'\nimport { Attribute } from './Description'\nimport { SpecimenPreparationStepItems } from '../data/specimens'\n\ninterface SpecimenItemProps {\n  index: number\n  metadata?: dmv.metadata.VLWholeSlideMicroscopyImage\n  showstain: boolean\n}\n\n/**\n * React component representing a DICOM Specimen Information Entity and\n * displays specimen-related attributes of a DICOM Slide Microscopy image.\n */\nclass SpecimenItem extends React.Component<SpecimenItemProps, {}> {\n  render (): React.ReactNode {\n    if (this.props.metadata === undefined) {\n      return null\n    }\n    const specimenDescription = this.props.metadata.SpecimenDescriptionSequence[\n      this.props.index\n    ]\n    const attributes: Attribute[] = []\n    if (specimenDescription.SpecimenShortDescription !== undefined) {\n      attributes.push({\n        name: 'Description',\n        value: specimenDescription.SpecimenShortDescription\n      })\n    }\n    if (specimenDescription.PrimaryAnatomicStructureSequence !== undefined) {\n      if (specimenDescription.PrimaryAnatomicStructureSequence.length > 0) {\n        const structures = specimenDescription.PrimaryAnatomicStructureSequence\n        attributes.push({\n          name: 'Anatomical structure',\n          value: structures.map(item => item.CodeMeaning).join(', ')\n        })\n      }\n    }\n\n    // TID 8001 \"Specimen Preparation\"\n    const preparationSteps: dmv.metadata.SpecimenPreparation[] = (\n      specimenDescription.SpecimenPreparationSequence ?? []\n    )\n    preparationSteps.forEach(\n      (step: dmv.metadata.SpecimenPreparation, index: number): void => {\n        step.SpecimenPreparationStepContentItemSequence.forEach((\n          item: (\n            dcmjs.sr.valueTypes.CodeContentItem |\n            dcmjs.sr.valueTypes.TextContentItem |\n            dcmjs.sr.valueTypes.UIDRefContentItem |\n            dcmjs.sr.valueTypes.PNameContentItem |\n            dcmjs.sr.valueTypes.DateTimeContentItem\n          ),\n          index: number\n        ) => {\n          const name = new dcmjs.sr.coding.CodedConcept({\n            value: item.ConceptNameCodeSequence[0].CodeValue,\n            schemeDesignator:\n              item.ConceptNameCodeSequence[0].CodingSchemeDesignator,\n            meaning: item.ConceptNameCodeSequence[0].CodeMeaning\n          })\n          if (item.ValueType === dcmjs.sr.valueTypes.ValueTypes.CODE) {\n            item = item as dcmjs.sr.valueTypes.CodeContentItem\n            const value = new dcmjs.sr.coding.CodedConcept({\n              value: item.ConceptCodeSequence[0].CodeValue,\n              schemeDesignator:\n                item.ConceptCodeSequence[0].CodingSchemeDesignator,\n              meaning: item.ConceptCodeSequence[0].CodeMeaning\n            })\n            if (!name.equals(SpecimenPreparationStepItems.PROCESSING_TYPE)) {\n              if (\n                name.equals(SpecimenPreparationStepItems.COLLECTION_METHOD)\n              ) {\n                attributes.push({\n                  name: 'Collection method',\n                  value: value.CodeMeaning\n                })\n              } else if (\n                name.equals(SpecimenPreparationStepItems.FIXATIVE)\n              ) {\n                attributes.push({\n                  name: 'Tissue fixative',\n                  value: value.CodeMeaning\n                })\n              } else if (\n                name.equals(SpecimenPreparationStepItems.EMBEDDING_MEDIUM)\n              ) {\n                attributes.push({\n                  name: 'Tissue embedding medium',\n                  value: value.CodeMeaning\n                })\n              } else if (\n                name.equals(SpecimenPreparationStepItems.STAIN) &&\n                this.props.showstain\n              ) {\n                attributes.push({\n                  name: 'Tissue stain',\n                  value: value.CodeMeaning\n                })\n              }\n            }\n          } else if (item.ValueType === dcmjs.sr.valueTypes.ValueTypes.TEXT) {\n            item = item as dcmjs.sr.valueTypes.TextContentItem\n            if (\n              name.equals(SpecimenPreparationStepItems.STAIN) &&\n              this.props.showstain\n            ) {\n              attributes.push({\n                name: 'Tissue stain',\n                value: item.TextValue\n              })\n            } else if (\n              name.equals(SpecimenPreparationStepItems.PARENT_SPECIMEN_IDENTIFIER)\n            ) {\n              attributes.push({\n                name: 'Parent specimen',\n                value: item.TextValue\n              })\n            }\n          }\n        })\n      }\n    )\n    const uid = specimenDescription.SpecimenUID\n    const identifier = specimenDescription.SpecimenIdentifier\n    return (\n      <Item\n        uid={uid}\n        key={uid}\n        identifier={identifier}\n        attributes={attributes}\n        hasLongValues\n      />\n    )\n  }\n}\n\nexport default SpecimenItem\n","import React from 'react'\nimport * as dmv from 'dicom-microscopy-viewer'\nimport { List } from 'antd'\n\nimport SpecimenItem from './SpecimenItem'\n\ninterface SpecimenListProps {\n  metadata?: dmv.metadata.VLWholeSlideMicroscopyImage\n  showstain: boolean\n}\n\n/**\n * React component representing a list of DICOM Specimen Information Entities.\n */\nclass SpecimenList extends React.Component<SpecimenListProps, {}> {\n  render (): React.ReactNode {\n    if (this.props.metadata === undefined) {\n      return null\n    }\n    /*\n     * Specimen Description Sequence is a type 1 attribute. However, it is\n     * nevertheless missing in some data sets. This is a violation of the\n     * standard, but it may be better to facilitate display of the data.\n     */\n    const descriptions = this.props.metadata.SpecimenDescriptionSequence ?? []\n    const items = descriptions.map(\n      (item: dmv.metadata.SpecimenDescription, index: number) => {\n        return (\n          <SpecimenItem\n            index={index}\n            key={item.SpecimenUID}\n            metadata={this.props.metadata}\n            showstain={this.props.showstain}\n          />\n        )\n      }\n    )\n    return (\n      <List style={{ overflowY: 'auto' }}>\n        {items}\n      </List>\n    )\n  }\n}\n\nexport default SpecimenList\n","import React from 'react'\nimport {\n  Badge,\n  Button,\n  Col,\n  Divider,\n  InputNumber,\n  Menu,\n  Popover,\n  Row,\n  Slider,\n  Space,\n  Switch,\n  Tooltip\n} from 'antd'\nimport {\n  DeleteOutlined,\n  EyeOutlined,\n  EyeInvisibleOutlined,\n  SettingOutlined\n} from '@ant-design/icons'\nimport Description from './Description'\nimport * as dmv from 'dicom-microscopy-viewer'\nimport * as dcmjs from 'dcmjs'\n\nimport { SpecimenPreparationStepItems } from '../data/specimens'\nimport NotificationMiddleware, {\n  NotificationMiddlewareContext\n} from '../services/NotificationMiddleware'\nimport { CustomError, errorTypes } from '../utils/CustomError'\n\ninterface OpticalPathItemProps {\n  opticalPath: dmv.opticalPath.OpticalPath\n  metadata: dmv.metadata.VLWholeSlideMicroscopyImage[]\n  isVisible: boolean\n  isRemovable: boolean\n  defaultStyle: {\n    opacity: number\n    color?: number[]\n    paletteColorLookupTable?: dmv.color.PaletteColorLookupTable\n    limitValues?: number[]\n  }\n  onVisibilityChange: ({ opticalPathIdentifier, isVisible }: {\n    opticalPathIdentifier: string\n    isVisible: boolean\n  }) => void\n  onStyleChange: ({ opticalPathIdentifier, styleOptions }: {\n    opticalPathIdentifier: string\n    styleOptions: {\n      opacity?: number\n      color?: number[]\n      paletteColorLookupTable?: dmv.color.PaletteColorLookupTable\n      limitValues?: number[]\n    }\n  }) => void\n  onRemoval: (opticalPathIdentifier: string) => void\n}\n\ninterface OpticalPathItemState {\n  isVisible: boolean\n  currentStyle: {\n    opacity: number\n    color?: number[]\n    paletteColorLookupTable?: dmv.color.PaletteColorLookupTable\n    limitValues?: number[]\n  }\n}\n\n/**\n * React component representing an optical path of a\n * multi-channel acquistion with control of visualization parameters.\n */\nclass OpticalPathItem extends React.Component<OpticalPathItemProps, OpticalPathItemState> {\n  constructor (props: OpticalPathItemProps) {\n    super(props)\n    this.handleVisibilityChange = this.handleVisibilityChange.bind(this)\n    this.handleOpacityChange = this.handleOpacityChange.bind(this)\n    this.handleLimitChange = this.handleLimitChange.bind(this)\n    this.handleLowerLimitChange = this.handleLowerLimitChange.bind(this)\n    this.handleUpperLimitChange = this.handleUpperLimitChange.bind(this)\n    this.handleColorRChange = this.handleColorRChange.bind(this)\n    this.handleColorGChange = this.handleColorGChange.bind(this)\n    this.handleColorBChange = this.handleColorBChange.bind(this)\n    this.handleRemoval = this.handleRemoval.bind(this)\n    this.getCurrentColors = this.getCurrentColors.bind(this)\n    this.state = {\n      isVisible: this.props.isVisible,\n      currentStyle: {\n        opacity: this.props.defaultStyle.opacity,\n        color: this.props.defaultStyle.color,\n        paletteColorLookupTable: this.props.defaultStyle.paletteColorLookupTable,\n        limitValues: this.props.defaultStyle.limitValues\n      }\n    }\n  }\n\n  componentDidUpdate (\n    previousProps: OpticalPathItemProps,\n    previousState: OpticalPathItemState\n  ): void {\n    if (this.props.defaultStyle !== previousProps.defaultStyle) {\n      this.setState({\n        currentStyle: this.props.defaultStyle\n      })\n    }\n  }\n\n  handleVisibilityChange (\n    checked: boolean,\n    event: React.MouseEvent<HTMLButtonElement>\n  ): void {\n    const identifier = this.props.opticalPath.identifier\n    this.setState({\n      isVisible: checked\n    })\n    this.props.onVisibilityChange({\n      opticalPathIdentifier: identifier,\n      isVisible: checked\n    })\n  }\n\n  handleOpacityChange (\n    value: number | null\n  ): void {\n    if (value != null) {\n      const identifier = this.props.opticalPath.identifier\n      this.props.onStyleChange({\n        opticalPathIdentifier: identifier,\n        styleOptions: { opacity: value }\n      })\n      this.setState(state => ({\n        currentStyle: {\n          color: state.currentStyle.color,\n          paletteColorLookupTable: state.currentStyle.paletteColorLookupTable,\n          opacity: value,\n          limitValues: state.currentStyle.limitValues\n        }\n      }))\n    }\n  }\n\n  handleColorRChange (\n    value: number | number[] | null\n  ): void {\n    const identifier = this.props.opticalPath.identifier\n    if (value != null && this.state.currentStyle.color !== undefined) {\n      const color = [\n        Array.isArray(value) ? value[0] : value,\n        this.state.currentStyle.color[1],\n        this.state.currentStyle.color[2]\n      ]\n      this.setState(state => ({\n        currentStyle: {\n          color: color,\n          paletteColorLookupTable: state.currentStyle.paletteColorLookupTable,\n          opacity: state.currentStyle.opacity,\n          limitValues: state.currentStyle.limitValues\n        }\n      }))\n      this.props.onStyleChange({\n        opticalPathIdentifier: identifier,\n        styleOptions: { color: color }\n      })\n    }\n  }\n\n  handleColorGChange (\n    value: number | number[] | null\n  ): void {\n    const identifier = this.props.opticalPath.identifier\n    if (value != null && this.state.currentStyle.color !== undefined) {\n      const color = [\n        this.state.currentStyle.color[0],\n        Array.isArray(value) ? value[0] : value,\n        this.state.currentStyle.color[2]\n      ]\n      this.setState(state => ({\n        currentStyle: {\n          color: color,\n          paletteColorLookupTable: state.currentStyle.paletteColorLookupTable,\n          opacity: state.currentStyle.opacity,\n          limitValues: state.currentStyle.limitValues\n        }\n      }))\n      this.props.onStyleChange({\n        opticalPathIdentifier: identifier,\n        styleOptions: { color: color }\n      })\n    }\n  }\n\n  handleColorBChange (\n    value: number | number[] | null\n  ): void {\n    const identifier = this.props.opticalPath.identifier\n    if (value != null && this.state.currentStyle.color !== undefined) {\n      const color = [\n        this.state.currentStyle.color[0],\n        this.state.currentStyle.color[1],\n        Array.isArray(value) ? value[0] : value\n      ]\n      this.setState(state => ({\n        currentStyle: {\n          color: color,\n          paletteColorLookupTable: state.currentStyle.paletteColorLookupTable,\n          opacity: state.currentStyle.opacity,\n          limitValues: state.currentStyle.limitValues\n        }\n      }))\n      this.props.onStyleChange({\n        opticalPathIdentifier: identifier,\n        styleOptions: { color: color }\n      })\n    }\n  }\n\n  getCurrentColors (): string[] {\n    const rgb2hex = (values: number[]): string => {\n      const r = values[0]\n      const g = values[1]\n      const b = values[2]\n      return '#' + (0x1000000 + (r << 16) + (g << 8) + b).toString(16).slice(1)\n    }\n\n    if (this.props.defaultStyle.paletteColorLookupTable != null) {\n      const colormap = this.props.defaultStyle.paletteColorLookupTable.data\n      return colormap.map(values => rgb2hex(values))\n    } else if (this.state.currentStyle.color != null) {\n      return [\n        '#000000',\n        rgb2hex(this.state.currentStyle.color)\n      ]\n    } else {\n      return ['white', 'white']\n    }\n  }\n\n  handleLowerLimitChange (\n    value: number | null\n  ): void {\n    const identifier = this.props.opticalPath.identifier\n    if (value != null && this.state.currentStyle.limitValues !== undefined) {\n      this.setState(state => {\n        if (state.currentStyle.limitValues !== undefined) {\n          return {\n            currentStyle: {\n              color: state.currentStyle.color,\n              paletteColorLookupTable: state.currentStyle.paletteColorLookupTable,\n              opacity: state.currentStyle.opacity,\n              limitValues: [value, state.currentStyle.limitValues[1]]\n            }\n          }\n        } else {\n          return {\n            currentStyle: {\n              color: state.currentStyle.color,\n              paletteColorLookupTable: state.currentStyle.paletteColorLookupTable,\n              opacity: state.currentStyle.opacity,\n              limitValues: state.currentStyle.limitValues\n            }\n          }\n        }\n      })\n      this.props.onStyleChange({\n        opticalPathIdentifier: identifier,\n        styleOptions: {\n          limitValues: [\n            value,\n            this.state.currentStyle.limitValues[1]\n          ]\n        }\n      })\n    }\n  }\n\n  handleUpperLimitChange (\n    value: number | null\n  ): void {\n    const identifier = this.props.opticalPath.identifier\n    if (value != null && this.state.currentStyle.limitValues !== undefined) {\n      this.setState(state => {\n        if (state.currentStyle.limitValues !== undefined) {\n          return {\n            currentStyle: {\n              color: state.currentStyle.color,\n              paletteColorLookupTable: state.currentStyle.paletteColorLookupTable,\n              opacity: state.currentStyle.opacity,\n              limitValues: [state.currentStyle.limitValues[0], value]\n            }\n          }\n        } else {\n          return {\n            currentStyle: {\n              color: state.currentStyle.color,\n              paletteColorLookupTable: state.currentStyle.paletteColorLookupTable,\n              opacity: state.currentStyle.opacity,\n              limitValues: state.currentStyle.limitValues\n            }\n          }\n        }\n      })\n      this.props.onStyleChange({\n        opticalPathIdentifier: identifier,\n        styleOptions: {\n          limitValues: [\n            this.state.currentStyle.limitValues[0],\n            value\n          ]\n        }\n      })\n    }\n  }\n\n  handleLimitChange (\n    values: number[]\n  ): void {\n    const identifier = this.props.opticalPath.identifier\n    this.setState(state => ({\n      currentStyle: {\n        color: state.currentStyle.color,\n        paletteColorLookupTable: state.currentStyle.paletteColorLookupTable,\n        opacity: state.currentStyle.opacity,\n        limitValues: values\n      }\n    }))\n    this.props.onStyleChange({\n      opticalPathIdentifier: identifier,\n      styleOptions: { limitValues: values }\n    })\n  }\n\n  handleRemoval (): void {\n    const identifier = this.props.opticalPath.identifier\n    this.props.onRemoval(identifier)\n  }\n\n  render (): React.ReactNode {\n    const identifier = this.props.opticalPath.identifier\n    const description = this.props.opticalPath.description\n    const attributes: Array<{ name: string, value: string }> = []\n    if (this.props.opticalPath.illuminationWaveLength !== undefined) {\n      attributes.push(\n        {\n          name: 'Illumination wavelength',\n          value: `${this.props.opticalPath.illuminationWaveLength} nm`\n        }\n      )\n    }\n    if (this.props.opticalPath.illuminationColor !== undefined) {\n      attributes.push(\n        {\n          name: 'Illumination color',\n          value: this.props.opticalPath.illuminationColor.CodeMeaning\n        }\n      )\n    }\n\n    // TID 8001 \"Specimen Preparation\"\n    const specimenDescriptions: dmv.metadata.SpecimenDescription[] = (\n      this.props.metadata[0].SpecimenDescriptionSequence ?? []\n    )\n    try {\n      specimenDescriptions.forEach(description => {\n        const specimenPreparationSteps: dmv.metadata.SpecimenPreparation[] =\n          description.SpecimenPreparationSequence ?? []\n        specimenPreparationSteps.forEach(\n          (step: dmv.metadata.SpecimenPreparation, index: number): void => {\n            step.SpecimenPreparationStepContentItemSequence.forEach((\n              item: (\n                dcmjs.sr.valueTypes.CodeContentItem |\n                dcmjs.sr.valueTypes.TextContentItem |\n                dcmjs.sr.valueTypes.UIDRefContentItem |\n                dcmjs.sr.valueTypes.PNameContentItem |\n                dcmjs.sr.valueTypes.DateTimeContentItem\n              ),\n              index: number\n            ) => {\n              const name = new dcmjs.sr.coding.CodedConcept({\n                value: item.ConceptNameCodeSequence[0].CodeValue,\n                schemeDesignator:\n                    item.ConceptNameCodeSequence[0].CodingSchemeDesignator,\n                meaning: item.ConceptNameCodeSequence[0].CodeMeaning\n              })\n              if (item.ValueType === dcmjs.sr.valueTypes.ValueTypes.CODE) {\n                item = item as dcmjs.sr.valueTypes.CodeContentItem\n                const value = new dcmjs.sr.coding.CodedConcept({\n                  value: item.ConceptCodeSequence[0].CodeValue,\n                  schemeDesignator:\n                      item.ConceptCodeSequence[0].CodingSchemeDesignator,\n                  meaning: item.ConceptCodeSequence[0].CodeMeaning\n                })\n                if (!name.equals(SpecimenPreparationStepItems.PROCESSING_TYPE)) {\n                  if (name.equals(SpecimenPreparationStepItems.STAIN)) {\n                    attributes.push({\n                      name: 'Tissue stain',\n                      value: value.CodeMeaning\n                    })\n                  }\n                }\n              } else if (item.ValueType === dcmjs.sr.valueTypes.ValueTypes.TEXT) {\n                item = item as dcmjs.sr.valueTypes.TextContentItem\n                if (!name.equals(SpecimenPreparationStepItems.PROCESSING_TYPE)) {\n                  if (name.equals(SpecimenPreparationStepItems.STAIN)) {\n                    attributes.push({\n                      name: 'Tissue stain',\n                      value: item.TextValue\n                    })\n                  }\n                }\n              }\n            })\n          }\n        )\n      })\n    } catch (error: any) {\n      NotificationMiddleware.onError(\n        NotificationMiddlewareContext.DCMJS,\n        new CustomError(\n          errorTypes.ENCODINGANDDECODING,\n          error.message\n        )\n      )\n    }\n\n    const maxValue = Math.pow(2, this.props.metadata[0].BitsAllocated) - 1\n\n    const title = (\n      description != null ? `${identifier}: ${description}` : identifier\n    )\n    let settings\n    let item\n    if (this.props.opticalPath.isMonochromatic) {\n      // monochrome images that can be pseudo-colored\n      let colorSettings\n      if (this.state.currentStyle.color != null) {\n        colorSettings = (\n          <>\n            <Divider plain>\n              Color\n            </Divider>\n            <Row justify='center' align='middle' gutter={[8, 8]}>\n              <Col span={5}>\n                Red\n              </Col>\n              <Col span={14}>\n                <Slider\n                  range={false}\n                  min={0}\n                  max={255}\n                  step={1}\n                  value={this.state.currentStyle.color[0]}\n                  onChange={this.handleColorRChange}\n                />\n              </Col>\n              <Col span={5}>\n                <InputNumber\n                  min={0}\n                  max={255}\n                  size='small'\n                  style={{ width: '65px' }}\n                  value={this.state.currentStyle.color[0]}\n                  onChange={this.handleColorRChange}\n                />\n              </Col>\n            </Row>\n\n            <Row justify='center' align='middle' gutter={[8, 8]}>\n              <Col span={5}>\n                Green\n              </Col>\n              <Col span={14}>\n                <Slider\n                  range={false}\n                  min={0}\n                  max={255}\n                  step={1}\n                  value={this.state.currentStyle.color[1]}\n                  onChange={this.handleColorGChange}\n                />\n              </Col>\n              <Col span={5}>\n                <InputNumber\n                  min={0}\n                  max={255}\n                  size='small'\n                  style={{ width: '65px' }}\n                  value={this.state.currentStyle.color[1]}\n                  onChange={this.handleColorGChange}\n                />\n              </Col>\n            </Row>\n\n            <Row justify='center' align='middle' gutter={[8, 8]}>\n              <Col span={5}>\n                Blue\n              </Col>\n              <Col span={14}>\n                <Slider\n                  range={false}\n                  min={0}\n                  max={255}\n                  step={1}\n                  value={this.state.currentStyle.color[2]}\n                  onChange={this.handleColorBChange}\n                />\n              </Col>\n              <Col span={5}>\n                <InputNumber\n                  min={0}\n                  max={255}\n                  size='small'\n                  style={{ width: '65px' }}\n                  value={this.state.currentStyle.color[2]}\n                  onChange={this.handleColorBChange}\n                />\n              </Col>\n            </Row>\n          </>\n        )\n      } else {\n        colorSettings = (\n          <>\n            <Divider plain>\n              Color\n            </Divider>\n            Custom pseudo-coloring is disabled because pixels are colorized via\n            a provided palette color lookup table.\n          </>\n        )\n      }\n\n      let windowSettings\n      if (this.state.currentStyle.limitValues != null) {\n        windowSettings = (\n          <>\n            <Divider plain>\n              Values of interest\n            </Divider>\n            <Row justify='center' align='middle' gutter={[8, 8]}>\n              <Col span={6}>\n                <InputNumber\n                  min={0}\n                  max={this.state.currentStyle.limitValues[1]}\n                  size='small'\n                  style={{ width: '75px' }}\n                  value={this.state.currentStyle.limitValues[0]}\n                  onChange={this.handleLowerLimitChange}\n                />\n              </Col>\n              <Col span={12}>\n                <Slider\n                  range\n                  min={0}\n                  max={maxValue}\n                  step={1}\n                  value={[\n                    this.state.currentStyle.limitValues[0],\n                    this.state.currentStyle.limitValues[1]\n                  ]}\n                  onChange={this.handleLimitChange}\n                />\n              </Col>\n              <Col span={6}>\n                <InputNumber\n                  min={this.state.currentStyle.limitValues[0]}\n                  max={maxValue}\n                  size='small'\n                  style={{ width: '75px' }}\n                  value={this.state.currentStyle.limitValues[1]}\n                  onChange={this.handleUpperLimitChange}\n                />\n              </Col>\n            </Row>\n          </>\n        )\n      }\n      settings = (\n        <div>\n          {windowSettings}\n          {colorSettings}\n          <Divider plain />\n          <Row justify='center' align='middle' gutter={[8, 8]}>\n            <Col span={6}>\n              Opacity\n            </Col>\n            <Col span={12}>\n              <Slider\n                range={false}\n                min={0}\n                max={1}\n                step={0.01}\n                value={this.state.currentStyle.opacity}\n                onChange={this.handleOpacityChange}\n              />\n            </Col>\n            <Col span={6}>\n              <InputNumber\n                min={0}\n                max={1}\n                size='small'\n                step={0.1}\n                style={{ width: '65px' }}\n                value={this.state.currentStyle.opacity}\n                onChange={this.handleOpacityChange}\n              />\n            </Col>\n          </Row>\n        </div>\n      )\n      const colors = this.getCurrentColors()\n      item = (\n        <Badge\n          offset={[-20, 20]}\n          count={' '}\n          style={{\n            borderStyle: 'solid',\n            borderWidth: '1px',\n            borderColor: 'gray',\n            visibility: this.state.isVisible ? 'visible' : 'hidden',\n            backgroundImage: `linear-gradient(to right, ${colors.toString()})`\n          }}\n        >\n          <Description\n            header={title}\n            attributes={attributes}\n            selectable\n            hasLongValues\n          />\n        </Badge>\n      )\n    } else {\n      // color images\n      settings = (\n        <div>\n          <Row justify='center' align='middle' gutter={[8, 8]}>\n            <Col span={6}>\n              Opacity\n            </Col>\n            <Col span={12}>\n              <Slider\n                range={false}\n                min={0}\n                max={1}\n                step={0.01}\n                value={this.state.currentStyle.opacity}\n                onChange={this.handleOpacityChange}\n              />\n            </Col>\n            <Col span={6}>\n              <InputNumber\n                min={0}\n                max={1}\n                size='small'\n                step={0.1}\n                style={{ width: '60px' }}\n                value={this.state.currentStyle.opacity}\n                onChange={this.handleOpacityChange}\n              />\n            </Col>\n          </Row>\n        </div>\n      )\n      item = (\n        <Description\n          header={title}\n          attributes={attributes}\n          selectable\n          hasLongValues\n        />\n      )\n    }\n\n    const buttons = []\n    if (this.props.isRemovable) {\n      buttons.push(\n        <Tooltip title='Remove Optical Path'>\n          <Button\n            type='default'\n            shape='circle'\n            icon={<DeleteOutlined />}\n            onClick={this.handleRemoval}\n          />\n        </Tooltip>\n      )\n    }\n\n    const {\n      defaultStyle,\n      isRemovable,\n      isVisible,\n      metadata,\n      onVisibilityChange,\n      onStyleChange,\n      onRemoval,\n      opticalPath,\n      ...otherProps\n    } = this.props\n    return (\n      <Menu.Item\n        style={{ height: '100%', paddingLeft: '3px' }}\n        key={this.props.opticalPath.identifier}\n        {...otherProps}\n      >\n        <Space align='start'>\n          <div style={{ paddingLeft: '14px' }}>\n            <Space direction='vertical' align='end'>\n              <Switch\n                size='small'\n                checked={this.state.isVisible}\n                onChange={this.handleVisibilityChange}\n                checkedChildren={<EyeOutlined />}\n                unCheckedChildren={<EyeInvisibleOutlined />}\n              />\n              <Popover\n                placement='left'\n                content={settings}\n                overlayStyle={{ width: '350px' }}\n                title='Display Settings'\n              >\n                <Button\n                  type='primary'\n                  shape='circle'\n                  icon={<SettingOutlined />}\n                />\n              </Popover>\n              {buttons}\n            </Space>\n          </div>\n          {item}\n        </Space>\n      </Menu.Item>\n    )\n  }\n}\n\nexport default OpticalPathItem\n","import React from 'react'\nimport * as dmv from 'dicom-microscopy-viewer'\nimport { Button as Btn, Menu, Select, Space, Tooltip } from 'antd'\nimport { AppstoreAddOutlined } from '@ant-design/icons'\n\nimport OpticalPathItem from './OpticalPathItem'\n\nconst { Option } = Select\n\ninterface OpticalPathListProps {\n  opticalPaths: dmv.opticalPath.OpticalPath[]\n  metadata: {\n    [opticalPathIdentifier: string]: dmv.metadata.VLWholeSlideMicroscopyImage[]\n  }\n  visibleOpticalPathIdentifiers: Set<string>\n  activeOpticalPathIdentifiers: Set<string>\n  defaultOpticalPathStyles: {\n    [opticalPathIdentifier: string]: {\n      opacity: number\n      color?: number[]\n      limitValues?: number[]\n      paletteColorLookupTable?: dmv.color.PaletteColorLookupTable\n    }\n  }\n  onOpticalPathVisibilityChange: ({ opticalPathIdentifier, isVisible }: {\n    opticalPathIdentifier: string\n    isVisible: boolean\n  }) => void\n  onOpticalPathStyleChange: ({ opticalPathIdentifier, styleOptions }: {\n    opticalPathIdentifier: string\n    styleOptions: {\n      opacity?: number\n      color?: number[]\n      limitValues?: number[]\n    }\n  }) => void\n  onOpticalPathActivityChange: ({ opticalPathIdentifier, isActive }: {\n    opticalPathIdentifier: string\n    isActive: boolean\n  }) => void\n  selectedPresentationStateUID?: string\n}\n\ninterface OpticalPathListState {\n  selectedOpticalPathIdentifier?: string\n}\n\n/**\n * React component representing a list of optical paths.\n */\nclass OpticalPathList extends React.Component<OpticalPathListProps, OpticalPathListState> {\n  state = {\n    selectedOpticalPathIdentifier: undefined\n  }\n\n  constructor (props: OpticalPathListProps) {\n    super(props)\n    this.handleItemAddition = this.handleItemAddition.bind(this)\n    this.handleItemRemoval = this.handleItemRemoval.bind(this)\n    this.handleItemSelectionChange = this.handleItemSelectionChange.bind(this)\n  }\n\n  /**\n   * Handler that gets called when an optical path should be removed.\n   */\n  handleItemRemoval (opticalPathIdentifier: string): void {\n    this.props.onOpticalPathActivityChange({\n      opticalPathIdentifier,\n      isActive: false\n    })\n  }\n\n  /**\n   * Handler that gets called when the selection of an optical path should change.\n   */\n  handleItemSelectionChange (\n    value: string\n  ): void {\n    this.setState({ selectedOpticalPathIdentifier: value })\n  }\n\n  /**\n   * Handler that gets called when an optical path should be added.\n   */\n  handleItemAddition (): void {\n    const identifier = this.state.selectedOpticalPathIdentifier\n    if (identifier !== undefined) {\n      this.props.onOpticalPathActivityChange({\n        opticalPathIdentifier: identifier,\n        isActive: true\n      })\n      this.setState({ selectedOpticalPathIdentifier: undefined })\n    }\n  }\n\n  render (): React.ReactNode {\n    if (this.props.metadata === undefined) {\n      return null\n    }\n\n    const isSelectable = this.props.opticalPaths.length > 1\n    const opticalPathItems: React.ReactNode[] = []\n    const optionItems: React.ReactNode[] = []\n    this.props.opticalPaths.forEach(opticalPath => {\n      const opticalPathIdentifier = opticalPath.identifier\n      const images = this.props.metadata[opticalPathIdentifier]\n      const seriesInstanceUID = images[0].SeriesInstanceUID\n      images[0].OpticalPathSequence.forEach(opticalPathItem => {\n        const id = opticalPathItem.OpticalPathIdentifier\n        const description = opticalPathItem.OpticalPathDescription\n        if (opticalPath.identifier === id) {\n          if (this.props.activeOpticalPathIdentifiers.has(id)) {\n            opticalPathItems.push(\n              <OpticalPathItem\n                key={`${seriesInstanceUID}-${id}`}\n                opticalPath={opticalPath}\n                metadata={images}\n                isVisible={this.props.visibleOpticalPathIdentifiers.has(id)}\n                defaultStyle={this.props.defaultOpticalPathStyles[id]}\n                onVisibilityChange={this.props.onOpticalPathVisibilityChange}\n                onStyleChange={this.props.onOpticalPathStyleChange}\n                onRemoval={this.handleItemRemoval}\n                isRemovable={isSelectable}\n              />\n            )\n          } else {\n            let title\n            if (description !== '') {\n              title = `${id} - ${description}`\n            } else {\n              title = `${id}`\n            }\n            optionItems.push(\n              <Option key={id} value={id}>{title}</Option>\n            )\n          }\n        }\n      })\n    })\n\n    let opticalPathSelector\n    if (isSelectable) {\n      opticalPathSelector = (\n        <Space align='center' size={20} style={{ padding: '14px' }}>\n          <Select\n            defaultValue=''\n            style={{ width: 200 }}\n            onChange={this.handleItemSelectionChange}\n            value={this.state.selectedOpticalPathIdentifier}\n            allowClear\n          >\n            {optionItems}\n          </Select>\n          <Tooltip title='Add'>\n            <Btn\n              icon={<AppstoreAddOutlined />}\n              type='primary'\n              onClick={this.handleItemAddition}\n            />\n          </Tooltip>\n        </Space>\n      )\n    }\n\n    return (\n      <Menu selectable={false}>\n        {opticalPathItems}\n        {opticalPathSelector}\n      </Menu>\n    )\n  }\n}\n\nexport default OpticalPathList\n","import React from 'react'\nimport * as dmv from 'dicom-microscopy-viewer'\nimport {\n  Button,\n  Col,\n  InputNumber,\n  Menu,\n  Popover,\n  Row,\n  Slider,\n  Space,\n  Switch\n} from 'antd'\nimport { SettingOutlined } from '@ant-design/icons'\nimport { FaEye, FaEyeSlash } from 'react-icons/fa'\n\nimport Description from './Description'\n\ninterface MappingItemProps {\n  mapping: dmv.mapping.ParameterMapping\n  metadata: dmv.metadata.ParametricMap[]\n  isVisible: boolean\n  defaultStyle: {\n    opacity: number\n  }\n  onVisibilityChange: ({ mappingUID, isVisible }: {\n    mappingUID: string\n    isVisible: boolean\n  }) => void\n  onStyleChange: ({ mappingUID, styleOptions }: {\n    mappingUID: string\n    styleOptions: {\n      opacity?: number\n    }\n  }) => void\n}\n\ninterface MappingItemState {\n  isVisible: boolean\n  currentStyle: {\n    opacity: number\n  }\n}\n\n/**\n * React component representing a Real World Value Mapping.\n */\nclass MappingItem extends React.Component<MappingItemProps, MappingItemState> {\n  constructor (props: MappingItemProps) {\n    super(props)\n    this.handleVisibilityChange = this.handleVisibilityChange.bind(this)\n    this.handleOpacityChange = this.handleOpacityChange.bind(this)\n    this.state = {\n      isVisible: this.props.isVisible,\n      currentStyle: {\n        opacity: this.props.defaultStyle.opacity\n      }\n    }\n  }\n\n  handleVisibilityChange (\n    checked: boolean,\n    event: React.MouseEvent<HTMLButtonElement>\n  ): void {\n    this.props.onVisibilityChange({\n      mappingUID: this.props.mapping.uid,\n      isVisible: checked\n    })\n    this.setState({ isVisible: checked })\n  }\n\n  handleOpacityChange (value: number | null): void {\n    if (value != null) {\n      this.props.onStyleChange({\n        mappingUID: this.props.mapping.uid,\n        styleOptions: {\n          opacity: value\n        }\n      })\n      this.setState(state => ({\n        currentStyle: {\n          opacity: value\n        }\n      }))\n    }\n  }\n\n  render (): React.ReactNode {\n    const attributes: Array<{ name: string, value: string }> = [\n      {\n        name: 'Description',\n        value: this.props.mapping.description\n      }\n    ]\n\n    const settings = (\n      <div>\n        <Row justify='center' align='middle'>\n          <Col span={6}>\n            Opacity\n          </Col>\n          <Col span={12}>\n            <Slider\n              range={false}\n              min={0}\n              max={1}\n              step={0.01}\n              value={this.state.currentStyle.opacity}\n              onChange={this.handleOpacityChange}\n            />\n          </Col>\n          <Col span={6}>\n            <InputNumber\n              min={0}\n              max={1}\n              size='small'\n              step={0.1}\n              style={{ width: '65px' }}\n              value={this.state.currentStyle.opacity}\n              onChange={this.handleOpacityChange}\n            />\n          </Col>\n        </Row>\n      </div>\n    )\n\n    /**\n     * This hack is required for Menu.Item to work properly:\n     * https://github.com/react-component/menu/issues/142\n     */\n    const {\n      defaultStyle,\n      isVisible,\n      mapping,\n      metadata,\n      onVisibilityChange,\n      onStyleChange,\n      ...otherProps\n    } = this.props\n    return (\n      <Menu.Item\n        style={{ height: '100%', paddingLeft: '3px' }}\n        key={this.props.mapping.uid}\n        {...otherProps}\n      >\n        <Space align='start'>\n          <div style={{ paddingLeft: '14px' }}>\n            <Space direction='vertical' align='end' size={100}>\n              <Space direction='vertical' align='end'>\n                <Switch\n                  size='small'\n                  onChange={this.handleVisibilityChange}\n                  checked={this.props.isVisible}\n                  checkedChildren={<FaEye />}\n                  unCheckedChildren={<FaEyeSlash />}\n                />\n                <Popover\n                  placement='left'\n                  content={settings}\n                  overlayStyle={{ width: '350px' }}\n                  title='Display Settings'\n                >\n                  <Button\n                    type='primary'\n                    shape='circle'\n                    icon={<SettingOutlined />}\n                  />\n                </Popover>\n              </Space>\n            </Space>\n          </div>\n          <Description\n            header={this.props.mapping.label}\n            attributes={attributes}\n            selectable\n            hasLongValues\n          />\n        </Space>\n      </Menu.Item>\n    )\n  }\n}\n\nexport default MappingItem\n","import React from 'react'\nimport * as dmv from 'dicom-microscopy-viewer'\nimport { Menu } from 'antd'\n\nimport MappingItem from './MappingItem'\n\ninterface MappingListProps {\n  mappings: dmv.mapping.ParameterMapping[]\n  metadata: {\n    [mappingUID: string]: dmv.metadata.ParametricMap[]\n  }\n  visibleMappingUIDs: Set<string>\n  defaultMappingStyles: {\n    [mappingUID: string]: { opacity: number }\n  }\n  onMappingVisibilityChange: ({ mappingUID, isVisible }: {\n    mappingUID: string\n    isVisible: boolean\n  }) => void\n  onMappingStyleChange: ({ mappingUID, styleOptions }: {\n    mappingUID: string\n    styleOptions: {\n      opacity?: number\n    }\n  }) => void\n}\n\n/**\n * React component representing a list of Real World Value Mappings.\n */\nclass MappingList extends React.Component<MappingListProps, {}> {\n  render (): React.ReactNode {\n    const items = this.props.mappings.map((mapping, index) => {\n      const uid = mapping.uid\n      return (\n        <MappingItem\n          key={mapping.uid}\n          mapping={mapping}\n          metadata={this.props.metadata[uid]}\n          isVisible={this.props.visibleMappingUIDs.has(uid)}\n          defaultStyle={this.props.defaultMappingStyles[uid]}\n          onVisibilityChange={this.props.onMappingVisibilityChange}\n          onStyleChange={this.props.onMappingStyleChange}\n        />\n      )\n    })\n\n    return (\n      <Menu selectable={false}>\n        {items}\n      </Menu>\n    )\n  }\n}\n\nexport default MappingList\n","import React from 'react'\nimport * as dmv from 'dicom-microscopy-viewer'\nimport {\n  Button,\n  Col,\n  InputNumber,\n  Menu,\n  Popover,\n  Row,\n  Slider,\n  Space,\n  Switch\n} from 'antd'\nimport { SettingOutlined } from '@ant-design/icons'\nimport { FaEye, FaEyeSlash } from 'react-icons/fa'\n\nimport Description from './Description'\n\ninterface SegmentItemProps {\n  segment: dmv.segment.Segment\n  isVisible: boolean\n  metadata: dmv.metadata.Segmentation[]\n  defaultStyle: {\n    opacity: number\n  }\n  onVisibilityChange: ({ segmentUID, isVisible }: {\n    segmentUID: string\n    isVisible: boolean\n  }) => void\n  onStyleChange: ({ segmentUID, styleOptions }: {\n    segmentUID: string\n    styleOptions: {\n      opacity: number\n    }\n  }) => void\n}\n\ninterface SegmentItemState {\n  isVisible: boolean\n  currentStyle: {\n    opacity: number\n  }\n}\n\n/**\n * React component representing a Segment.\n */\nclass SegmentItem extends React.Component<SegmentItemProps, SegmentItemState> {\n  constructor (props: SegmentItemProps) {\n    super(props)\n    this.handleVisibilityChange = this.handleVisibilityChange.bind(this)\n    this.handleOpacityChange = this.handleOpacityChange.bind(this)\n    this.state = {\n      isVisible: this.props.isVisible,\n      currentStyle: { opacity: this.props.defaultStyle.opacity }\n    }\n  }\n\n  handleVisibilityChange (\n    checked: boolean,\n    event: React.MouseEvent<HTMLButtonElement>\n  ): void {\n    this.props.onVisibilityChange({\n      segmentUID: this.props.segment.uid,\n      isVisible: checked\n    })\n    this.setState({ isVisible: checked })\n  }\n\n  handleOpacityChange (value: number | null): void {\n    if (value != null) {\n      this.props.onStyleChange({\n        segmentUID: this.props.segment.uid,\n        styleOptions: {\n          opacity: value\n        }\n      })\n      this.setState({ currentStyle: { opacity: value } })\n    }\n  }\n\n  render (): React.ReactNode {\n    const attributes: Array<{ name: string, value: string }> = [\n      {\n        name: 'Property Type',\n        value: this.props.segment.propertyType.CodeMeaning\n      },\n      {\n        name: 'Property Category',\n        value: this.props.segment.propertyCategory.CodeMeaning\n      },\n      {\n        name: 'Algorithm Name',\n        value: this.props.segment.algorithmName\n      }\n    ]\n\n    const settings = (\n      <div>\n        <Row justify='center' align='middle'>\n          <Col span={6}>\n            Opacity\n          </Col>\n          <Col span={12}>\n            <Slider\n              range={false}\n              min={0}\n              max={1}\n              step={0.01}\n              value={this.state.currentStyle.opacity}\n              onChange={this.handleOpacityChange}\n            />\n          </Col>\n          <Col span={6}>\n            <InputNumber\n              min={0}\n              max={1}\n              size='small'\n              step={0.1}\n              style={{ width: '65px' }}\n              value={this.state.currentStyle.opacity}\n              onChange={this.handleOpacityChange}\n            />\n          </Col>\n        </Row>\n      </div>\n    )\n\n    /**\n     * This hack is required for Menu.Item to work properly:\n     * https://github.com/react-component/menu/issues/142\n     */\n    const {\n      defaultStyle,\n      isVisible,\n      segment,\n      metadata,\n      onVisibilityChange,\n      onStyleChange,\n      ...otherProps\n    } = this.props\n    return (\n      <Menu.Item\n        style={{ height: '100%', paddingLeft: '3px' }}\n        key={this.props.segment.uid}\n        {...otherProps}\n      >\n        <Space align='start'>\n          <div style={{ paddingLeft: '14px' }}>\n            <Space direction='vertical' align='end'>\n              <Switch\n                size='small'\n                onChange={this.handleVisibilityChange}\n                checked={this.props.isVisible}\n                checkedChildren={<FaEye />}\n                unCheckedChildren={<FaEyeSlash />}\n              />\n              <Popover\n                placement='left'\n                content={settings}\n                overlayStyle={{ width: '350px' }}\n                title='Display Settings'\n              >\n                <Button\n                  type='primary'\n                  shape='circle'\n                  icon={<SettingOutlined />}\n                />\n              </Popover>\n            </Space>\n          </div>\n          <Description\n            header={this.props.segment.label}\n            attributes={attributes}\n            selectable\n            hasLongValues\n          />\n        </Space>\n      </Menu.Item>\n    )\n  }\n}\n\nexport default SegmentItem\n","import React from 'react'\nimport * as dmv from 'dicom-microscopy-viewer'\nimport { Menu } from 'antd'\n\nimport SegmentItem from './SegmentItem'\n\ninterface SegmentListProps {\n  segments: dmv.segment.Segment[]\n  visibleSegmentUIDs: Set<string>\n  metadata: {\n    [segmentUID: string]: dmv.metadata.Segmentation[]\n  }\n  defaultSegmentStyles: {\n    [segmentUID: string]: {\n      opacity: number\n    }\n  }\n  onSegmentVisibilityChange: ({ segmentUID, isVisible }: {\n    segmentUID: string\n    isVisible: boolean\n  }) => void\n  onSegmentStyleChange: ({ segmentUID, styleOptions }: {\n    segmentUID: string\n    styleOptions: {\n      opacity: number\n    }\n  }) => void\n}\n\n/**\n * React component representing a list of Segments.\n */\nclass SegmentList extends React.Component<SegmentListProps, {}> {\n  render (): React.ReactNode {\n    const items = this.props.segments.map((segment, index) => {\n      const uid = segment.uid\n      return (\n        <SegmentItem\n          key={segment.uid}\n          segment={segment}\n          metadata={this.props.metadata[uid]}\n          isVisible={this.props.visibleSegmentUIDs.has(uid)}\n          defaultStyle={this.props.defaultSegmentStyles[uid]}\n          onVisibilityChange={this.props.onSegmentVisibilityChange}\n          onStyleChange={this.props.onSegmentStyleChange}\n        />\n      )\n    })\n\n    return (\n      <Menu selectable={false}>\n        {items}\n      </Menu>\n    )\n  }\n}\n\nexport default SegmentList\n","import React from 'react'\nimport {\n  NavigateFunction,\n  Params,\n  useLocation,\n  useNavigate,\n  useParams,\n  Location\n} from 'react-router-dom'\n\nexport interface RouteComponentProps {\n  location: Location\n  navigate: NavigateFunction\n  params: Params<string>\n}\n\nexport function withRouter<T> (Component: React.ComponentType<T>): Function {\n  function ComponentWithRouterProp (props: any): JSX.Element {\n    const location = useLocation()\n    const navigate = useNavigate()\n    const params = useParams()\n    return (\n      <Component\n        {...props}\n        location={location}\n        navigate={navigate}\n        params={params}\n      />\n    )\n  }\n  return ComponentWithRouterProp\n}\n","import React from 'react'\nimport { Col, Divider, InputNumber, Row, Slider } from 'antd'\n\ninterface ColorSettingsMenuProps {\n  annotationGroupsUIDs: string[]\n  defaultStyle: {\n    opacity: number\n    color: number[]\n  }\n  onStyleChange: Function\n}\n\ninterface ColorSettingsMenuState {\n  currentStyle: {\n    opacity: number\n    color?: number[]\n  }\n}\n\n/**\n * React component representing an Annotation Group.\n */\nclass ColorSettingsMenu extends React.Component<\nColorSettingsMenuProps,\nColorSettingsMenuState\n> {\n  constructor (props: ColorSettingsMenuProps) {\n    super(props)\n    this.handleOpacityChange = this.handleOpacityChange.bind(this)\n    this.handleColorRChange = this.handleColorRChange.bind(this)\n    this.handleColorGChange = this.handleColorGChange.bind(this)\n    this.handleColorBChange = this.handleColorBChange.bind(this)\n    this.getCurrentColor = this.getCurrentColor.bind(this)\n    this.state = {\n      currentStyle: {\n        opacity: this.props.defaultStyle.opacity,\n        color: this.props.defaultStyle.color\n      }\n    }\n  }\n\n  handleOpacityChange (value: number | null): void {\n    if (value != null) {\n      this.props.annotationGroupsUIDs.forEach((uid) => {\n        this.props.onStyleChange({\n          uid,\n          styleOptions: {\n            color: this.state.currentStyle.color,\n            opacity: value\n          }\n        })\n      })\n      this.setState({\n        currentStyle: {\n          opacity: value,\n          color: this.state.currentStyle.color\n        }\n      })\n    }\n  }\n\n  handleColorRChange (value: number | number[] | null): void {\n    if (value != null && this.state.currentStyle.color !== undefined) {\n      const color = [\n        Array.isArray(value) ? value[0] : value,\n        this.state.currentStyle.color[1],\n        this.state.currentStyle.color[2]\n      ]\n      this.setState((state) => ({\n        currentStyle: {\n          color: color,\n          opacity: state.currentStyle.opacity\n        }\n      }))\n      this.props.annotationGroupsUIDs.forEach((uid) => {\n        this.props.onStyleChange({\n          uid,\n          styleOptions: {\n            color: color,\n            opacity: this.state.currentStyle.opacity\n          }\n        })\n      })\n    }\n  }\n\n  handleColorGChange (value: number | number[] | null): void {\n    if (value != null && this.state.currentStyle.color !== undefined) {\n      const color = [\n        this.state.currentStyle.color[0],\n        Array.isArray(value) ? value[0] : value,\n        this.state.currentStyle.color[2]\n      ]\n      this.setState((state) => ({\n        currentStyle: {\n          color: color,\n          opacity: state.currentStyle.opacity\n        }\n      }))\n      this.props.annotationGroupsUIDs.forEach((uid) => {\n        this.props.onStyleChange({\n          uid,\n          styleOptions: {\n            color: color,\n            opacity: this.state.currentStyle.opacity\n          }\n        })\n      })\n    }\n  }\n\n  handleColorBChange (value: number | number[] | null): void {\n    if (value != null && this.state.currentStyle.color !== undefined) {\n      const color = [\n        this.state.currentStyle.color[0],\n        this.state.currentStyle.color[1],\n        Array.isArray(value) ? value[0] : value\n      ]\n      this.setState((state) => ({\n        currentStyle: {\n          color: color,\n          opacity: state.currentStyle.opacity\n        }\n      }))\n\n      this.props.annotationGroupsUIDs.forEach((uid) => {\n        this.props.onStyleChange({\n          uid,\n          styleOptions: {\n            color: color,\n            opacity: this.state.currentStyle.opacity\n          }\n        })\n      })\n    }\n  }\n\n  getCurrentColor (): string {\n    const rgb2hex = (values: number[]): string => {\n      const r = values[0]\n      const g = values[1]\n      const b = values[2]\n      return '#' + (0x1000000 + (r << 16) + (g << 8) + b).toString(16).slice(1)\n    }\n\n    if (this.state.currentStyle.color != null) {\n      return rgb2hex(this.state.currentStyle.color)\n    } else {\n      return 'white'\n    }\n  }\n\n  render (): React.ReactNode {\n    let colorSettings\n    if (this.state.currentStyle.color != null) {\n      colorSettings = (\n        <>\n          <Divider plain>Color</Divider>\n          <Row justify='center' align='middle' gutter={[8, 8]}>\n            <Col span={5}>Red</Col>\n            <Col span={14}>\n              <Slider\n                range={false}\n                min={0}\n                max={255}\n                step={1}\n                value={this.state.currentStyle.color[0]}\n                onChange={this.handleColorRChange}\n              />\n            </Col>\n            <Col span={5}>\n              <InputNumber\n                min={0}\n                max={255}\n                size='small'\n                style={{ width: '65px' }}\n                value={this.state.currentStyle.color[0]}\n                onChange={this.handleColorRChange}\n              />\n            </Col>\n          </Row>\n\n          <Row justify='center' align='middle' gutter={[8, 8]}>\n            <Col span={5}>Green</Col>\n            <Col span={14}>\n              <Slider\n                range={false}\n                min={0}\n                max={255}\n                step={1}\n                value={this.state.currentStyle.color[1]}\n                onChange={this.handleColorGChange}\n              />\n            </Col>\n            <Col span={5}>\n              <InputNumber\n                min={0}\n                max={255}\n                size='small'\n                style={{ width: '65px' }}\n                value={this.state.currentStyle.color[1]}\n                onChange={this.handleColorGChange}\n              />\n            </Col>\n          </Row>\n\n          <Row justify='center' align='middle' gutter={[8, 8]}>\n            <Col span={5}>Blue</Col>\n            <Col span={14}>\n              <Slider\n                range={false}\n                min={0}\n                max={255}\n                step={1}\n                value={this.state.currentStyle.color[2]}\n                onChange={this.handleColorBChange}\n              />\n            </Col>\n            <Col span={5}>\n              <InputNumber\n                min={0}\n                max={255}\n                size='small'\n                style={{ width: '65px' }}\n                value={this.state.currentStyle.color[2]}\n                onChange={this.handleColorBChange}\n              />\n            </Col>\n          </Row>\n          <Divider plain />\n        </>\n      )\n    }\n\n    return (\n      <div>\n        {colorSettings}\n        <Row justify='start' align='middle' gutter={[8, 8]}>\n          <Col span={6}>Opacity</Col>\n          <Col span={12}>\n            <Slider\n              range={false}\n              min={0}\n              max={1}\n              step={0.01}\n              value={this.state.currentStyle.opacity}\n              onChange={this.handleOpacityChange}\n            />\n          </Col>\n          <Col span={6}>\n            <InputNumber\n              min={0}\n              max={1}\n              size='small'\n              step={0.1}\n              style={{ width: '65px' }}\n              value={this.state.currentStyle.opacity}\n              onChange={this.handleOpacityChange}\n            />\n          </Col>\n        </Row>\n      </div>\n    )\n  }\n}\n\nexport default ColorSettingsMenu\n","import React from 'react'\nimport { Menu, Space, Checkbox, Tooltip, Popover, Button } from 'antd'\nimport { SettingOutlined } from '@ant-design/icons'\nimport { Category, Type } from './AnnotationCategoryList'\nimport ColorSettingsMenu from './ColorSettingsMenu'\n\nconst AnnotationCategoryItem = ({\n  category,\n  onChange,\n  checkedAnnotationUids,\n  onStyleChange,\n  defaultAnnotationStyles\n}: {\n  category: Category\n  onChange: Function\n  onStyleChange: Function\n  defaultAnnotationStyles: {\n    [annotationUID: string]: {\n      opacity: number\n      color: number[]\n    }\n  }\n  checkedAnnotationUids: Set<string>\n}): JSX.Element => {\n  const { types } = category\n\n  const onCheckCategoryChange = (e: any): void => {\n    const isVisible = e.target.checked\n    types.forEach((type: Type) => {\n      handleChangeCheckedType({ type, isVisible })\n    })\n  }\n\n  const checkAll = types.every((type: Type) =>\n    type.uids.every((uid: string) => checkedAnnotationUids.has(uid))\n  )\n  const indeterminate =\n    !checkAll &&\n    types.some((type: Type) =>\n      type.uids.some((uid: string) => checkedAnnotationUids.has(uid))\n    )\n\n  const handleChangeCheckedType = ({\n    type,\n    isVisible\n  }: {\n    type: Type\n    isVisible: boolean\n  }): void => {\n    type.uids.forEach((uid: string) => {\n      onChange({ roiUID: uid, isVisible })\n    })\n  }\n\n  return (\n    <Menu.Item\n      style={{ height: '100%', paddingLeft: '3px' }}\n      key={category.CodeMeaning}\n    >\n      <Space align='start'>\n        <div style={{ paddingLeft: '14px', color: 'black' }}>\n          <Space direction='vertical' align='end'>\n            <Checkbox\n              indeterminate={indeterminate}\n              checked={checkAll}\n              onChange={onCheckCategoryChange}\n            >\n              <Tooltip\n                title={`${category.CodeValue}:${category.CodingSchemeDesignator}`}\n                mouseEnterDelay={1}\n              >\n                {category.CodeMeaning}\n              </Tooltip>\n              <Popover\n                placement='topLeft'\n                overlayStyle={{ width: '350px' }}\n                title='Display Settings'\n                content={() => (\n                  <ColorSettingsMenu\n                    annotationGroupsUIDs={types.reduce(\n                      (acc: string[], type) => {\n                        return [...acc, ...type.uids]\n                      },\n                      []\n                    )}\n                    onStyleChange={onStyleChange}\n                    defaultStyle={\n                      defaultAnnotationStyles[types[0].uids[0]]\n                    }\n                  />\n                )}\n              >\n                <Button\n                  type='primary'\n                  shape='circle'\n                  style={{ marginLeft: '10px' }}\n                  icon={<SettingOutlined />}\n                />\n              </Popover>\n            </Checkbox>\n          </Space>\n          {types.map((type: Type) => {\n            const { CodeMeaning, CodingSchemeDesignator, CodeValue, uids } =\n              type\n            const shortenedCodeMeaning = CodeMeaning.slice(0, 22)\n            const displayCodeMeaning = shortenedCodeMeaning === CodeMeaning ? CodeMeaning : `${shortenedCodeMeaning}...`\n            const isChecked = uids.every((uid: string) =>\n              checkedAnnotationUids.has(uid)\n            )\n            const indeterminateType =\n              !isChecked &&\n              uids.some((uid: string) => checkedAnnotationUids.has(uid))\n            return (\n              <div\n                key={`${type.CodingSchemeDesignator}:${type.CodeMeaning}`}\n                style={{\n                  paddingLeft: '25px',\n                  width: '100%',\n                  display: 'flex',\n                  flexDirection: 'row'\n                }}\n              >\n                <Checkbox\n                  indeterminate={indeterminateType}\n                  checked={isChecked}\n                  onChange={(e: any) =>\n                    handleChangeCheckedType({\n                      type,\n                      isVisible: e.target.checked\n                    })}\n                />\n                <div style={{ paddingLeft: '5px' }}>\n                  <Tooltip\n                    title={`${CodeValue}:${CodingSchemeDesignator}`}\n                    mouseEnterDelay={1}\n                  >\n                    {displayCodeMeaning}\n                  </Tooltip>\n                  <Popover\n                    placement='topLeft'\n                    overlayStyle={{ width: '350px' }}\n                    title='Display Settings'\n                    content={() => (\n                      <ColorSettingsMenu\n                        annotationGroupsUIDs={type.uids}\n                        onStyleChange={onStyleChange}\n                        defaultStyle={defaultAnnotationStyles[type.uids[0]]}\n                      />\n                    )}\n                  >\n                    <Button\n                      type='primary'\n                      shape='circle'\n                      style={{ marginLeft: '10px' }}\n                      icon={<SettingOutlined />}\n                    />\n                  </Popover>\n                </div>\n              </div>\n            )\n          })}\n        </div>\n      </Space>\n    </Menu.Item>\n  )\n}\n\nexport default AnnotationCategoryItem\n","import React from 'react'\nimport { Menu } from 'antd'\nimport AnnotationCategoryItem from './AnnotationCategoryItem'\n\nexport interface AnnotationCategoryAndType {\n  uid: string\n  type: Omit<Type, 'uids'>\n  category: Omit<Category, 'types'>\n}\nexport interface Type {\n  CodeValue: string\n  CodeMeaning: string\n  CodingSchemeDesignator: string\n  uids: string[]\n}\nexport interface Category {\n  CodeValue: string\n  CodeMeaning: string\n  CodingSchemeDesignator: string\n  types: Type[]\n}\n\nconst getCategories = (annotations: any): Record<string, Category> => {\n  const categories = annotations?.reduce(\n    (\n      categoriesAcc: Record<string, Category & { types: Record<string, Type> }>,\n      annotation: AnnotationCategoryAndType\n    ) => {\n      const { category, type, uid } = annotation\n      const categoryKey = category.CodeMeaning\n      const typeKey = type.CodeMeaning\n\n      const oldCategory = categoriesAcc[categoryKey] ?? {\n        ...category,\n        types: {}\n      }\n      const oldType = oldCategory.types[typeKey] ?? {\n        ...type,\n        uids: []\n      }\n\n      return {\n        ...categoriesAcc,\n        [categoryKey]: {\n          ...oldCategory,\n          types: {\n            ...oldCategory.types,\n            [typeKey]: { ...oldType, uids: [...oldType.uids, uid] }\n          }\n        }\n      }\n    },\n    {}\n  )\n\n  // Normalizing types so that it's an array instead of an object:\n  Object.keys(categories).forEach((categoryKey: string) => {\n    const category = categories[categoryKey]\n    const { types } = category\n    const typesArr = Object.keys(types).map(\n      (typeKey: string) => types[typeKey]\n    )\n    categories[categoryKey].types = typesArr\n  })\n\n  return categories\n}\n\nconst AnnotationCategoryList = ({\n  annotations,\n  onChange,\n  onStyleChange,\n  defaultAnnotationStyles,\n  checkedAnnotationUids\n}: {\n  annotations: AnnotationCategoryAndType[]\n  onChange: Function\n  onStyleChange: Function\n  defaultAnnotationStyles: {\n    [annotationUID: string]: {\n      opacity: number\n      color: number[]\n    }\n  }\n  checkedAnnotationUids: Set<string>\n}): JSX.Element => {\n  const categories: Record<string, Category> = getCategories(annotations)\n\n  if (Object.keys(categories).length === 0) {\n    return <></>\n  }\n\n  const items = Object.keys(categories).map((categoryKey: any) => {\n    const category = categories[categoryKey]\n    return (\n      <AnnotationCategoryItem\n        key={category.CodeMeaning}\n        category={category}\n        onChange={onChange}\n        onStyleChange={onStyleChange}\n        defaultAnnotationStyles={defaultAnnotationStyles}\n        checkedAnnotationUids={checkedAnnotationUids}\n      />\n    )\n  })\n\n  return <Menu selectable={false}>{items}</Menu>\n}\nexport default AnnotationCategoryList\n","const HoveredRoiTooltip = ({\n  xPosition,\n  yPosition,\n  attributes\n}: {\n  xPosition: number\n  yPosition: number\n  attributes: Array<{ name: string, value: string }>\n}): JSX.Element => {\n  return (\n    <div\n      style={{\n        position: 'fixed',\n        top: `${yPosition}px`,\n        left: `${xPosition}px`,\n        backgroundColor: 'rgba(230, 230, 230, 0.65)',\n        minWidth: '150px',\n        minHeight: '60px',\n        padding: '20px',\n        fontWeight: 'bold',\n        pointerEvents: 'none'\n      }}\n    >\n      {attributes.map((attr) => (\n        <div key={attr.name}>\n          {attr.name}: <span style={{ fontWeight: 500 }}>{attr.value}</span>\n        </div>\n      ))}\n    </div>\n  )\n}\n\nexport default HoveredRoiTooltip\n","import React from 'react'\nimport {\n  FaCrosshairs,\n  FaDrawPolygon,\n  FaEye,\n  FaEyeSlash,\n  FaHandPaper,\n  FaHandPointer,\n  FaTrash,\n  FaSave\n} from 'react-icons/fa'\nimport {\n  Button as Btn,\n  Checkbox,\n  Descriptions,\n  Divider,\n  InputNumber,\n  message,\n  Menu,\n  Modal,\n  Layout,\n  Row,\n  Select,\n  Space,\n  Tooltip\n} from 'antd'\nimport { UndoOutlined, CheckOutlined, StopOutlined } from '@ant-design/icons'\nimport * as dmv from 'dicom-microscopy-viewer'\nimport * as dcmjs from 'dcmjs'\nimport * as dwc from 'dicomweb-client'\n\nimport DicomWebManager from '../DicomWebManager'\nimport AnnotationList from './AnnotationList'\nimport AnnotationGroupList from './AnnotationGroupList'\nimport Button from './Button'\nimport Equipment from './Equipment'\nimport Report, { MeasurementReport } from './Report'\nimport SpecimenList from './SpecimenList'\nimport OpticalPathList from './OpticalPathList'\nimport MappingList from './MappingList'\nimport SegmentList from './SegmentList'\nimport { AnnotationSettings } from '../AppConfig'\nimport { Slide } from '../data/slides'\nimport { StorageClasses } from '../data/uids'\nimport { findContentItemsByName } from '../utils/sr'\nimport { RouteComponentProps, withRouter } from '../utils/router'\nimport { CustomError, errorTypes } from '../utils/CustomError'\nimport NotificationMiddleware, {\n  NotificationMiddlewareContext\n} from '../services/NotificationMiddleware'\nimport AnnotationCategoryList from './AnnotationCategoryList'\nimport HoveredRoiTooltip from './HoveredRoiTooltip'\nimport { adaptRoiToAnnotation } from '../services/RoiToAnnotationAdapter'\n\nconst DEFAULT_ROI_STROKE_COLOR: number[] = [255, 234, 0] // [0, 126, 163]\nconst DEFAULT_ROI_FILL_COLOR: number[] = [255, 234, 0, 0.2] // [0, 126, 163, 0.2]\nconst DEFAULT_ROI_STROKE_WIDTH: number = 2\nconst DEFAULT_ROI_RADIUS: number = 5\n\nconst DEFAULT_ANNOTATION_OPACITY = 0.4\nconst DEFAULT_ANNOTATION_STROKE_COLOR = [0, 0, 0]\nconst DEFAULT_ANNOTATION_COLOR_PALETTE = [\n  [54, 162, 235],\n  [181, 65, 98],\n  [75, 192, 192],\n  [255, 158, 64],\n  [153, 102, 254],\n  [255, 205, 86],\n  [200, 203, 207]\n]\n\nconst _buildKey = (concept: {\n  CodeValue: string\n  CodeMeaning: string\n  CodingSchemeDesignator: string\n  CodingSchemeVersion?: string\n}): string => {\n  const codingScheme = concept.CodingSchemeDesignator\n  const codeValue = concept.CodeValue\n  return `${codingScheme}-${codeValue}`\n}\n\nconst _getRoiKey = (roi: dmv.roi.ROI): string | undefined => {\n  const matches = findContentItemsByName({\n    content: roi.evaluations,\n    name: new dcmjs.sr.coding.CodedConcept({\n      value: '121071',\n      meaning: 'Finding',\n      schemeDesignator: 'DCM'\n    })\n  })\n  if (matches.length === 0) {\n    console.warn(`no finding found for ROI ${roi.uid}`)\n    return\n  }\n  const finding = matches[0] as dcmjs.sr.valueTypes.CodeContentItem\n  const findingName = finding.ConceptCodeSequence[0]\n  return _buildKey(findingName)\n}\n\nconst _areROIsEqual = (a: dmv.roi.ROI, b: dmv.roi.ROI): boolean => {\n  if (a.scoord3d.graphicType !== b.scoord3d.graphicType) {\n    return false\n  }\n  if (a.scoord3d.frameOfReferenceUID !== b.scoord3d.frameOfReferenceUID) {\n    return false\n  }\n  if (a.scoord3d.graphicData.length !== b.scoord3d.graphicData.length) {\n    return false\n  }\n\n  const decimals = 6\n  for (let i = 0; i < a.scoord3d.graphicData.length; ++i) {\n    if (a.scoord3d.graphicType === 'POINT') {\n      const s1 = a.scoord3d as dmv.scoord3d.Point\n      const s2 = b.scoord3d as dmv.scoord3d.Point\n      const c1 = s1.graphicData[i].toPrecision(decimals)\n      const c2 = s2.graphicData[i].toPrecision(decimals)\n      if (c1 !== c2) {\n        return false\n      }\n    } else {\n      const s1 = a.scoord3d as dmv.scoord3d.Polygon\n      const s2 = b.scoord3d as dmv.scoord3d.Polygon\n      for (let j = 0; j < s1.graphicData[i].length; ++j) {\n        const c1 = s1.graphicData[i][j].toPrecision(decimals)\n        const c2 = s2.graphicData[i][j].toPrecision(decimals)\n        if (c1 !== c2) {\n          return false\n        }\n      }\n    }\n  }\n  return true\n}\n\nconst _formatRoiStyle = (style: {\n  stroke?: {\n    color?: number[]\n    width?: number\n  }\n  fill?: {\n    color?: number[]\n  }\n  radius?: number\n}): dmv.viewer.ROIStyleOptions => {\n  const stroke = {\n    color: DEFAULT_ROI_STROKE_COLOR,\n    width: DEFAULT_ROI_STROKE_WIDTH\n  }\n  if (style.stroke != null) {\n    if (style.stroke.color != null) {\n      stroke.color = style.stroke.color\n    }\n    if (style.stroke.width != null) {\n      stroke.width = style.stroke.width\n    }\n  }\n  const fill = {\n    color: DEFAULT_ROI_FILL_COLOR\n  }\n  if (style.fill != null) {\n    if (style.fill.color != null) {\n      fill.color = style.fill.color\n    }\n  }\n  return {\n    stroke,\n    fill,\n    image: {\n      circle: {\n        radius: style.radius != null\n          ? style.radius\n          : Math.max(5 - stroke.width, 1),\n        stroke,\n        fill\n      }\n    }\n  }\n}\n\nconst _constructViewers = ({ clients, slide, preload }: {\n  clients: { [key: string]: dwc.api.DICOMwebClient }\n  slide: Slide\n  preload?: boolean\n}): {\n  volumeViewer: dmv.viewer.VolumeImageViewer\n  labelViewer?: dmv.viewer.LabelImageViewer\n} => {\n  console.info(\n    'instantiate viewer for VOLUME images of slide ' +\n    `\"${slide.volumeImages[0].ContainerIdentifier}\"`\n  )\n  try {\n    const volumeViewer = new dmv.viewer.VolumeImageViewer({\n      clientMapping: clients,\n      metadata: slide.volumeImages,\n      controls: ['overview', 'position'],\n      preload: preload,\n      errorInterceptor: (error: CustomError) => {\n        NotificationMiddleware.onError(\n          NotificationMiddlewareContext.DMV, error\n        )\n      }\n    })\n    volumeViewer.activateSelectInteraction({})\n\n    let labelViewer\n    if (slide.labelImages.length > 0) {\n      console.info(\n        'instantiate viewer for LABEL image of slide ' +\n        `\"${slide.labelImages[0].ContainerIdentifier}\"`\n      )\n      labelViewer = new dmv.viewer.LabelImageViewer({\n        client: clients[StorageClasses.VL_WHOLE_SLIDE_MICROSCOPY_IMAGE],\n        metadata: slide.labelImages[0],\n        resizeFactor: 1,\n        orientation: 'vertical',\n        errorInterceptor: (error: CustomError) => {\n          NotificationMiddleware.onError(\n            NotificationMiddlewareContext.DMV,\n            error\n          )\n        }\n      })\n    }\n\n    return { volumeViewer, labelViewer }\n  } catch (error) {\n    // eslint-disable-next-line @typescript-eslint/no-floating-promises\n    NotificationMiddleware.onError(\n      NotificationMiddlewareContext.SLIM,\n      new CustomError(\n        errorTypes.VISUALIZATION,\n        'Failed to instantiate viewer'\n      )\n    )\n    throw error\n  }\n}\n\n/*\n * Check whether the report is structured according to template\n * TID 1500 \"MeasurementReport\".\n */\nconst _implementsTID1500 = (\n  report: dmv.metadata.Comprehensive3DSR\n): boolean => {\n  const templateSeq = report.ContentTemplateSequence\n  if (templateSeq.length > 0) {\n    const tid = templateSeq[0].TemplateIdentifier\n    if (tid === '1500') {\n      return true\n    }\n  }\n  return false\n}\n\n/*\n * Check whether the subject described in the report is a specimen as compared\n * to a patient, fetus, or device.\n */\nconst _describesSpecimenSubject = (\n  report: dmv.metadata.Comprehensive3DSR\n): boolean => {\n  const items = findContentItemsByName({\n    content: report.ContentSequence,\n    name: new dcmjs.sr.coding.CodedConcept({\n      value: '121024',\n      schemeDesignator: 'DCM',\n      meaning: 'Subject Class'\n    })\n  })\n  if (items.length === 0) {\n    return false\n  }\n  const subjectClassItem = items[0] as dcmjs.sr.valueTypes.CodeContentItem\n  const subjectClassValue = subjectClassItem.ConceptCodeSequence[0]\n  const retrievedConcept = new dcmjs.sr.coding.CodedConcept({\n    value: subjectClassValue.CodeValue,\n    meaning: subjectClassValue.CodeMeaning,\n    schemeDesignator: subjectClassValue.CodingSchemeDesignator\n  })\n  const expectedConcept = new dcmjs.sr.coding.CodedConcept({\n    value: '121027',\n    meaning: 'Specimen',\n    schemeDesignator: 'DCM'\n  })\n  if (retrievedConcept.equals(expectedConcept)) {\n    return true\n  }\n  return false\n}\n\n/*\n * Check whether the report contains appropriate graphic ROI annotations.\n */\nconst _containsROIAnnotations = (\n  report: dmv.metadata.Comprehensive3DSR\n): boolean => {\n  const measurements = findContentItemsByName({\n    content: report.ContentSequence,\n    name: new dcmjs.sr.coding.CodedConcept({\n      value: '126010',\n      schemeDesignator: 'DCM',\n      meaning: 'Imaging Measurements'\n    })\n  })\n  if (measurements.length === 0) {\n    return false\n  }\n  const container = measurements[0] as dcmjs.sr.valueTypes.ContainerContentItem\n  const measurementGroups = findContentItemsByName({\n    content: container.ContentSequence,\n    name: new dcmjs.sr.coding.CodedConcept({\n      value: '125007',\n      schemeDesignator: 'DCM',\n      meaning: 'Measurement Group'\n    })\n  })\n\n  let foundRegion = false\n  measurementGroups.forEach((group) => {\n    const container = group as dcmjs.sr.valueTypes.ContainerContentItem\n    const regions = findContentItemsByName({\n      content: container.ContentSequence,\n      name: new dcmjs.sr.coding.CodedConcept({\n        value: '111030',\n        schemeDesignator: 'DCM',\n        meaning: 'Image Region'\n      })\n    })\n    if (regions.length > 0) {\n      if (regions[0].ValueType === dcmjs.sr.valueTypes.ValueTypes.SCOORD3D) {\n        foundRegion = true\n      }\n    }\n  })\n\n  return foundRegion\n}\n\ninterface EvaluationOptions {\n  name: dcmjs.sr.coding.CodedConcept\n  values: dcmjs.sr.coding.CodedConcept[]\n}\n\ninterface Evaluation {\n  name: dcmjs.sr.coding.CodedConcept\n  value: dcmjs.sr.coding.CodedConcept\n}\n\ninterface Measurement {\n  name: dcmjs.sr.coding.CodedConcept\n  value?: number\n  unit: dcmjs.sr.coding.CodedConcept\n}\n\ninterface SlideViewerProps extends RouteComponentProps {\n  slide: Slide\n  clients: { [key: string]: DicomWebManager }\n  studyInstanceUID: string\n  seriesInstanceUID: string\n  app: {\n    name: string\n    version: string\n    uid: string\n    organization?: string\n  }\n  preload?: boolean\n  annotations: AnnotationSettings[]\n  enableAnnotationTools: boolean\n  user?: {\n    name: string\n    email: string\n  }\n  selectedPresentationStateUID?: string\n}\n\ninterface SlideViewerState {\n  visibleRoiUIDs: Set<string>\n  visibleSegmentUIDs: Set<string>\n  visibleMappingUIDs: Set<string>\n  visibleAnnotationGroupUIDs: Set<string>\n  visibleOpticalPathIdentifiers: Set<string>\n  activeOpticalPathIdentifiers: Set<string>\n  presentationStates: dmv.metadata.AdvancedBlendingPresentationState[]\n  selectedPresentationStateUID?: string\n  selectedFinding?: dcmjs.sr.coding.CodedConcept\n  selectedEvaluations: Evaluation[]\n  selectedGeometryType?: string\n  selectedMarkup?: string\n  selectedRoi?: dmv.roi.ROI\n  selectedRoiUIDs: Set<string>\n  generatedReport?: dmv.metadata.Comprehensive3DSR\n  isLoading: boolean\n  isAnnotationModalVisible: boolean\n  isSelectedRoiModalVisible: boolean\n  isHoveredRoiTooltipVisible: boolean\n  hoveredRoi?: dmv.roi.ROI\n  hoveredRoiAttributes: Array<{ name: string, value: string }>\n  hoveredRoiTooltipX: number\n  hoveredRoiTooltipY: number\n  isReportModalVisible: boolean\n  isRoiDrawingActive: boolean\n  isRoiModificationActive: boolean\n  isRoiTranslationActive: boolean\n  isGoToModalVisible: boolean\n  isSelectedMagnificationValid: boolean\n  isSelectedXCoordinateValid: boolean\n  isSelectedYCoordinateValid: boolean\n  selectedXCoordinate?: number\n  validXCoordinateRange: number[]\n  selectedYCoordinate?: number\n  validYCoordinateRange: number[]\n  selectedMagnification?: number\n  areRoisHidden: boolean\n  pixelDataStatistics: {\n    [opticalPathIdentifier: string]: {\n      min: number\n      max: number\n      numFramesSampled: number\n    }\n  }\n  loadingFrames: Set<string>\n}\n\n/**\n * React component for interactive viewing of an individual digital slide,\n * which corresponds to one DICOM Series of DICOM Slide Microscopy images and\n * potentially one or more associated DICOM Series of DICOM SR documents.\n */\nclass SlideViewer extends React.Component<SlideViewerProps, SlideViewerState> {\n  private readonly findingOptions: dcmjs.sr.coding.CodedConcept[] = []\n\n  private readonly evaluationOptions: { [key: string]: EvaluationOptions[] } = {}\n\n  private readonly measurements: Measurement[] = []\n\n  private readonly geometryTypeOptions: { [key: string]: string[] } = {}\n\n  private readonly volumeViewportRef: React.RefObject<HTMLDivElement>\n\n  private readonly labelViewportRef: React.RefObject<HTMLDivElement>\n\n  private volumeViewer: dmv.viewer.VolumeImageViewer\n\n  private labelViewer?: dmv.viewer.LabelImageViewer\n\n  private readonly defaultRoiStyle: dmv.viewer.ROIStyleOptions = {\n    stroke: {\n      color: DEFAULT_ROI_STROKE_COLOR,\n      width: DEFAULT_ROI_STROKE_WIDTH\n    },\n    fill: {\n      color: DEFAULT_ROI_FILL_COLOR\n    },\n    image: {\n      circle: {\n        fill: {\n          color: DEFAULT_ROI_STROKE_COLOR\n        },\n        radius: DEFAULT_ROI_RADIUS\n      }\n    }\n  }\n\n  private roiStyles: {[key: string]: dmv.viewer.ROIStyleOptions} = {}\n\n  private defaultAnnotationStyles: {\n    [annotationUID: string]: {\n      opacity: number\n      color: number[]\n    }\n  } = {}\n\n  private readonly selectionColor: number[] = [140, 184, 198]\n\n  private readonly selectedRoiStyle: dmv.viewer.ROIStyleOptions = {\n    stroke: { color: [...this.selectionColor, 1], width: 3 },\n    fill: { color: [...this.selectionColor, 0.2] },\n    image: {\n      circle: {\n        radius: 5,\n        fill: { color: [...this.selectionColor, 1] }\n      }\n    }\n  }\n\n  constructor (props: SlideViewerProps) {\n    super(props)\n    console.info(\n      `view slide \"${this.props.slide.containerIdentifier}\": `,\n      this.props.slide\n    )\n    const geometryTypeOptions = [\n      'point',\n      'circle',\n      'box',\n      'polygon',\n      'line',\n      'freehandpolygon',\n      'freehandline'\n    ]\n    props.annotations.forEach((annotation: AnnotationSettings) => {\n      const finding = new dcmjs.sr.coding.CodedConcept(annotation.finding)\n      this.findingOptions.push(finding)\n      const key = _buildKey(finding)\n      if (annotation.geometryTypes !== undefined) {\n        this.geometryTypeOptions[key] = annotation.geometryTypes\n      } else {\n        this.geometryTypeOptions[key] = geometryTypeOptions\n      }\n      this.evaluationOptions[key] = []\n      if (annotation.evaluations !== undefined) {\n        annotation.evaluations.forEach(evaluation => {\n          this.evaluationOptions[key].push({\n            name: new dcmjs.sr.coding.CodedConcept(evaluation.name),\n            values: evaluation.values.map(value => {\n              return new dcmjs.sr.coding.CodedConcept(value)\n            })\n          })\n        })\n      }\n      if (annotation.measurements !== undefined) {\n        annotation.measurements.forEach(measurement => {\n          this.measurements.push({\n            name: new dcmjs.sr.coding.CodedConcept(measurement.name),\n            value: undefined,\n            unit: new dcmjs.sr.coding.CodedConcept(measurement.unit)\n          })\n        })\n      }\n      if (annotation.style != null) {\n        this.roiStyles[key] = _formatRoiStyle(annotation.style)\n      } else {\n        this.roiStyles[key] = this.defaultRoiStyle\n      }\n    })\n\n    this.componentSetup = this.componentSetup.bind(this)\n    this.componentCleanup = this.componentCleanup.bind(this)\n\n    this.onWindowResize = this.onWindowResize.bind(this)\n    this.handleRoiDrawing = this.handleRoiDrawing.bind(this)\n    this.handleRoiTranslation = this.handleRoiTranslation.bind(this)\n    this.handleRoiModification = this.handleRoiModification.bind(this)\n    this.handleRoiVisibilityChange = this.handleRoiVisibilityChange.bind(this)\n    this.handleRoiRemoval = this.handleRoiRemoval.bind(this)\n    this.handleRoiSelectionCancellation = this.handleRoiSelectionCancellation.bind(this)\n    this.handleAnnotationConfigurationCancellation = this.handleAnnotationConfigurationCancellation.bind(this)\n    this.handleAnnotationGeometryTypeSelection = this.handleAnnotationGeometryTypeSelection.bind(this)\n    this.handleAnnotationMeasurementActivation = this.handleAnnotationMeasurementActivation.bind(this)\n    this.handleAnnotationFindingSelection = this.handleAnnotationFindingSelection.bind(this)\n    this.handleAnnotationEvaluationSelection = this.handleAnnotationEvaluationSelection.bind(this)\n    this.handleAnnotationEvaluationClearance = this.handleAnnotationEvaluationClearance.bind(this)\n    this.handleAnnotationConfigurationCompletion = this.handleAnnotationConfigurationCompletion.bind(this)\n    this.handleAnnotationSelection = this.handleAnnotationSelection.bind(this)\n    this.handleAnnotationVisibilityChange = this.handleAnnotationVisibilityChange.bind(this)\n    this.handleAnnotationGroupVisibilityChange = this.handleAnnotationGroupVisibilityChange.bind(this)\n    this.handleAnnotationGroupStyleChange = this.handleAnnotationGroupStyleChange.bind(this)\n    this.handleRoiStyleChange = this.handleRoiStyleChange.bind(this)\n    this.handleGoTo = this.handleGoTo.bind(this)\n    this.handleXCoordinateSelection = this.handleXCoordinateSelection.bind(this)\n    this.handleYCoordinateSelection = this.handleYCoordinateSelection.bind(this)\n    this.handleMagnificationSelection = this.handleMagnificationSelection.bind(this)\n    this.handleSlidePositionSelection = this.handleSlidePositionSelection.bind(this)\n    this.handleSlidePositionSelectionCancellation = this.handleSlidePositionSelectionCancellation.bind(this)\n    this.handleReportGeneration = this.handleReportGeneration.bind(this)\n    this.handleReportVerification = this.handleReportVerification.bind(this)\n    this.handleReportCancellation = this.handleReportCancellation.bind(this)\n    this.handleSegmentVisibilityChange = this.handleSegmentVisibilityChange.bind(this)\n    this.handleSegmentStyleChange = this.handleSegmentStyleChange.bind(this)\n    this.handleMappingVisibilityChange = this.handleMappingVisibilityChange.bind(this)\n    this.handleMappingStyleChange = this.handleMappingStyleChange.bind(this)\n    this.handleOpticalPathVisibilityChange = this.handleOpticalPathVisibilityChange.bind(this)\n    this.handleOpticalPathStyleChange = this.handleOpticalPathStyleChange.bind(this)\n    this.handleOpticalPathActivityChange = this.handleOpticalPathActivityChange.bind(this)\n    this.handlePresentationStateSelection = this.handlePresentationStateSelection.bind(this)\n    this.handlePresentationStateReset = this.handlePresentationStateReset.bind(this)\n\n    const { volumeViewer, labelViewer } = _constructViewers({\n      clients: this.props.clients,\n      slide: this.props.slide,\n      preload: this.props.preload\n    })\n    this.volumeViewer = volumeViewer\n    this.labelViewer = labelViewer\n    this.volumeViewportRef = React.createRef<HTMLDivElement>()\n    this.labelViewportRef = React.createRef<HTMLDivElement>()\n\n    /**\n     * Deactivate all optical paths. Visibility will be set later, potentially\n     * using based on available presentation state instances.\n     */\n    this.volumeViewer.getAllOpticalPaths().forEach(opticalPath => {\n      this.volumeViewer.deactivateOpticalPath(opticalPath.identifier)\n    })\n\n    const [offset, size] = this.volumeViewer.boundingBox\n\n    this.state = {\n      selectedRoiUIDs: new Set(),\n      visibleRoiUIDs: new Set(),\n      visibleSegmentUIDs: new Set(),\n      visibleMappingUIDs: new Set(),\n      visibleAnnotationGroupUIDs: new Set(),\n      visibleOpticalPathIdentifiers: new Set(),\n      activeOpticalPathIdentifiers: new Set(),\n      presentationStates: [],\n      selectedFinding: undefined,\n      selectedEvaluations: [],\n      generatedReport: undefined,\n      isLoading: false,\n      isAnnotationModalVisible: false,\n      isSelectedRoiModalVisible: false,\n      isHoveredRoiTooltipVisible: false,\n      hoveredRoiTooltipX: 0,\n      hoveredRoiTooltipY: 0,\n      hoveredRoiAttributes: [],\n      isSelectedMagnificationValid: false,\n      isReportModalVisible: false,\n      isRoiDrawingActive: false,\n      isRoiTranslationActive: false,\n      isRoiModificationActive: false,\n      isGoToModalVisible: false,\n      isSelectedXCoordinateValid: false,\n      isSelectedYCoordinateValid: false,\n      selectedXCoordinate: undefined,\n      validXCoordinateRange: [offset[0], offset[0] + size[0]],\n      selectedYCoordinate: undefined,\n      validYCoordinateRange: [offset[1], offset[1] + size[1]],\n      selectedMagnification: undefined,\n      areRoisHidden: false,\n      pixelDataStatistics: {},\n      selectedPresentationStateUID: this.props.selectedPresentationStateUID,\n      loadingFrames: new Set()\n    }\n  }\n\n  componentDidUpdate (\n    previousProps: SlideViewerProps,\n    previousState: SlideViewerState\n  ): void {\n    /** Fetch data and update the viewports if the route has changed (\n     * i.e., if another series has been selected) or if the client has changed.\n     */\n    if (\n      this.props.location.pathname !== previousProps.location.pathname ||\n      this.props.studyInstanceUID !== previousProps.studyInstanceUID ||\n      this.props.seriesInstanceUID !== previousProps.seriesInstanceUID ||\n      this.props.slide !== previousProps.slide ||\n      this.props.clients !== previousProps.clients\n    ) {\n      if (this.volumeViewportRef.current != null) {\n        this.volumeViewportRef.current.innerHTML = ''\n      }\n      this.volumeViewer.cleanup()\n      if (this.labelViewer != null) {\n        if (this.labelViewportRef.current != null) {\n          this.labelViewportRef.current.innerHTML = ''\n        }\n        this.labelViewer.cleanup()\n      }\n      const { volumeViewer, labelViewer } = _constructViewers({\n        clients: this.props.clients,\n        slide: this.props.slide,\n        preload: this.props.preload\n      })\n      this.volumeViewer = volumeViewer\n      this.labelViewer = labelViewer\n\n      const activeOpticalPathIdentifiers: Set<string> = new Set()\n      const visibleOpticalPathIdentifiers: Set<string> = new Set()\n      this.volumeViewer.getAllOpticalPaths().forEach(opticalPath => {\n        const identifier = opticalPath.identifier\n        if (this.volumeViewer.isOpticalPathVisible(identifier)) {\n          visibleOpticalPathIdentifiers.add(identifier)\n        }\n        if (this.volumeViewer.isOpticalPathActive(identifier)) {\n          activeOpticalPathIdentifiers.add(identifier)\n        }\n      })\n\n      const [offset, size] = this.volumeViewer.boundingBox\n\n      this.setState({\n        visibleRoiUIDs: new Set(),\n        visibleSegmentUIDs: new Set(),\n        visibleMappingUIDs: new Set(),\n        visibleAnnotationGroupUIDs: new Set(),\n        visibleOpticalPathIdentifiers,\n        activeOpticalPathIdentifiers,\n        presentationStates: [],\n        loadingFrames: new Set(),\n        validXCoordinateRange: [offset[0], offset[0] + size[0]],\n        validYCoordinateRange: [offset[1], offset[1] + size[1]]\n      })\n      this.populateViewports()\n    }\n  }\n\n  /**\n   * Retrieve Presentation State instances that reference the any images of\n   * the currently selected series.\n   */\n  loadPresentationStates = (): void => {\n    console.info('search for Presentation State instances')\n    const client = this.props.clients[\n      StorageClasses.ADVANCED_BLENDING_PRESENTATION_STATE\n    ]\n    client.searchForInstances({\n      studyInstanceUID: this.props.studyInstanceUID,\n      queryParams: {\n        Modality: 'PR'\n      }\n    }).then((matchedInstances): void => {\n      if (matchedInstances == null) {\n        matchedInstances = []\n      }\n      matchedInstances.forEach((rawInstance, index) => {\n        const { dataset } = dmv.metadata.formatMetadata(rawInstance)\n        const instance = dataset as dmv.metadata.Instance\n        console.info(`retrieve PR instance \"${instance.SOPInstanceUID}\"`)\n        client.retrieveInstance({\n          studyInstanceUID: this.props.studyInstanceUID,\n          seriesInstanceUID: instance.SeriesInstanceUID,\n          sopInstanceUID: instance.SOPInstanceUID\n        }).then((retrievedInstance): void => {\n          const data = dcmjs.data.DicomMessage.readFile(retrievedInstance)\n          const { dataset } = dmv.metadata.formatMetadata(data.dict)\n          if (this.props.slide.areVolumeImagesMonochrome) {\n            const presentationState = (\n              dataset as\n              unknown as\n              dmv.metadata.AdvancedBlendingPresentationState\n            )\n            let doesMatch = false\n            presentationState.AdvancedBlendingSequence.forEach(blendingItem => {\n              doesMatch = this.props.slide.seriesInstanceUIDs.includes(\n                blendingItem.SeriesInstanceUID\n              )\n            }\n            )\n            if (doesMatch) {\n              console.info(\n                'include Advanced Blending Presentation State instance ' +\n                `\"${presentationState.SOPInstanceUID}\"`\n              )\n              if (\n                index === 0 &&\n                this.props.selectedPresentationStateUID == null\n              ) {\n                this.setPresentationState(presentationState)\n              } else {\n                if (\n                  presentationState.SOPInstanceUID ===\n                  this.props.selectedPresentationStateUID\n                ) {\n                  this.setPresentationState(presentationState)\n                }\n              }\n              this.setState(state => {\n                const mapping: {\n                  [sopInstanceUID: string]:\n                  dmv.metadata.AdvancedBlendingPresentationState\n                } = {}\n                state.presentationStates.forEach(instance => {\n                  mapping[instance.SOPInstanceUID] = instance\n                })\n                mapping[presentationState.SOPInstanceUID] = presentationState\n                return { presentationStates: Object.values(mapping) }\n              })\n            }\n          } else {\n            console.info(\n              `ignore presentation state \"${instance.SOPInstanceUID}\", ` +\n              'application of presentation states for color images ' +\n              'has not (yet) been implemented'\n            )\n          }\n        }).catch((error) => {\n          // eslint-disable-next-line @typescript-eslint/no-floating-promises\n          NotificationMiddleware.onError(\n            NotificationMiddlewareContext.SLIM,\n            new CustomError(\n              errorTypes.VISUALIZATION,\n              'Presentation State could not be loaded'\n            )\n          )\n          console.error(\n            'failed to load presentation state ' +\n            `of SOP instance \"${instance.SOPInstanceUID}\" ` +\n            `of series \"${instance.SeriesInstanceUID}\" ` +\n            `of study \"${this.props.studyInstanceUID}\": `,\n            error\n          )\n        })\n      })\n    }).catch((error) => {\n      console.error(error)\n      // eslint-disable-next-line @typescript-eslint/no-floating-promises\n      NotificationMiddleware.onError(\n        NotificationMiddlewareContext.SLIM,\n        new CustomError(\n          errorTypes.VISUALIZATION,\n          'Presentation State could not be loaded'\n        )\n      )\n    })\n  }\n\n  /**\n   * Set presentation state as specified by a DICOM Presentation State instance.\n   */\n  setPresentationState = (\n    presentationState: dmv.metadata.AdvancedBlendingPresentationState\n  ): void => {\n    const opticalPaths = this.volumeViewer.getAllOpticalPaths()\n    console.info(\n      `apply Presentation State instance \"${presentationState.SOPInstanceUID}\"`\n    )\n    const opticalPathStyles: {\n      [opticalPathIdentifier: string]: {\n        opacity: number\n        paletteColorLookupTable?: dmv.color.PaletteColorLookupTable\n        limitValues?: number[]\n      } | null\n    } = {}\n    opticalPaths.forEach(opticalPath => {\n      // First, deactivate and hide all optical paths and reset style\n      const identifier = opticalPath.identifier\n      this.volumeViewer.hideOpticalPath(identifier)\n      this.volumeViewer.deactivateOpticalPath(identifier)\n      const style = this.volumeViewer.getOpticalPathDefaultStyle(identifier)\n      this.volumeViewer.setOpticalPathStyle(identifier, style)\n\n      presentationState.AdvancedBlendingSequence.forEach(blendingItem => {\n        /**\n         * Referenced Instance Sequence should be used instead of Referenced\n         * Image Sequence, but that's easy to mix up and we have encountered\n         * implementations that get it wrong.\n         */\n        let refInstanceItems = blendingItem.ReferencedInstanceSequence\n        if (refInstanceItems === undefined) {\n          refInstanceItems = blendingItem.ReferencedImageSequence\n        }\n        if (refInstanceItems === undefined) {\n          return\n        }\n        refInstanceItems.forEach(imageItem => {\n          const isReferenced = opticalPath.sopInstanceUIDs.includes(\n            imageItem.ReferencedSOPInstanceUID\n          ) as boolean\n          if (isReferenced) {\n            let paletteColorLUT\n            if (blendingItem.PaletteColorLookupTableSequence != null) {\n              const cpLUTItem = blendingItem.PaletteColorLookupTableSequence[0]\n              paletteColorLUT = new dmv.color.PaletteColorLookupTable({\n                uid: (\n                  cpLUTItem.PaletteColorLookupTableUID != null\n                    ? cpLUTItem.PaletteColorLookupTableUID\n                    : ''\n                ),\n                redDescriptor:\n                  cpLUTItem.RedPaletteColorLookupTableDescriptor,\n                greenDescriptor:\n                  cpLUTItem.GreenPaletteColorLookupTableDescriptor,\n                blueDescriptor:\n                  cpLUTItem.BluePaletteColorLookupTableDescriptor,\n                redData: (\n                  (cpLUTItem.RedPaletteColorLookupTableData != null)\n                    ? new Uint16Array(\n                      cpLUTItem.RedPaletteColorLookupTableData\n                    )\n                    : undefined\n                ),\n                greenData: (\n                  (cpLUTItem.GreenPaletteColorLookupTableData != null)\n                    ? new Uint16Array(\n                      cpLUTItem.GreenPaletteColorLookupTableData\n                    )\n                    : undefined\n                ),\n                blueData: (\n                  (cpLUTItem.BluePaletteColorLookupTableData != null)\n                    ? new Uint16Array(\n                      cpLUTItem.BluePaletteColorLookupTableData\n                    )\n                    : undefined\n                ),\n                redSegmentedData: (\n                  (cpLUTItem.SegmentedRedPaletteColorLookupTableData != null)\n                    ? new Uint16Array(\n                      cpLUTItem.SegmentedRedPaletteColorLookupTableData\n                    )\n                    : undefined\n                ),\n                greenSegmentedData: (\n                  (cpLUTItem.SegmentedGreenPaletteColorLookupTableData != null)\n                    ? new Uint16Array(\n                      cpLUTItem.SegmentedGreenPaletteColorLookupTableData\n                    )\n                    : undefined\n                ),\n                blueSegmentedData: (\n                  (cpLUTItem.SegmentedBluePaletteColorLookupTableData != null)\n                    ? new Uint16Array(\n                      cpLUTItem.SegmentedBluePaletteColorLookupTableData\n                    )\n                    : undefined\n                )\n              })\n            }\n\n            let limitValues\n            if (blendingItem.SoftcopyVOILUTSequence != null) {\n              const voiLUTItem = blendingItem.SoftcopyVOILUTSequence[0]\n              const windowCenter = voiLUTItem.WindowCenter\n              const windowWidth = voiLUTItem.WindowWidth\n              limitValues = [\n                windowCenter - windowWidth * 0.5,\n                windowCenter + windowWidth * 0.5\n              ]\n            }\n\n            opticalPathStyles[identifier] = {\n              opacity: 1,\n              paletteColorLookupTable: paletteColorLUT,\n              limitValues: limitValues\n            }\n          }\n        })\n      })\n    })\n\n    const selectedOpticalPathIdentifiers: Set<string> = new Set()\n    Object.keys(opticalPathStyles).forEach(identifier => {\n      const styleOptions = opticalPathStyles[identifier]\n      if (styleOptions != null) {\n        this.volumeViewer.setOpticalPathStyle(identifier, styleOptions)\n        this.volumeViewer.activateOpticalPath(identifier)\n        this.volumeViewer.showOpticalPath(identifier)\n        selectedOpticalPathIdentifiers.add(identifier)\n      } else {\n        this.volumeViewer.hideOpticalPath(identifier)\n        this.volumeViewer.deactivateOpticalPath(identifier)\n      }\n    })\n    const searchParams = new URLSearchParams(this.props.location.search)\n    searchParams.set('state', presentationState.SOPInstanceUID)\n    this.props.navigate(\n      {\n        pathname: this.props.location.pathname,\n        search: searchParams.toString()\n      },\n      { replace: true }\n    )\n    this.setState(state => ({\n      activeOpticalPathIdentifiers: selectedOpticalPathIdentifiers,\n      visibleOpticalPathIdentifiers: selectedOpticalPathIdentifiers,\n      selectedPresentationStateUID: presentationState.SOPInstanceUID\n    }))\n  }\n\n  getRoiStyle = (key?: string): dmv.viewer.ROIStyleOptions => {\n    if (key == null) {\n      return this.defaultRoiStyle\n    }\n    if (this.roiStyles[key] !== undefined) {\n      return this.roiStyles[key]\n    }\n    return this.defaultRoiStyle\n  }\n\n  /**\n   * Retrieve Structured Report instances that contain regions of interests\n   * with 3D spatial coordinates defined in the same frame of reference as the\n   * currently selected series and add them to the VOLUME image viewer.\n   */\n  addAnnotations = (): void => {\n    console.info('search for Comprehensive 3D SR instances')\n    const client = this.props.clients[StorageClasses.COMPREHENSIVE_3D_SR]\n    client.searchForInstances({\n      studyInstanceUID: this.props.studyInstanceUID,\n      queryParams: {\n        Modality: 'SR'\n      }\n    }).then((matchedInstances): void => {\n      if (matchedInstances == null) {\n        matchedInstances = []\n      }\n      matchedInstances.forEach(i => {\n        const { dataset } = dmv.metadata.formatMetadata(i)\n        const instance = dataset as dmv.metadata.Instance\n        if (instance.SOPClassUID === StorageClasses.COMPREHENSIVE_3D_SR) {\n          console.info(`retrieve SR instance \"${instance.SOPInstanceUID}\"`)\n          client.retrieveInstance({\n            studyInstanceUID: this.props.studyInstanceUID,\n            seriesInstanceUID: instance.SeriesInstanceUID,\n            sopInstanceUID: instance.SOPInstanceUID\n          }).then((retrievedInstance): void => {\n            const data = dcmjs.data.DicomMessage.readFile(retrievedInstance)\n            const { dataset } = dmv.metadata.formatMetadata(data.dict)\n            const report = dataset as unknown as dmv.metadata.Comprehensive3DSR\n            /*\n             * Perform a couple of checks to ensure the document content of the\n             * report fullfils the requirements of the application.\n             */\n            if (!_implementsTID1500(report)) {\n              console.debug(\n                `ignore SR document \"${report.SOPInstanceUID}\" ` +\n                'because it is not structured according to template ' +\n                'TID 1500 \"MeasurementReport\"'\n              )\n              return\n            }\n            if (!_describesSpecimenSubject(report)) {\n              console.debug(\n                `ignore SR document \"${report.SOPInstanceUID}\" ` +\n                'because it does not describe a specimen subject'\n              )\n              return\n            }\n            if (!_containsROIAnnotations(report)) {\n              console.debug(\n                `ignore SR document \"${report.SOPInstanceUID}\" ` +\n                'because it does not contain any suitable ROI annotations'\n              )\n              return\n            }\n\n            const content = new MeasurementReport(report)\n            content.ROIs.forEach(roi => {\n              console.info(`add ROI \"${roi.uid}\"`)\n              const scoord3d = roi.scoord3d\n              const image = this.props.slide.volumeImages[0]\n              if (scoord3d.frameOfReferenceUID === image.FrameOfReferenceUID) {\n                /*\n                 * ROIs may get assigned new UIDs upon re-rendering of the\n                 * page and we need to ensure that we don't add them twice.\n                 * The same ROI may be stored in multiple SR documents and\n                 * we don't want them to show up twice.\n                 * TODO: We should probably either \"merge\" measurements and\n                 * quantitative evaluations or pick the ROI from the \"best\"\n                 * available report (COMPLETE and VERIFIED).\n                 */\n                const doesROIExist = this.volumeViewer.getAllROIs().some(\n                  (otherROI: dmv.roi.ROI): boolean => {\n                    return _areROIsEqual(otherROI, roi)\n                  }\n                )\n                if (!doesROIExist) {\n                  try {\n                    // Add ROI without style such that it won't be visible.\n                    this.volumeViewer.addROI(roi, {})\n                  } catch {\n                    console.error(`could not add ROI \"${roi.uid}\"`)\n                  }\n                } else {\n                  console.debug(`skip already existing ROI \"${roi.uid}\"`)\n                }\n              } else {\n                console.debug(\n                  `skip ROI \"${roi.uid}\" ` +\n                  `of SR document \"${report.SOPInstanceUID}\"` +\n                  'because it is defined in another frame of reference'\n                )\n              }\n            })\n          }).catch((error) => {\n            // eslint-disable-next-line @typescript-eslint/no-floating-promises\n            NotificationMiddleware.onError(\n              NotificationMiddlewareContext.SLIM,\n              new CustomError(\n                errorTypes.VISUALIZATION,\n                'Annotations could not be loaded'\n              )\n            )\n            console.error(\n              'failed to load ROIs ' +\n              `of SOP instance \"${instance.SOPInstanceUID}\" ` +\n              `of series \"${instance.SeriesInstanceUID}\" ` +\n              `of study \"${this.props.studyInstanceUID}\": `,\n              error\n            )\n          })\n          /*\n           * React is not aware of the fact that ROIs have been added via the\n           * viewer (the viewport is a ref object) and won't show the\n           * annotations in the user interface unless an update is forced.\n           */\n          this.forceUpdate()\n        }\n      })\n    }).catch((error) => {\n      console.error(error)\n      // eslint-disable-next-line @typescript-eslint/no-floating-promises\n      NotificationMiddleware.onError(\n        NotificationMiddlewareContext.SLIM,\n        new CustomError(\n          errorTypes.VISUALIZATION,\n          'Annotations could not be loaded'\n        )\n      )\n    })\n  }\n\n  /**\n   * Retrieve Microscopy Bulk Simple Annotations instances that contain\n   * annotation groups defined in the same frame of reference as the currently\n   * selected series and add them to the VOLUME image viewer.\n   */\n  addAnnotationGroups = (): void => {\n    console.info('search for Microscopy Bulk Simple Annotations instances')\n    const client = this.props.clients[\n      StorageClasses.MICROSCOPY_BULK_SIMPLE_ANNOTATION\n    ]\n    client.searchForSeries({\n      studyInstanceUID: this.props.studyInstanceUID,\n      queryParams: {\n        Modality: 'ANN'\n      }\n    }).then((matchedSeries): void => {\n      if (matchedSeries == null) {\n        matchedSeries = []\n      }\n      matchedSeries.forEach(s => {\n        const { dataset } = dmv.metadata.formatMetadata(s)\n        const series = dataset as dmv.metadata.Series\n        client.retrieveSeriesMetadata({\n          studyInstanceUID: this.props.studyInstanceUID,\n          seriesInstanceUID: series.SeriesInstanceUID\n        }).then((retrievedMetadata): void => {\n          const annotations: dmv.metadata.MicroscopyBulkSimpleAnnotations[] = retrievedMetadata.map(metadata => {\n            return new dmv.metadata.MicroscopyBulkSimpleAnnotations({\n              metadata\n            })\n          })\n          // annotations = annotations.filter(ann => {\n          //   const refImage = this.props.slide.volumeImages[0]\n          //   return (\n          //     ann.FrameOfReferenceUID === refImage.FrameOfReferenceUID &&\n          //     ann.ContainerIdentifier === refImage.ContainerIdentifier\n          //   )\n          // })\n          annotations.forEach(ann => {\n            try {\n              this.volumeViewer.addAnnotationGroups(ann)\n            } catch (error: any) {\n              // eslint-disable-next-line @typescript-eslint/no-floating-promises\n              NotificationMiddleware.onError(\n                NotificationMiddlewareContext.SLIM,\n                new CustomError(\n                  errorTypes.VISUALIZATION,\n                  'Microscopy Bulk Simple Annotations cannot be displayed.'\n                )\n              )\n              // eslint-disable-next-line @typescript-eslint/no-floating-promises\n              console.error('failed to add annotation groups:', error)\n            }\n            ann.AnnotationGroupSequence.forEach(item => {\n              const annotationGroupUID = item.AnnotationGroupUID\n              const finding = item.AnnotationPropertyTypeCodeSequence[0]\n              const key = _buildKey(finding)\n              const style = this.roiStyles[key]\n              // eslint-disable-next-line @typescript-eslint/prefer-optional-chain\n              if (style != null && style.fill != null) {\n                this.volumeViewer.setAnnotationGroupStyle(\n                  annotationGroupUID,\n                  { color: style.fill.color }\n                )\n              }\n            })\n          })\n          /*\n           * React is not aware of the fact that annotation groups have been\n           * added via the viewer (the underlying HTML viewport element is a\n           * ref object) and won't show the annotation groups in the user\n           * interface unless an update is forced.\n           */\n          this.forceUpdate()\n        }).catch((error) => {\n          console.error(error)\n          // eslint-disable-next-line @typescript-eslint/no-floating-promises\n          NotificationMiddleware.onError(\n            NotificationMiddlewareContext.SLIM,\n            new CustomError(\n              errorTypes.VISUALIZATION,\n              'Retrieval of metadata of Microscopy Bulk Simple Annotations ' +\n              'instances failed.'\n            )\n          )\n        })\n      })\n    }).catch((error) => {\n      console.error(error)\n      // eslint-disable-next-line @typescript-eslint/no-floating-promises\n      NotificationMiddleware.onError(\n        NotificationMiddlewareContext.SLIM,\n        new CustomError(\n          errorTypes.VISUALIZATION,\n          'Search for Microscopy Bulk Simple Annotations instances failed.'\n        )\n      )\n    })\n  }\n\n  /**\n   * Retrieve Segmentation instances that contain segments defined in the same\n   * frame of reference as the currently selected series and add them to the\n   * VOLUME image viewer.\n   */\n  addSegmentations = (): void => {\n    console.info('search for Segmentation instances')\n    const client = this.props.clients[StorageClasses.SEGMENTATION]\n    client.searchForSeries({\n      studyInstanceUID: this.props.studyInstanceUID,\n      queryParams: {\n        Modality: 'SEG'\n      }\n    }).then((matchedSeries): void => {\n      if (matchedSeries == null) {\n        matchedSeries = []\n      }\n      matchedSeries.forEach((s, i) => {\n        const { dataset } = dmv.metadata.formatMetadata(s)\n        const series = dataset as dmv.metadata.Series\n        client.retrieveSeriesMetadata({\n          studyInstanceUID: this.props.studyInstanceUID,\n          seriesInstanceUID: series.SeriesInstanceUID\n        }).then((retrievedMetadata): void => {\n          const segmentations: dmv.metadata.Segmentation[] = []\n          retrievedMetadata.forEach(metadata => {\n            const seg = new dmv.metadata.Segmentation({ metadata })\n            const refImage = this.props.slide.volumeImages[0]\n            if (\n              seg.FrameOfReferenceUID === refImage.FrameOfReferenceUID &&\n              seg.ContainerIdentifier === refImage.ContainerIdentifier\n            ) {\n              segmentations.push(seg)\n            }\n          })\n          if (segmentations.length > 0) {\n            try {\n              this.volumeViewer.addSegments(segmentations)\n            } catch (error: any) {\n              // eslint-disable-next-line @typescript-eslint/no-floating-promises\n              NotificationMiddleware.onError(\n                NotificationMiddlewareContext.SLIM,\n                new CustomError(\n                  errorTypes.VISUALIZATION,\n                  'Segmentations cannot be displayed'\n                )\n              )\n              console.error('failed to add segments: ', error)\n            }\n            /*\n           * React is not aware of the fact that segments have been added via\n           * the viewer (the underlying HTML viewport element is a ref object)\n           * and won't show the segments in the user interface unless an update\n           * is forced.\n           */\n            this.forceUpdate()\n          }\n        }).catch((error) => {\n          console.error(error)\n          // eslint-disable-next-line @typescript-eslint/no-floating-promises\n          NotificationMiddleware.onError(\n            NotificationMiddlewareContext.SLIM,\n            new CustomError(\n              errorTypes.VISUALIZATION,\n              'Retrieval of metadata of Segmentation instances failed.'\n            )\n          )\n        })\n      })\n    }).catch((error) => {\n      console.error(error)\n      // eslint-disable-next-line @typescript-eslint/no-floating-promises\n      NotificationMiddleware.onError(\n        NotificationMiddlewareContext.SLIM,\n        new CustomError(\n          errorTypes.VISUALIZATION,\n          'Search for Segmentation instances failed.'\n        )\n      )\n    })\n  }\n\n  /**\n   * Retrieve Parametric Map instances that contain mappings defined in the same\n   * frame of reference as the currently selected series and add them to the\n   * VOLUME image viewer.\n   */\n  addParametricMaps = (): void => {\n    console.info('search for Parametric Map instances')\n    const client = this.props.clients[StorageClasses.PARAMETRIC_MAP]\n    client.searchForSeries({\n      studyInstanceUID: this.props.studyInstanceUID,\n      queryParams: {\n        Modality: 'OT'\n      }\n    }).then((matchedSeries): void => {\n      if (matchedSeries == null) {\n        matchedSeries = []\n      }\n      matchedSeries.forEach(s => {\n        const { dataset } = dmv.metadata.formatMetadata(s)\n        const series = dataset as dmv.metadata.Series\n        client.retrieveSeriesMetadata({\n          studyInstanceUID: this.props.studyInstanceUID,\n          seriesInstanceUID: series.SeriesInstanceUID\n        }).then((retrievedMetadata): void => {\n          const parametricMaps: dmv.metadata.ParametricMap[] = []\n          retrievedMetadata.forEach(metadata => {\n            const pm = new dmv.metadata.ParametricMap({ metadata })\n            const refImage = this.props.slide.volumeImages[0]\n            if (\n              pm.FrameOfReferenceUID === refImage.FrameOfReferenceUID &&\n              pm.ContainerIdentifier === refImage.ContainerIdentifier\n            ) {\n              parametricMaps.push(pm)\n            } else {\n              console.warn(\n                `skip Parametric Map instance \"${pm.SOPInstanceUID}\"`\n              )\n            }\n          })\n          if (parametricMaps.length > 0) {\n            try {\n              this.volumeViewer.addParameterMappings(parametricMaps)\n            } catch (error: any) {\n              // eslint-disable-next-line @typescript-eslint/no-floating-promises\n              NotificationMiddleware.onError(\n                NotificationMiddlewareContext.SLIM,\n                new CustomError(\n                  errorTypes.VISUALIZATION,\n                  'Parametric Map cannot be displayed'\n                )\n              )\n              console.error('failed to add mappings: ', error)\n            }\n            /*\n           * React is not aware of the fact that mappings have been added via\n           * the viewer (the underlying HTML viewport element is a ref object)\n           * and won't show the mappings in the user interface unless an update\n           * is forced.\n           */\n            this.forceUpdate()\n          }\n        }).catch((error) => {\n          console.error(error)\n          // eslint-disable-next-line @typescript-eslint/no-floating-promises\n          NotificationMiddleware.onError(\n            NotificationMiddlewareContext.SLIM,\n            new CustomError(\n              errorTypes.VISUALIZATION,\n              'Retrieval of metadata of Parametric Map instances failed.'\n            )\n          )\n        })\n      })\n    }).catch((error) => {\n      console.error(error)\n      // eslint-disable-next-line @typescript-eslint/no-floating-promises\n      NotificationMiddleware.onError(\n        NotificationMiddlewareContext.SLIM,\n        new CustomError(\n          errorTypes.VISUALIZATION,\n          'Search for Parametric Map instances failed.'\n        )\n      )\n    })\n  }\n\n  /**\n   * Populate viewports of the VOLUME and LABEL image viewers.\n   */\n  populateViewports = (): void => {\n    console.info('populate viewports...')\n    this.setState({\n      isLoading: true,\n      presentationStates: []\n    })\n\n    if (this.volumeViewportRef.current != null) {\n      this.volumeViewer.render({ container: this.volumeViewportRef.current })\n    }\n    if (\n      this.labelViewportRef.current != null &&\n      this.labelViewer != null\n    ) {\n      this.labelViewer.render({ container: this.labelViewportRef.current })\n    }\n\n    // State update will also ensure that the component is re-rendered.\n    this.setState({ isLoading: false })\n\n    this.setDefaultPresentationState()\n    this.loadPresentationStates()\n\n    this.addAnnotations()\n    this.addAnnotationGroups()\n    this.addSegmentations()\n    this.addParametricMaps()\n  }\n\n  onRoiModified = (event: CustomEventInit): void => {\n    // Update state to trigger rendering\n    this.setState(state => ({\n      visibleRoiUIDs: new Set(state.visibleRoiUIDs)\n    }))\n  }\n\n  onWindowResize = (event: Event): void => {\n    console.info('resize viewports')\n    this.volumeViewer.resize()\n    if (this.labelViewer != null) {\n      this.labelViewer.resize()\n    }\n  }\n\n  onRoiDrawn = (event: CustomEventInit): void => {\n    const roi = event.detail.payload as dmv.roi.ROI\n    const selectedFinding = this.state.selectedFinding\n    const selectedEvaluations = this.state.selectedEvaluations\n    if (roi !== undefined && selectedFinding !== undefined) {\n      console.debug(`add ROI \"${roi.uid}\"`)\n      const findingItem = new dcmjs.sr.valueTypes.CodeContentItem({\n        name: new dcmjs.sr.coding.CodedConcept({\n          value: '121071',\n          meaning: 'Finding',\n          schemeDesignator: 'DCM'\n        }),\n        value: selectedFinding,\n        relationshipType: 'CONTAINS'\n      })\n      roi.addEvaluation(findingItem)\n      selectedEvaluations.forEach((evaluation: Evaluation) => {\n        const item = new dcmjs.sr.valueTypes.CodeContentItem({\n          name: evaluation.name,\n          value: evaluation.value,\n          relationshipType: 'CONTAINS'\n        })\n        roi.addEvaluation(item)\n      })\n      const key = _buildKey(selectedFinding)\n      const style = this.getRoiStyle(key)\n      this.volumeViewer.addROI(roi, style)\n      this.setState(state => {\n        const visibleRoiUIDs = state.visibleRoiUIDs\n        visibleRoiUIDs.add(roi.uid)\n        return { visibleRoiUIDs }\n      })\n    } else {\n      console.debug(`could not add ROI \"${roi.uid}\"`)\n    }\n  }\n\n  onRoiDoubleClicked = (event: CustomEventInit): void => {\n    const selectedRoi = event.detail.payload as dmv.roi.ROI\n    if (selectedRoi != null) {\n      this.setState({\n        isSelectedRoiModalVisible: true\n      })\n    } else {\n      this.setState({\n        isSelectedRoiModalVisible: false\n      })\n    }\n  }\n\n  setHoveredRoiAttributes = (hoveredRoi: dmv.roi.ROI): void => {\n    const attributes: Array<{ name: string, value: string }> = []\n    hoveredRoi.evaluations.forEach((\n      item: (\n        dcmjs.sr.valueTypes.TextContentItem |\n        dcmjs.sr.valueTypes.CodeContentItem\n      )\n    ) => {\n      const nameValue = item.ConceptNameCodeSequence[0].CodeValue\n      const nameMeaning = item.ConceptNameCodeSequence[0].CodeMeaning\n      const name = `${nameMeaning}`\n      if (item.ValueType === dcmjs.sr.valueTypes.ValueTypes.CODE) {\n        const codeContentItem = item as dcmjs.sr.valueTypes.CodeContentItem\n        const valueMeaning = codeContentItem.ConceptCodeSequence[0].CodeMeaning\n        // For consistency with Segment and Annotation Group\n        if (nameValue === '276214006') {\n          attributes.push({\n            name: 'Property category',\n            value: `${valueMeaning}`\n          })\n        } else if (nameValue === '121071') {\n          attributes.push({\n            name: 'Property type',\n            value: `${valueMeaning}`\n          })\n        } else if (nameValue === '111001') {\n          attributes.push({\n            name: 'Algorithm Name',\n            value: `${valueMeaning}`\n          })\n        } else {\n          attributes.push({\n            name: name,\n            value: `${valueMeaning}`\n          })\n        }\n      } else if (item.ValueType === dcmjs.sr.valueTypes.ValueTypes.TEXT) {\n        const textContentItem = item as dcmjs.sr.valueTypes.TextContentItem\n        attributes.push({\n          name: name,\n          value: textContentItem.TextValue\n        })\n      }\n    })\n\n    this.setState({ hoveredRoiAttributes: attributes })\n  }\n\n  onPointerMove = (event: CustomEventInit): void => {\n    const { feature: hoveredRoi, event: evt } = event.detail.payload\n    if (hoveredRoi != null) {\n      const originalEvent = evt.originalEvent\n      this.setHoveredRoiAttributes(hoveredRoi)\n      this.setState({\n        isHoveredRoiTooltipVisible: true,\n        hoveredRoi,\n        hoveredRoiTooltipX: originalEvent.clientX,\n        hoveredRoiTooltipY: originalEvent.clientY\n      })\n    } else {\n      this.setState({\n        isHoveredRoiTooltipVisible: false\n      })\n    }\n  }\n\n  onRoiSelected = (event: CustomEventInit): void => {\n    const selectedRoi = event.detail.payload as dmv.roi.ROI\n    if (selectedRoi != null) {\n      console.debug(`selected ROI \"${selectedRoi.uid}\"`)\n      this.volumeViewer.setROIStyle(selectedRoi.uid, this.selectedRoiStyle)\n      const key = _getRoiKey(selectedRoi)\n      this.volumeViewer.getAllROIs().forEach((roi) => {\n        if (roi.uid !== selectedRoi.uid) {\n          this.volumeViewer.setROIStyle(roi.uid, this.getRoiStyle(key))\n        }\n      })\n      this.setState({\n        selectedRoiUIDs: new Set([selectedRoi.uid]),\n        selectedRoi: selectedRoi\n      })\n    } else {\n      this.setState({\n        selectedRoiUIDs: new Set(),\n        selectedRoi: undefined\n      })\n    }\n  }\n\n  handleRoiSelectionCancellation (): void {\n    this.setState({\n      isSelectedRoiModalVisible: false\n    })\n  }\n\n  onLoadingStarted = (event: CustomEventInit): void => {\n    this.setState({ isLoading: true })\n  }\n\n  onLoadingEnded = (event: CustomEventInit): void => {\n    this.setState({ isLoading: false })\n  }\n\n  onFrameLoadingStarted = (event: CustomEventInit): void => {\n    const frameInfo: {\n      studyInstanceUID: string\n      seriesInstanceUID: string\n      sopInstanceUID: string\n      sopClassUID: string\n      frameNumber: string\n      channelIdentifier: string\n    } = event.detail.payload\n    const key: string = `${frameInfo.sopInstanceUID}-${frameInfo.frameNumber}`\n    this.setState(state => {\n      state.loadingFrames.add(key)\n      return state\n    })\n  }\n\n  onFrameLoadingError = (event: CustomEventInit): void => {\n    console.error('Failed to load frame')\n  }\n\n  onLoadingError = (event: CustomEventInit): void => {\n    console.error('Failed to load data')\n    // eslint-disable-next-line @typescript-eslint/no-floating-promises\n    const message = (event.detail?.payload?.message === null ? 'Failed to load data' : event.detail?.payload?.message) as string\n    NotificationMiddleware.onError(\n      NotificationMiddlewareContext.SLIM,\n      new CustomError(\n        errorTypes.VISUALIZATION,\n        message\n      ) as any\n    )\n  }\n\n  onFrameLoadingEnded = (event: CustomEventInit): void => {\n    const frameInfo: {\n      studyInstanceUID: string\n      seriesInstanceUID: string\n      sopInstanceUID: string\n      sopClassUID: string\n      frameNumber: string\n      channelIdentifier: string\n      pixelArray: Uint8Array|Uint16Array|Float32Array|null\n    } = event.detail.payload\n    const key = `${frameInfo.sopInstanceUID}-${frameInfo.frameNumber}`\n    this.setState(state => {\n      state.loadingFrames.delete(key)\n      let isLoading: boolean = false\n      if (state.loadingFrames.size > 0) {\n        isLoading = true\n      }\n      return {\n        isLoading,\n        loadingFrames: state.loadingFrames\n      }\n    })\n    if (\n      frameInfo.sopClassUID === StorageClasses.VL_WHOLE_SLIDE_MICROSCOPY_IMAGE &&\n      this.props.slide.areVolumeImagesMonochrome\n    ) {\n      const opticalPathIdentifier = frameInfo.channelIdentifier\n      if (\n        !(opticalPathIdentifier in this.state.pixelDataStatistics) &&\n        frameInfo.pixelArray != null\n      ) {\n        /*\n         * There are limits on the number of arguments Math.min and Math.max\n         * functions can accept. Therefore, we compute values in smaller chunks.\n         */\n        const size = 2 ** 16\n        const chunks = Math.ceil(frameInfo.pixelArray.length / size)\n        let offset = 0\n        const minValues: number[] = []\n        const maxValues: number[] = []\n        for (let i = 0; i < chunks; i++) {\n          offset = i * size\n          const pixels = frameInfo.pixelArray.slice(offset, offset + size)\n          minValues.push(Math.min(...pixels))\n          maxValues.push(Math.max(...pixels))\n        }\n        const min = Math.min(...minValues)\n        const max = Math.max(...maxValues)\n        this.setState(state => {\n          const stats = state.pixelDataStatistics\n          if (stats[opticalPathIdentifier] != null) {\n            stats[opticalPathIdentifier] = {\n              min: Math.min(stats[opticalPathIdentifier].min, min),\n              max: Math.max(stats[opticalPathIdentifier].max, max),\n              numFramesSampled: stats[opticalPathIdentifier].numFramesSampled + 1\n            }\n          } else {\n            stats[opticalPathIdentifier] = {\n              min: min,\n              max: max,\n              numFramesSampled: 1\n            }\n          }\n          if (state.selectedPresentationStateUID == null) {\n            const style = {\n              ...this.volumeViewer.getOpticalPathStyle(opticalPathIdentifier)\n            }\n            style.limitValues = [\n              stats[opticalPathIdentifier].min,\n              stats[opticalPathIdentifier].max\n            ]\n            this.volumeViewer.setOpticalPathStyle(opticalPathIdentifier, style)\n          }\n          return state\n        })\n      }\n    }\n  }\n\n  onRoiRemoved = (event: CustomEventInit): void => {\n    const roi = event.detail.payload as dmv.roi.ROI\n    console.debug(`removed ROI \"${roi.uid}\"`)\n  }\n\n  componentCleanup (): void {\n    document.body.removeEventListener(\n      'dicommicroscopyviewer_roi_drawn',\n      this.onRoiDrawn\n    )\n    document.body.removeEventListener(\n      'dicommicroscopyviewer_roi_selected',\n      this.onRoiSelected\n    )\n    document.body.removeEventListener(\n      'dicommicroscopyviewer_roi_double_clicked',\n      this.onRoiDoubleClicked\n    )\n    document.body.removeEventListener(\n      'dicommicroscopyviewer_pointer_move',\n      this.onPointerMove\n    )\n    document.body.removeEventListener(\n      'dicommicroscopyviewer_roi_removed',\n      this.onRoiRemoved\n    )\n    document.body.removeEventListener(\n      'dicommicroscopyviewer_roi_modified',\n      this.onRoiModified\n    )\n    document.body.removeEventListener(\n      'dicommicroscopyviewer_loading_started',\n      this.onLoadingStarted\n    )\n    document.body.removeEventListener(\n      'dicommicroscopyviewer_loading_ended',\n      this.onLoadingEnded\n    )\n    document.body.removeEventListener(\n      'dicommicroscopyviewer_frame_loading_started',\n      this.onFrameLoadingStarted\n    )\n    document.body.removeEventListener(\n      'dicommicroscopyviewer_frame_loading_ended',\n      this.onFrameLoadingEnded\n    )\n    document.body.removeEventListener(\n      'keyup',\n      this.onKeyUp\n    )\n    window.removeEventListener('resize', this.onWindowResize)\n\n    this.volumeViewer.cleanup()\n    if (this.labelViewer != null) {\n      this.labelViewer.cleanup()\n    }\n    /*\n     * FIXME: React appears to not clean the content of referenced\n     * HTMLDivElement objects when the page is reloaded. As a consequence,\n     * optical paths and other display items cannot be toggled or updated after\n     * a manual page reload. I have tried using ref callbacks and passing the\n     * ref objects from the parent component via the props. Both didn't work\n     * either.\n     */\n  }\n\n  onKeyUp = (event: KeyboardEvent): void => {\n    if (event.key === 'Escape') {\n      if (this.state.isRoiDrawingActive) {\n        console.info('deactivate drawing of ROIs')\n        this.volumeViewer.deactivateDrawInteraction()\n        this.volumeViewer.activateSelectInteraction({})\n      } else if (this.state.isRoiModificationActive) {\n        console.info('deactivate modification of ROIs')\n        this.volumeViewer.deactivateModifyInteraction()\n        this.volumeViewer.activateSelectInteraction({})\n      } else if (this.state.isRoiTranslationActive) {\n        console.info('deactivate modification of ROIs')\n        this.volumeViewer.deactivateTranslateInteraction()\n        this.volumeViewer.activateSelectInteraction({})\n      }\n      this.setState({\n        isAnnotationModalVisible: false,\n        isSelectedRoiModalVisible: false,\n        isRoiTranslationActive: false,\n        isRoiDrawingActive: false,\n        isRoiModificationActive: false,\n        isGoToModalVisible: false\n      })\n    } else if (event.altKey) {\n      if (event.code === 'KeyD') {\n        this.handleRoiDrawing()\n      } else if (event.code === 'KeyM') {\n        this.handleRoiModification()\n      } else if (event.code === 'KeyT') {\n        this.handleRoiTranslation()\n      } else if (event.code === 'KeyR') {\n        this.handleRoiRemoval()\n      } else if (event.code === 'KeyV') {\n        this.handleRoiVisibilityChange()\n      } else if (event.code === 'KeyS') {\n        this.handleReportGeneration()\n      } else if (event.code === 'KeyG') {\n        this.handleGoTo()\n      }\n    }\n  }\n\n  componentWillUnmount (): void {\n    this.volumeViewer.cleanup()\n    if (this.labelViewer != null) {\n      this.labelViewer.cleanup()\n    }\n    window.removeEventListener('beforeunload', this.componentCleanup)\n  }\n\n  componentSetup (): void {\n    document.body.addEventListener(\n      'dicommicroscopyviewer_roi_drawn',\n      this.onRoiDrawn\n    )\n    document.body.addEventListener(\n      'dicommicroscopyviewer_roi_selected',\n      this.onRoiSelected\n    )\n    document.body.addEventListener(\n      'dicommicroscopyviewer_roi_double_clicked',\n      this.onRoiDoubleClicked\n    )\n    document.body.addEventListener(\n      'dicommicroscopyviewer_pointer_move',\n      this.onPointerMove\n    )\n    document.body.addEventListener(\n      'dicommicroscopyviewer_roi_removed',\n      this.onRoiRemoved\n    )\n    document.body.addEventListener(\n      'dicommicroscopyviewer_roi_modified',\n      this.onRoiModified\n    )\n    document.body.addEventListener(\n      'dicommicroscopyviewer_loading_started',\n      this.onLoadingStarted\n    )\n    document.body.addEventListener(\n      'dicommicroscopyviewer_loading_ended',\n      this.onLoadingEnded\n    )\n    document.body.addEventListener(\n      'dicommicroscopyviewer_loading_error',\n      this.onLoadingError\n    )\n    document.body.addEventListener(\n      'dicommicroscopyviewer_frame_loading_started',\n      this.onFrameLoadingStarted\n    )\n    document.body.addEventListener(\n      'dicommicroscopyviewer_frame_loading_ended',\n      this.onFrameLoadingEnded\n    )\n    document.body.addEventListener(\n      'dicommicroscopyviewer_frame_loading_error',\n      this.onFrameLoadingError\n    )\n    document.body.addEventListener(\n      'keyup',\n      this.onKeyUp\n    )\n    window.addEventListener('beforeunload', this.componentCleanup)\n    window.addEventListener('resize', this.onWindowResize)\n  }\n\n  componentDidMount (): void {\n    this.componentSetup()\n    this.populateViewports()\n\n    if (!this.props.slide.areVolumeImagesMonochrome) {\n      let hasICCProfile = false\n      const image = this.props.slide.volumeImages[0]\n      const metadataItem = image.OpticalPathSequence[0]\n      if (metadataItem.ICCProfile == null) {\n        if ('OpticalPathSequence' in image.bulkdataReferences) {\n          // @ts-expect-error\n          const bulkdataItem = image.bulkdataReferences.OpticalPathSequence[0]\n          if ('ICCProfile' in bulkdataItem) {\n            hasICCProfile = true\n          }\n        }\n      } else {\n        hasICCProfile = true\n      }\n      if (!hasICCProfile) {\n        // eslint-disable-next-line @typescript-eslint/no-floating-promises\n        message.warning('No ICC Profile was found for color images')\n      }\n    }\n  }\n\n  /**\n   * Handler that gets called when a finding has been selected for annotation.\n   *\n   * @param value - Code value of the coded finding that got selected\n   * @param option - Option that got selected\n   */\n  handleAnnotationFindingSelection (\n    value: string,\n    option: any\n  ): void {\n    this.findingOptions.forEach(finding => {\n      if (finding.CodeValue === value) {\n        console.info(`selected finding \"${finding.CodeMeaning}\"`)\n        this.setState({\n          selectedFinding: finding,\n          selectedEvaluations: []\n        })\n      }\n    })\n  }\n\n  /**\n   * Handler that gets called when a geometry type has been selected for\n   * annotation.\n   *\n   * @param value - Code value of the coded finding that got selected\n   * @param option - Option that got selected\n   */\n  handleAnnotationGeometryTypeSelection (value: string, option: any): void {\n    this.setState({ selectedGeometryType: value })\n  }\n\n  /**\n   * Handler that gets called when measurements have been selected for\n   * annotation.\n   */\n  handleAnnotationMeasurementActivation (event: any): void {\n    const active: boolean = event.target.checked\n    if (active) {\n      this.setState({ selectedMarkup: 'measurement' })\n    } else {\n      this.setState({ selectedMarkup: undefined })\n    }\n  }\n\n  /**\n   * Handler that gets called when an evaluation has been selected for an\n   * annotation.\n   *\n   * @param value - Code value of the coded evaluation that got selected\n   * @param option - Option that got selected\n   */\n  handleAnnotationEvaluationSelection (\n    value: string,\n    option: any\n  ): void {\n    const selectedFinding = this.state.selectedFinding\n    if (selectedFinding !== undefined) {\n      const key = _buildKey(selectedFinding)\n      const name = option.label\n      this.evaluationOptions[key].forEach(evaluation => {\n        if (\n          evaluation.name.CodeValue === name.CodeValue &&\n          evaluation.name.CodingSchemeDesignator === name.CodingSchemeDesignator\n        ) {\n          evaluation.values.forEach(code => {\n            if (code.CodeValue === value) {\n              const filteredEvaluations = this.state.selectedEvaluations.filter(\n                (item: Evaluation) => item.name !== evaluation.name\n              )\n              this.setState({\n                selectedEvaluations: [\n                  ...filteredEvaluations,\n                  { name: name, value: code }\n                ]\n              })\n            }\n          })\n        }\n      })\n    }\n  }\n\n  /**\n   * Handler that gets called when an evaluation has been cleared for an\n   * annotation.\n   */\n  handleAnnotationEvaluationClearance (): void {\n    this.setState({\n      selectedEvaluations: []\n    })\n  }\n\n  handleXCoordinateSelection (value: any): void {\n    if (value != null) {\n      const x = Number(value)\n      const start = this.state.validXCoordinateRange[0]\n      const end = this.state.validXCoordinateRange[1]\n      if (x >= start && x <= end) {\n        this.setState({\n          selectedXCoordinate: x,\n          isSelectedXCoordinateValid: true\n        })\n        return\n      }\n    }\n    this.setState({\n      selectedXCoordinate: undefined,\n      isSelectedXCoordinateValid: false\n    })\n  }\n\n  handleYCoordinateSelection (value: any): void {\n    if (value != null) {\n      const y = Number(value)\n      const start = this.state.validYCoordinateRange[0]\n      const end = this.state.validYCoordinateRange[1]\n      if (y >= start && y <= end) {\n        this.setState({\n          selectedYCoordinate: y,\n          isSelectedYCoordinateValid: true\n        })\n        return\n      }\n    }\n    this.setState({\n      selectedYCoordinate: undefined,\n      isSelectedYCoordinateValid: false\n    })\n  }\n\n  handleMagnificationSelection (value: any): void {\n    if (value != null) {\n      if (value > 0 && value <= 40) {\n        this.setState({\n          selectedMagnification: Number(value),\n          isSelectedMagnificationValid: true\n        })\n        return\n      }\n    }\n    this.setState({\n      selectedMagnification: undefined,\n      isSelectedMagnificationValid: false\n    })\n  }\n\n  /**\n   * Handler that gets called when the selection of slide position was\n   * completed.\n   */\n  handleSlidePositionSelection (): void {\n    if (\n      this.state.isSelectedXCoordinateValid &&\n      this.state.isSelectedYCoordinateValid &&\n      this.state.isSelectedMagnificationValid &&\n      this.state.selectedXCoordinate != null &&\n      this.state.selectedYCoordinate != null &&\n      this.state.selectedMagnification != null\n    ) {\n      console.info(\n        'select slide position ' +\n        `(${this.state.selectedXCoordinate}, ` +\n        `${this.state.selectedYCoordinate}) ` +\n        `at ${this.state.selectedMagnification}x magnification`\n      )\n\n      const factor = this.state.selectedMagnification\n      /**\n       * On an optical microscope an objective with 1x magnification\n       * corresponds to approximately 10 micrometer pixel spacing\n       * (due to the ocular).\n       */\n      const targetPixelSpacing = 0.01 / factor\n      const diffs = []\n      for (let i = 0; i < this.volumeViewer.numLevels; i++) {\n        const actualPixelSpacing = this.volumeViewer.getPixelSpacing(i)[0]\n        diffs.push(Math.abs(targetPixelSpacing - actualPixelSpacing))\n      }\n      const level = diffs.indexOf(Math.min(...diffs))\n      this.volumeViewer.navigate({\n        position: [\n          this.state.selectedXCoordinate,\n          this.state.selectedYCoordinate\n        ],\n        level: level\n      })\n      const point = new dmv.scoord3d.Point({\n        coordinates: [\n          this.state.selectedXCoordinate,\n          this.state.selectedYCoordinate,\n          0\n        ],\n        frameOfReferenceUID: this.volumeViewer.frameOfReferenceUID\n      })\n      const roi = new dmv.roi.ROI({ scoord3d: point })\n      this.volumeViewer.addROI(roi, this.defaultRoiStyle)\n      this.setState(state => {\n        const visibleRoiUIDs = state.visibleRoiUIDs\n        visibleRoiUIDs.add(roi.uid)\n        return {\n          visibleRoiUIDs,\n          isGoToModalVisible: false\n        }\n      })\n    }\n  }\n\n  /**\n   * Handler that gets called when the selection of a slide position was\n   * canceled.\n   */\n  handleSlidePositionSelectionCancellation (): void {\n    console.log('cancel slide position selection')\n    this.setState({\n      isGoToModalVisible: false,\n      isSelectedXCoordinateValid: false,\n      isSelectedYCoordinateValid: false,\n      isSelectedMagnificationValid: false,\n      selectedXCoordinate: undefined,\n      selectedYCoordinate: undefined,\n      selectedMagnification: undefined\n    })\n  }\n\n  /**\n   * Handler that gets called when annotation configuration has been completed.\n   */\n  handleAnnotationConfigurationCompletion (): void {\n    console.debug('complete annotation configuration')\n    const finding = this.state.selectedFinding\n    const geometryType = this.state.selectedGeometryType\n    const markup = this.state.selectedMarkup\n    if (geometryType !== undefined && finding !== undefined) {\n      this.volumeViewer.activateDrawInteraction({ geometryType, markup })\n      this.setState({\n        isAnnotationModalVisible: false,\n        isRoiDrawingActive: true\n      })\n    } else {\n      NotificationMiddleware.onError(\n        NotificationMiddlewareContext.SLIM,\n        new CustomError(\n          errorTypes.VISUALIZATION,\n          'Could not complete annotation configuration'\n        )\n      )\n    }\n  }\n\n  /**\n   * Handler that gets called when annotation configuration has been cancelled.\n   */\n  handleAnnotationConfigurationCancellation (): void {\n    console.debug('cancel annotation configuration')\n    this.setState({\n      isAnnotationModalVisible: false,\n      isRoiDrawingActive: false\n    })\n  }\n\n  /**\n   * Handler that gets called when a report should be generated for the current\n   * set of annotations.\n   */\n  handleReportGeneration (): void {\n    console.info('save ROIs')\n    const rois = this.volumeViewer.getAllROIs()\n    const opticalPaths = this.volumeViewer.getAllOpticalPaths()\n    const metadata = this.volumeViewer.getOpticalPathMetadata(\n      opticalPaths[0].identifier\n    )\n    // Metadata should be sorted such that the image with the highest\n    // resolution is the last item in the array.\n    const refImage = metadata[metadata.length - 1]\n    // We assume that there is only one specimen (tissue section) per\n    // ontainer (slide). Only the tissue section is tracked with a unique\n    // identifier, even if the section may be composed of different biological\n    // samples.\n    if (refImage.SpecimenDescriptionSequence.length > 1) {\n      NotificationMiddleware.onError(\n        NotificationMiddlewareContext.SLIM,\n        new CustomError(\n          errorTypes.VISUALIZATION,\n          'More than one specimen has been described for the slide'\n        )\n      )\n    }\n    const refSpecimen = refImage.SpecimenDescriptionSequence[0]\n\n    console.debug('create Observation Context')\n    let observer\n    if (this.props.user !== undefined) {\n      observer = new dcmjs.sr.templates.PersonObserverIdentifyingAttributes({\n        name: this.props.user.name,\n        loginName: this.props.user.email\n      })\n    } else {\n      console.warn('no user information available')\n      observer = new dcmjs.sr.templates.PersonObserverIdentifyingAttributes({\n        name: 'ANONYMOUS'\n      })\n    }\n    const observationContext = new dcmjs.sr.templates.ObservationContext({\n      observerPersonContext: new dcmjs.sr.templates.ObserverContext({\n        observerType: new dcmjs.sr.coding.CodedConcept({\n          value: '121006',\n          schemeDesignator: 'DCM',\n          meaning: 'Person'\n        }),\n        observerIdentifyingAttributes: observer\n      }),\n      observerDeviceContext: new dcmjs.sr.templates.ObserverContext({\n        observerType: new dcmjs.sr.coding.CodedConcept({\n          value: '121007',\n          schemeDesignator: 'DCM',\n          meaning: 'Device'\n        }),\n        observerIdentifyingAttributes:\n          new dcmjs.sr.templates.DeviceObserverIdentifyingAttributes({\n            uid: this.props.app.uid,\n            manufacturerName: 'MGH Computational Pathology',\n            modelName: this.props.app.name\n          })\n      }),\n      subjectContext: new dcmjs.sr.templates.SubjectContext({\n        subjectClass: new dcmjs.sr.coding.CodedConcept({\n          value: '121027',\n          schemeDesignator: 'DCM',\n          meaning: 'Specimen'\n        }),\n        subjectClassSpecificContext:\n          new dcmjs.sr.templates.SubjectContextSpecimen({\n            uid: refSpecimen.SpecimenUID,\n            identifier: refSpecimen.SpecimenIdentifier,\n            containerIdentifier: refImage.ContainerIdentifier\n          })\n      })\n    })\n\n    console.debug('encode Imaging Measurements')\n    const imagingMeasurements: dcmjs.sr.valueTypes.ContainerContentItem[] = []\n    for (let i = 0; i < rois.length; i++) {\n      const roi = rois[i]\n      if (!this.state.visibleRoiUIDs.has(roi.uid)) {\n        continue\n      }\n      let findingType = roi.evaluations.find(\n        (item: dcmjs.sr.valueTypes.ContentItem) => {\n          return item.ConceptNameCodeSequence[0].CodeValue === '121071'\n        }\n      )\n      if (findingType === undefined) {\n        NotificationMiddleware.onError(\n          NotificationMiddlewareContext.SLIM,\n          new CustomError(\n            errorTypes.ENCODINGANDDECODING,\n            `No finding type was specified for ROI \"${roi.uid}\"`\n          )\n        )\n      }\n      findingType = findingType as dcmjs.sr.valueTypes.CodeContentItem\n      const group = new dcmjs.sr.templates.PlanarROIMeasurementsAndQualitativeEvaluations({\n        trackingIdentifier: new dcmjs.sr.templates.TrackingIdentifier({\n          uid: roi.properties.trackingUID ?? roi.uid,\n          identifier: `ROI #${i + 1}`\n        }),\n        referencedRegion: new dcmjs.sr.contentItems.ImageRegion3D({\n          graphicType: roi.scoord3d.graphicType,\n          graphicData: roi.scoord3d.graphicData,\n          frameOfReferenceUID: roi.scoord3d.frameOfReferenceUID\n        }),\n        findingType: new dcmjs.sr.coding.CodedConcept({\n          value: findingType.ConceptCodeSequence[0].CodeValue,\n          schemeDesignator:\n            findingType.ConceptCodeSequence[0].CodingSchemeDesignator,\n          meaning: findingType.ConceptCodeSequence[0].CodeMeaning\n        }),\n        qualitativeEvaluations: roi.evaluations.filter(\n          (item: dcmjs.sr.valueTypes.ContentItem) => {\n            return item.ConceptNameCodeSequence[0].CodeValue !== '121071'\n          }\n        ),\n        measurements: roi.measurements\n      })\n      const measurements = group as dcmjs.sr.valueTypes.ContainerContentItem[]\n      measurements[0].ContentTemplateSequence = [{\n        MappingResource: 'DCMR',\n        TemplateIdentifier: '1410'\n      }]\n      imagingMeasurements.push(...measurements)\n    }\n\n    console.debug('create Measurement Report document content')\n    const measurementReport = new dcmjs.sr.templates.MeasurementReport({\n      languageOfContentItemAndDescendants: new dcmjs.sr.templates.LanguageOfContentItemAndDescendants({}),\n      observationContext: observationContext,\n      procedureReported: new dcmjs.sr.coding.CodedConcept({\n        value: '112703',\n        schemeDesignator: 'DCM',\n        meaning: 'Whole Slide Imaging'\n      }),\n      imagingMeasurements: imagingMeasurements\n    })\n\n    console.info('create Comprehensive 3D SR document')\n    const dataset = new dcmjs.sr.documents.Comprehensive3DSR({\n      content: measurementReport[0],\n      evidence: [refImage],\n      seriesInstanceUID: dcmjs.data.DicomMetaDictionary.uid(),\n      seriesNumber: 1,\n      seriesDescription: 'Annotation',\n      sopInstanceUID: dcmjs.data.DicomMetaDictionary.uid(),\n      instanceNumber: 1,\n      manufacturer: 'MGH Computational Pathology',\n      previousVersions: undefined // TODO\n    })\n\n    this.setState({\n      isReportModalVisible: true,\n      generatedReport: dataset as dmv.metadata.Comprehensive3DSR\n    })\n  }\n\n  /**\n   * Handler that gets called when a report should be verified. The current\n   * list of annotations will be presented to the user together with other\n   * pertinent metadata about the patient, study, and specimen.\n   */\n  handleReportVerification (): void {\n    console.info('verfied report')\n\n    const report = this.state.generatedReport\n    if (report !== undefined) {\n      const dataset = report as unknown as dmv.metadata.Comprehensive3DSR\n      console.debug('create File Meta Information')\n      const fileMetaInformationVersionArray = new Uint8Array(2)\n      fileMetaInformationVersionArray[1] = 1\n      const fileMeta = {\n        // FileMetaInformationVersion\n        '00020001': {\n          Value: [fileMetaInformationVersionArray.buffer],\n          vr: 'OB'\n        },\n        // MediaStorageSOPClassUID\n        '00020002': {\n          Value: [dataset.SOPClassUID],\n          vr: 'UI'\n        },\n        // MediaStorageSOPInstanceUID\n        '00020003': {\n          Value: [dataset.SOPInstanceUID],\n          vr: 'UI'\n        },\n        // TransferSyntaxUID\n        '00020010': {\n          Value: ['1.2.840.10008.1.2.1'],\n          vr: 'UI'\n        },\n        // ImplementationClassUID\n        '00020012': {\n          Value: [this.props.app.uid],\n          vr: 'UI'\n        }\n      }\n\n      console.info('store Comprehensive 3D SR document')\n      const writer = new dcmjs.data.DicomDict(fileMeta)\n      writer.dict = dcmjs.data.DicomMetaDictionary.denaturalizeDataset(dataset)\n      const buffer = writer.write()\n      const client = this.props.clients[StorageClasses.COMPREHENSIVE_3D_SR]\n      client.storeInstances({ datasets: [buffer] }).then(\n        (response: any) => message.info('Annotations were saved.')\n      ).catch((error) => {\n        console.error(error)\n        // eslint-disable-next-line @typescript-eslint/no-floating-promises\n        NotificationMiddleware.onError(\n          NotificationMiddlewareContext.SLIM,\n          new CustomError(\n            errorTypes.ENCODINGANDDECODING,\n            'Annotations could not be saved'\n          )\n        )\n      })\n    }\n    this.setState({\n      isReportModalVisible: false,\n      generatedReport: undefined\n    })\n  }\n\n  /**\n   * Handler that gets called when report generation has been cancelled.\n   */\n  handleReportCancellation (): void {\n    this.setState({\n      isReportModalVisible: false,\n      generatedReport: undefined\n    })\n  }\n\n  /**\n   * Handler that gets called when an annotation has been selected from the\n   * current list of annotations.\n   */\n  handleAnnotationSelection ({ roiUID }: { roiUID: string }): void {\n    console.log(`selected ROI ${roiUID}`)\n    this.setState({ selectedRoiUIDs: new Set([roiUID]) })\n    this.volumeViewer.getAllROIs().forEach((roi) => {\n      let style = {}\n      if (roi.uid === roiUID) {\n        style = this.selectedRoiStyle\n        this.setState(state => {\n          const visibleRoiUIDs = state.visibleRoiUIDs\n          visibleRoiUIDs.add(roi.uid)\n          return { visibleRoiUIDs }\n        })\n      } else {\n        if (this.state.visibleRoiUIDs.has(roi.uid)) {\n          const key = _getRoiKey(roi)\n          style = this.getRoiStyle(key)\n        }\n      }\n      this.volumeViewer.setROIStyle(roi.uid, style)\n    })\n  }\n\n  /**\n   * Handle toggling of annotation visibility, i.e., whether a given\n   * annotation should be either displayed or hidden by the viewer.\n   */\n  handleAnnotationVisibilityChange ({ roiUID, isVisible }: {\n    roiUID: string\n    isVisible: boolean\n  }): void {\n    if (isVisible) {\n      console.info(`show ROI ${roiUID}`)\n      const roi = this.volumeViewer.getROI(roiUID)\n      const key = _getRoiKey(roi)\n      const style = this.getRoiStyle(key)\n      this.volumeViewer.setROIStyle(roi.uid, style)\n      this.setState(state => {\n        const visibleRoiUIDs = state.visibleRoiUIDs\n        visibleRoiUIDs.add(roi.uid)\n        return { visibleRoiUIDs }\n      })\n    } else {\n      console.info(`hide ROI ${roiUID}`)\n      this.setState(state => {\n        const selectedRoiUIDs = state.selectedRoiUIDs\n        selectedRoiUIDs.delete(roiUID)\n        const visibleRoiUIDs = state.visibleRoiUIDs\n        visibleRoiUIDs.delete(roiUID)\n        return { visibleRoiUIDs, selectedRoiUIDs }\n      })\n      this.volumeViewer.setROIStyle(roiUID, {})\n    }\n  }\n\n  /**\n   * Handle toggling of annotation group visibility, i.e., whether a given\n   * annotation group should be either displayed or hidden by the viewer.\n   */\n  handleAnnotationGroupVisibilityChange ({ annotationGroupUID, isVisible }: {\n    annotationGroupUID: string\n    isVisible: boolean\n  }): void {\n    console.log(`change visibility of annotation group ${annotationGroupUID}`)\n    if (isVisible) {\n      console.info(`show annotation group ${annotationGroupUID}`)\n      try {\n        this.volumeViewer.showAnnotationGroup(annotationGroupUID)\n      } catch (error) {\n        // eslint-disable-next-line @typescript-eslint/no-floating-promises\n        NotificationMiddleware.onError(\n          NotificationMiddlewareContext.SLIM,\n          new CustomError(\n            errorTypes.VISUALIZATION,\n            'Failed to show annotation group.'\n          )\n        )\n        throw error\n      }\n      this.setState(state => {\n        const visibleAnnotationGroupUIDs = new Set(\n          state.visibleAnnotationGroupUIDs\n        )\n        visibleAnnotationGroupUIDs.add(annotationGroupUID)\n        return { visibleAnnotationGroupUIDs }\n      })\n    } else {\n      console.info(`hide annotation group ${annotationGroupUID}`)\n      this.volumeViewer.hideAnnotationGroup(annotationGroupUID)\n      this.setState(state => {\n        const visibleAnnotationGroupUIDs = new Set(\n          state.visibleAnnotationGroupUIDs\n        )\n        visibleAnnotationGroupUIDs.delete(annotationGroupUID)\n        return { visibleAnnotationGroupUIDs }\n      })\n    }\n  }\n\n  /**\n   * Handle change of annotation group style.\n   */\n  handleAnnotationGroupStyleChange ({ uid, styleOptions }: {\n    uid: string\n    styleOptions: {\n      opacity?: number\n      color?: number[]\n      measurement?: dcmjs.sr.coding.CodedConcept\n    }\n  }): void {\n    console.log(`change style of annotation group ${uid}`)\n    try {\n      this.volumeViewer.setAnnotationGroupStyle(\n        uid,\n        styleOptions\n      )\n    } catch (error) {\n      // eslint-disable-next-line @typescript-eslint/no-floating-promises\n      NotificationMiddleware.onError(\n        NotificationMiddlewareContext.SLIM,\n        new CustomError(\n          errorTypes.VISUALIZATION,\n          'Failed to change style of annotation group.'\n        )\n      )\n      throw error\n    }\n  }\n\n  generateRoiStyle (\n    styleOptions: {\n      opacity?: number\n      color?: number[]\n    }): dmv.viewer.ROIStyleOptions {\n    const opacity = styleOptions.opacity ?? DEFAULT_ANNOTATION_OPACITY\n    const strokeColor = styleOptions.color ?? DEFAULT_ANNOTATION_STROKE_COLOR\n    const fillColor = strokeColor.map((c) => Math.min(c + 25, 255))\n    const style = _formatRoiStyle({\n      fill: { color: [...fillColor, opacity] },\n      stroke: { color: [...strokeColor, opacity] },\n      radius: this.defaultRoiStyle.stroke?.width\n    })\n    return style\n  }\n\n  handleRoiStyleChange ({ uid, styleOptions }: {\n    uid: string\n    styleOptions: {\n      opacity: number\n      color: number[]\n    }\n  }): void {\n    console.log(`change style of ROI ${uid}`)\n    try {\n      this.defaultAnnotationStyles[uid] = styleOptions\n      const style = this.generateRoiStyle(styleOptions)\n\n      const roi = this.volumeViewer.getROI(uid)\n      const key = _getRoiKey(roi) as string\n      this.roiStyles[key] = style\n      this.volumeViewer.setROIStyle(uid, style)\n      this.state.visibleRoiUIDs.add(uid)\n    } catch (error) {\n      // eslint-disable-next-line @typescript-eslint/no-floating-promises\n      NotificationMiddleware.onError(\n        NotificationMiddlewareContext.SLIM,\n        new CustomError(\n          errorTypes.VISUALIZATION,\n          'Failed to change style of ROI.'\n        )\n      )\n      throw error\n    }\n  }\n\n  /**\n   * Handle toggling of segment visibility, i.e., whether a given\n   * segment should be either displayed or hidden by the viewer.\n   */\n  handleSegmentVisibilityChange ({ segmentUID, isVisible }: {\n    segmentUID: string\n    isVisible: boolean\n  }): void {\n    console.log(`change visibility of segment ${segmentUID}`)\n    if (isVisible) {\n      console.info(`show segment ${segmentUID}`)\n      this.volumeViewer.showSegment(segmentUID)\n      this.setState(state => {\n        const visibleSegmentUIDs = new Set(state.visibleSegmentUIDs)\n        visibleSegmentUIDs.add(segmentUID)\n        return { visibleSegmentUIDs }\n      })\n    } else {\n      console.info(`hide segment ${segmentUID}`)\n      this.volumeViewer.hideSegment(segmentUID)\n      this.setState(state => {\n        const visibleSegmentUIDs = new Set(state.visibleSegmentUIDs)\n        visibleSegmentUIDs.delete(segmentUID)\n        return { visibleSegmentUIDs }\n      })\n    }\n  }\n\n  /**\n   * Handle change of segment style.\n   */\n  handleSegmentStyleChange ({ segmentUID, styleOptions }: {\n    segmentUID: string\n    styleOptions: {\n      opacity?: number\n    }\n  }): void {\n    console.log(`change style of segment ${segmentUID}`)\n    this.volumeViewer.setSegmentStyle(segmentUID, styleOptions)\n  }\n\n  /**\n   * Handle toggling of mapping visibility, i.e., whether a given\n   * mapping should be either displayed or hidden by the viewer.\n   */\n  handleMappingVisibilityChange ({ mappingUID, isVisible }: {\n    mappingUID: string\n    isVisible: boolean\n  }): void {\n    console.log(`change visibility of mapping ${mappingUID}`)\n    if (isVisible) {\n      console.info(`show mapping ${mappingUID}`)\n      this.volumeViewer.showParameterMapping(mappingUID)\n      this.setState(state => {\n        const visibleMappingUIDs = new Set(state.visibleMappingUIDs)\n        visibleMappingUIDs.add(mappingUID)\n        return { visibleMappingUIDs }\n      })\n    } else {\n      console.info(`hide mapping ${mappingUID}`)\n      this.volumeViewer.hideParameterMapping(mappingUID)\n      this.setState(state => {\n        const visibleMappingUIDs = new Set(state.visibleMappingUIDs)\n        visibleMappingUIDs.delete(mappingUID)\n        return { visibleMappingUIDs }\n      })\n    }\n  }\n\n  /**\n   * Handle change of mapping style.\n   */\n  handleMappingStyleChange ({ mappingUID, styleOptions }: {\n    mappingUID: string\n    styleOptions: {\n      opacity?: number\n    }\n  }): void {\n    console.log(`change style of mapping ${mappingUID}`)\n    this.volumeViewer.setParameterMappingStyle(mappingUID, styleOptions)\n  }\n\n  /**\n   * Handle toggling of optical path visibility, i.e., whether a given\n   * optical path should be either displayed or hidden by the viewer.\n   */\n  handleOpticalPathVisibilityChange ({ opticalPathIdentifier, isVisible }: {\n    opticalPathIdentifier: string\n    isVisible: boolean\n  }): void {\n    console.log(`change visibility of optical path ${opticalPathIdentifier}`)\n    if (isVisible) {\n      console.info(`show optical path ${opticalPathIdentifier}`)\n      this.volumeViewer.showOpticalPath(opticalPathIdentifier)\n      this.setState(state => {\n        const visibleOpticalPathIdentifiers = new Set(\n          state.visibleOpticalPathIdentifiers\n        )\n        visibleOpticalPathIdentifiers.add(opticalPathIdentifier)\n        return { visibleOpticalPathIdentifiers }\n      })\n    } else {\n      console.info(`hide optical path ${opticalPathIdentifier}`)\n      this.volumeViewer.hideOpticalPath(opticalPathIdentifier)\n      this.setState(state => {\n        const visibleOpticalPathIdentifiers = new Set(\n          state.visibleOpticalPathIdentifiers\n        )\n        visibleOpticalPathIdentifiers.delete(opticalPathIdentifier)\n        return { visibleOpticalPathIdentifiers }\n      })\n    }\n  }\n\n  /**\n   * Handle change of optical path style.\n   */\n  handleOpticalPathStyleChange ({ opticalPathIdentifier, styleOptions }: {\n    opticalPathIdentifier: string\n    styleOptions: {\n      opacity?: number\n      color?: number[]\n      limitValues?: number[]\n    }\n  }): void {\n    console.log(`change style of optical path ${opticalPathIdentifier}`)\n    this.volumeViewer.setOpticalPathStyle(opticalPathIdentifier, styleOptions)\n  }\n\n  /**\n   * Handle toggling of optical path activity, i.e., whether a given\n   * optical path should be either added or removed from the viewport.\n   */\n  handleOpticalPathActivityChange ({ opticalPathIdentifier, isActive }: {\n    opticalPathIdentifier: string\n    isActive: boolean\n  }): void {\n    console.log(`change activity of optical path ${opticalPathIdentifier}`)\n    if (isActive) {\n      console.info(`activate optical path ${opticalPathIdentifier}`)\n      this.volumeViewer.activateOpticalPath(opticalPathIdentifier)\n      this.setState(state => {\n        const activeOpticalPathIdentifiers = new Set(\n          state.activeOpticalPathIdentifiers\n        )\n        activeOpticalPathIdentifiers.add(opticalPathIdentifier)\n        return { activeOpticalPathIdentifiers }\n      })\n    } else {\n      console.info(`deactivate optical path ${opticalPathIdentifier}`)\n      this.volumeViewer.deactivateOpticalPath(opticalPathIdentifier)\n      this.setState(state => {\n        const activeOpticalPathIdentifiers = new Set(\n          state.activeOpticalPathIdentifiers\n        )\n        activeOpticalPathIdentifiers.delete(opticalPathIdentifier)\n        return { activeOpticalPathIdentifiers }\n      })\n    }\n  }\n\n  /**\n   * Set default presentation state that is either defined by metadata included\n   * in the DICOM Slide Microscopy instance or by the viewer.\n   */\n  setDefaultPresentationState (): void {\n    const visibleOpticalPathIdentifiers: Set<string> = new Set()\n    const opticalPaths = this.volumeViewer.getAllOpticalPaths()\n    opticalPaths.sort((a, b) => {\n      if (a.identifier.localeCompare(b.identifier) === 1) {\n        return 1\n      } else if (b.identifier.localeCompare(a.identifier) === 1) {\n        return -1\n      }\n      return 0\n    })\n    opticalPaths.forEach((item: dmv.opticalPath.OpticalPath) => {\n      const identifier = item.identifier\n      const style = this.volumeViewer.getOpticalPathDefaultStyle(identifier)\n      this.volumeViewer.setOpticalPathStyle(identifier, style)\n      this.volumeViewer.hideOpticalPath(identifier)\n      this.volumeViewer.deactivateOpticalPath(identifier)\n      if (item.isMonochromatic) {\n        /*\n         * If the image metadata contains a palette color lookup table for the\n         * optical path, then it will be displayed by default.\n         */\n        if (item.paletteColorLookupTableUID != null) {\n          visibleOpticalPathIdentifiers.add(identifier)\n        }\n      } else {\n        /* Color images will always be displayed by default. */\n        visibleOpticalPathIdentifiers.add(identifier)\n      }\n    })\n\n    /*\n     * If no optical paths have been selected for visualization so far, select\n     * first n optical paths and set a default value of interest (VOI) window\n     * (using pre-computed pixel data statistics) and a default color.\n     */\n    if (visibleOpticalPathIdentifiers.size === 0) {\n      const defaultColors = [\n        [255, 255, 255]\n      ]\n      opticalPaths.forEach((item: dmv.opticalPath.OpticalPath) => {\n        const identifier = item.identifier\n        if (item.isMonochromatic) {\n          const numVisible = visibleOpticalPathIdentifiers.size\n          if (numVisible < defaultColors.length) {\n            const style = {\n              ...this.volumeViewer.getOpticalPathStyle(identifier)\n            }\n            const index = numVisible\n            style.color = defaultColors[index]\n            const stats = this.state.pixelDataStatistics[item.identifier]\n            if (stats != null) {\n              style.limitValues = [stats.min, stats.max]\n            }\n            this.volumeViewer.setOpticalPathStyle(item.identifier, style)\n            visibleOpticalPathIdentifiers.add(item.identifier)\n          }\n        }\n      })\n    }\n\n    console.info(\n      `selected n=${visibleOpticalPathIdentifiers.size} optical paths ` +\n      'for visualization'\n    )\n    visibleOpticalPathIdentifiers.forEach(identifier => {\n      this.volumeViewer.showOpticalPath(identifier)\n    })\n    this.setState(state => ({\n      activeOpticalPathIdentifiers: new Set(visibleOpticalPathIdentifiers),\n      visibleOpticalPathIdentifiers: new Set(visibleOpticalPathIdentifiers)\n    }))\n  }\n\n  /**\n   * Handler that gets called when a presentation state has been selected from\n   * the current list of available presentation states.\n   */\n  handlePresentationStateReset (): void {\n    this.setState({ selectedPresentationStateUID: undefined })\n    const urlPath = this.props.location.pathname\n    this.props.navigate(urlPath)\n    this.setDefaultPresentationState()\n  }\n\n  /**\n   * Handler that gets called when a presentation state has been selected from\n   * the current list of available presentation states.\n   */\n  handlePresentationStateSelection (\n    value?: string,\n    option?: any\n  ): void {\n    if (value != null) {\n      console.info(`select Presentation State instance \"${value}\"`)\n      let presentationState\n      this.state.presentationStates.forEach(instance => {\n        if (instance.SOPInstanceUID === value) {\n          presentationState = instance\n        }\n      })\n      if (presentationState != null) {\n        let urlPath = this.props.location.pathname\n        urlPath += `?state=${value}`\n        this.props.navigate(urlPath)\n        this.setPresentationState(presentationState)\n      } else {\n        // eslint-disable-next-line @typescript-eslint/no-floating-promises\n        NotificationMiddleware.onError(\n          NotificationMiddlewareContext.SLIM,\n          new CustomError(\n            errorTypes.VISUALIZATION,\n            'Presentation State could not be found'\n          )\n        )\n        console.log(\n          'failed to handle section of presentation state: ' +\n          `could not find instance \"${value}\"`\n        )\n      }\n    } else {\n      this.handlePresentationStateReset()\n    }\n    this.setState({ selectedPresentationStateUID: value })\n  }\n\n  /**\n   * Handler that will toggle the ROI drawing tool, i.e., either activate or\n   * de-activate it, depending on its current state.\n   */\n  handleRoiDrawing (): void {\n    if (this.state.isRoiDrawingActive) {\n      console.info('deactivate drawing of ROIs')\n      this.volumeViewer.deactivateDrawInteraction()\n      this.volumeViewer.activateSelectInteraction({})\n      this.setState({\n        isAnnotationModalVisible: false,\n        isSelectedRoiModalVisible: false,\n        isRoiTranslationActive: false,\n        isRoiDrawingActive: false,\n        isRoiModificationActive: false,\n        isGoToModalVisible: false\n      })\n    } else {\n      console.info('activate drawing of ROIs')\n      this.setState({\n        isAnnotationModalVisible: true,\n        isSelectedRoiModalVisible: false,\n        isRoiDrawingActive: true,\n        isRoiModificationActive: false,\n        isRoiTranslationActive: false,\n        isGoToModalVisible: false\n      })\n      this.volumeViewer.deactivateSelectInteraction()\n      this.volumeViewer.deactivateSnapInteraction()\n      this.volumeViewer.deactivateTranslateInteraction()\n      this.volumeViewer.deactivateModifyInteraction()\n    }\n  }\n\n  /**\n   * Handler that will toggle the ROI modification tool, i.e., either activate\n   * or de-activate it, depending on its current state.\n   */\n  handleRoiModification (): void {\n    console.info('toggle modification of ROIs')\n    if (this.volumeViewer.isModifyInteractionActive) {\n      this.volumeViewer.deactivateModifyInteraction()\n      this.volumeViewer.deactivateSnapInteraction()\n      this.volumeViewer.activateSelectInteraction({})\n      this.setState({\n        isRoiTranslationActive: false,\n        isRoiDrawingActive: false,\n        isRoiModificationActive: false\n      })\n    } else {\n      this.setState({\n        isRoiModificationActive: true,\n        isRoiDrawingActive: false,\n        isRoiTranslationActive: false\n      })\n      this.volumeViewer.deactivateDrawInteraction()\n      this.volumeViewer.deactivateTranslateInteraction()\n      this.volumeViewer.deactivateSelectInteraction()\n      this.volumeViewer.activateSnapInteraction({})\n      this.volumeViewer.activateModifyInteraction({})\n    }\n  }\n\n  /**\n   * Handler that will toggle the ROI translation tool, i.e., either activate\n   * or de-activate it, depending on its current state.\n   */\n  handleRoiTranslation (): void {\n    console.info('toggle translation of ROIs')\n    if (this.volumeViewer.isTranslateInteractionActive) {\n      this.volumeViewer.deactivateTranslateInteraction()\n      this.setState({\n        isRoiTranslationActive: false,\n        isRoiDrawingActive: false,\n        isRoiModificationActive: false\n      })\n    } else {\n      this.setState({\n        isRoiTranslationActive: true,\n        isRoiDrawingActive: false,\n        isRoiModificationActive: false\n      })\n      this.volumeViewer.deactivateModifyInteraction()\n      this.volumeViewer.deactivateSnapInteraction()\n      this.volumeViewer.deactivateDrawInteraction()\n      this.volumeViewer.deactivateSelectInteraction()\n      this.volumeViewer.activateTranslateInteraction({})\n    }\n  }\n\n  handleGoTo (): void {\n    this.volumeViewer.deactivateDrawInteraction()\n    this.volumeViewer.deactivateModifyInteraction()\n    this.volumeViewer.deactivateSnapInteraction()\n    this.volumeViewer.deactivateTranslateInteraction()\n    this.volumeViewer.deactivateSelectInteraction()\n    this.setState({\n      isGoToModalVisible: true,\n      isAnnotationModalVisible: false,\n      isSelectedRoiModalVisible: false,\n      isReportModalVisible: false,\n      isRoiTranslationActive: false,\n      isRoiModificationActive: false,\n      isRoiDrawingActive: false\n    })\n  }\n\n  /**\n   * Handler that will toggle the ROI removal tool, i.e., either activate\n   * or de-activate it, depending on its current state.\n   */\n  handleRoiRemoval (): void {\n    this.volumeViewer.deactivateDrawInteraction()\n    this.volumeViewer.deactivateSnapInteraction()\n    this.volumeViewer.deactivateTranslateInteraction()\n    this.volumeViewer.deactivateModifyInteraction()\n    if (this.state.selectedRoiUIDs.size > 0) {\n      this.state.selectedRoiUIDs.forEach(uid => {\n        if (uid === undefined) {\n          // eslint-disable-next-line @typescript-eslint/no-floating-promises\n          message.warning('No annotation was selected for removal')\n          return\n        }\n        console.info(`remove ROI \"${uid}\"`)\n        this.volumeViewer.removeROI(uid)\n        // eslint-disable-next-line @typescript-eslint/no-floating-promises\n        message.info('Annotation was removed')\n      })\n      this.setState({\n        selectedRoiUIDs: new Set(),\n        isRoiTranslationActive: false,\n        isRoiDrawingActive: false,\n        isRoiModificationActive: false\n      })\n    } else {\n      this.state.visibleRoiUIDs.forEach(uid => {\n        console.info(`remove ROI \"${uid}\"`)\n        this.volumeViewer.removeROI(uid)\n      })\n      this.setState({\n        visibleRoiUIDs: new Set(),\n        isRoiTranslationActive: false,\n        isRoiDrawingActive: false,\n        isRoiModificationActive: false\n      })\n    }\n    this.volumeViewer.activateSelectInteraction({})\n  }\n\n  /**\n   * Handler that will toggle the ROI visibility tool, i.e., either activate\n   * or de-activate it, depending on its current state.\n   */\n  handleRoiVisibilityChange (): void {\n    console.info('toggle visibility of ROIs')\n    if (this.volumeViewer.areROIsVisible) {\n      this.volumeViewer.deactivateDrawInteraction()\n      this.volumeViewer.deactivateSnapInteraction()\n      this.volumeViewer.deactivateTranslateInteraction()\n      this.volumeViewer.deactivateSelectInteraction()\n      this.volumeViewer.deactivateModifyInteraction()\n      this.volumeViewer.hideROIs()\n      this.setState({\n        areRoisHidden: true,\n        isRoiDrawingActive: false,\n        isRoiModificationActive: false,\n        isRoiTranslationActive: false\n      })\n    } else {\n      this.volumeViewer.showROIs()\n      this.volumeViewer.activateSelectInteraction({})\n      this.state.selectedRoiUIDs.forEach(uid => {\n        if (uid !== undefined) {\n          this.volumeViewer.setROIStyle(uid, this.selectedRoiStyle)\n        }\n      })\n      this.setState({ areRoisHidden: false })\n    }\n  }\n\n  render (): React.ReactNode {\n    const rois: dmv.roi.ROI[] = []\n    const segments: dmv.segment.Segment[] = []\n    const mappings: dmv.mapping.ParameterMapping[] = []\n    const annotationGroups: dmv.annotation.AnnotationGroup[] = []\n    rois.push(...this.volumeViewer.getAllROIs())\n    segments.push(...this.volumeViewer.getAllSegments())\n    mappings.push(...this.volumeViewer.getAllParameterMappings())\n    const allAnnotationGroups = this.volumeViewer.getAllAnnotationGroups()\n    const filteredAnnotationGroups = allAnnotationGroups?.filter((annotationGroup) =>\n      annotationGroup.referencedSeriesInstanceUID === this.props.seriesInstanceUID\n    )\n    annotationGroups.push(...filteredAnnotationGroups)\n\n    const annotations = rois.map(roi => adaptRoiToAnnotation(roi))\n\n    const openSubMenuItems = [\n      'specimens', 'optical-paths', 'annotations', 'presentation-states'\n    ]\n\n    let report: React.ReactNode\n    const dataset = this.state.generatedReport\n    if (dataset !== undefined) {\n      report = <Report dataset={dataset} />\n    }\n\n    let annotationMenuItems: React.ReactNode\n    if (rois.length > 0) {\n      annotationMenuItems = (\n        <AnnotationList\n          rois={rois}\n          selectedRoiUIDs={this.state.selectedRoiUIDs}\n          visibleRoiUIDs={this.state.visibleRoiUIDs}\n          onSelection={this.handleAnnotationSelection}\n          onVisibilityChange={this.handleAnnotationVisibilityChange}\n        />\n      )\n    }\n\n    const findingOptions = this.findingOptions.map(finding => {\n      return (\n        <Select.Option\n          key={finding.CodeValue}\n          value={finding.CodeValue}\n        >\n          {finding.CodeMeaning}\n        </Select.Option>\n      )\n    })\n\n    const geometryTypeOptionsMapping: { [key: string]: React.ReactNode } = {\n      point: <Select.Option key='point' value='point'>Point</Select.Option>,\n      circle: <Select.Option key='circle' value='circle'>Circle</Select.Option>,\n      box: <Select.Option key='box' value='box'>Box</Select.Option>,\n      polygon: <Select.Option key='polygon' value='polygon'>Polygon</Select.Option>,\n      line: <Select.Option key='line' value='line'>Line</Select.Option>,\n      freehandpolygon: (\n        <Select.Option key='freehandpolygon' value='freehandpolygon'>\n          Polygon (freehand)\n        </Select.Option>\n      ),\n      freehandline: (\n        <Select.Option key='freehandline' value='freehandline'>\n          Line (freehand)\n        </Select.Option>\n      )\n    }\n\n    const annotationConfigurations: React.ReactNode[] = [\n      (\n        <Select\n          style={{ minWidth: 130 }}\n          onSelect={this.handleAnnotationFindingSelection}\n          key='annotation-finding'\n          defaultActiveFirstOption\n        >\n          {findingOptions}\n        </Select>\n      )\n    ]\n\n    const selectedFinding = this.state.selectedFinding\n    if (selectedFinding !== undefined) {\n      const key = _buildKey(selectedFinding)\n      this.evaluationOptions[key].forEach(evaluation => {\n        const evaluationOptions = evaluation.values.map(code => {\n          return (\n            <Select.Option\n              key={code.CodeValue}\n              value={code.CodeValue}\n              label={evaluation.name}\n            >\n              {code.CodeMeaning}\n            </Select.Option>\n          )\n        })\n        annotationConfigurations.push(\n          <>\n            {evaluation.name.CodeMeaning}\n            <Select\n              style={{ minWidth: 130 }}\n              onSelect={this.handleAnnotationEvaluationSelection}\n              allowClear\n              onClear={this.handleAnnotationEvaluationClearance}\n              defaultActiveFirstOption={false}\n            >\n              {evaluationOptions}\n            </Select>\n          </>\n        )\n      })\n      const geometryTypeOptions = this.geometryTypeOptions[key].map(name => {\n        return geometryTypeOptionsMapping[name]\n      })\n      annotationConfigurations.push(\n        <>\n          ROI geometry type\n          <Select\n            style={{ minWidth: 130 }}\n            onSelect={this.handleAnnotationGeometryTypeSelection}\n            key='annotation-geometry-type'\n          >\n            {geometryTypeOptions}\n          </Select>\n        </>\n      )\n      annotationConfigurations.push(\n        <Checkbox\n          onChange={this.handleAnnotationMeasurementActivation}\n          key='annotation-measurement'\n        >\n          measure\n        </Checkbox>\n      )\n    }\n\n    const specimenMenu = (\n      <Menu.SubMenu key='specimens' title='Specimens'>\n        <SpecimenList\n          metadata={this.props.slide.volumeImages[0]}\n          showstain={false}\n        />\n      </Menu.SubMenu>\n    )\n\n    const equipmentMenu = (\n      <Menu.SubMenu key='equipment' title='Equipment'>\n        <Equipment metadata={this.props.slide.volumeImages[0]} />\n      </Menu.SubMenu>\n    )\n\n    const opticalPaths = this.volumeViewer.getAllOpticalPaths()\n    opticalPaths.sort((a, b) => {\n      if (a.identifier.localeCompare(b.identifier) === 1) {\n        return 1\n      } else if (b.identifier.localeCompare(a.identifier) === 1) {\n        return -1\n      }\n      return 0\n    })\n    const opticalPathStyles: {\n      [identifier: string]: {\n        opacity: number\n        color?: number[]\n        limitValues?: number[]\n        paletteColorLookupTable?: dmv.color.PaletteColorLookupTable\n      }\n    } = {}\n    const opticalPathMetadata: {\n      [identifier: string]: dmv.metadata.VLWholeSlideMicroscopyImage[]\n    } = {}\n    opticalPaths.forEach(opticalPath => {\n      const identifier = opticalPath.identifier\n      const metadata = this.volumeViewer.getOpticalPathMetadata(identifier)\n      opticalPathMetadata[identifier] = metadata\n      const style = {\n        ...this.volumeViewer.getOpticalPathStyle(identifier)\n      }\n      opticalPathStyles[identifier] = style\n    })\n    const opticalPathMenu = (\n      <Menu.SubMenu key='optical-paths' title='Optical Paths'>\n        <OpticalPathList\n          metadata={opticalPathMetadata}\n          opticalPaths={opticalPaths}\n          defaultOpticalPathStyles={opticalPathStyles}\n          visibleOpticalPathIdentifiers={this.state.visibleOpticalPathIdentifiers}\n          activeOpticalPathIdentifiers={this.state.activeOpticalPathIdentifiers}\n          onOpticalPathVisibilityChange={this.handleOpticalPathVisibilityChange}\n          onOpticalPathStyleChange={this.handleOpticalPathStyleChange}\n          onOpticalPathActivityChange={this.handleOpticalPathActivityChange}\n          selectedPresentationStateUID={this.state.selectedPresentationStateUID}\n        />\n      </Menu.SubMenu>\n    )\n\n    let presentationStateMenu\n    if (this.state.presentationStates.length > 0) {\n      const presentationStateOptions = []\n      this.state.presentationStates.forEach(instance => {\n        presentationStateOptions.push(\n          <Select.Option\n            key={instance.SOPInstanceUID}\n            value={instance.SOPInstanceUID}\n            dropdownMatchSelectWidth={false}\n            size='small'\n          >\n            {instance.ContentDescription}\n          </Select.Option>\n        )\n      })\n      presentationStateOptions.push(\n        <Select.Option\n          key='default-presentation-state'\n          value={undefined}\n          dropdownMatchSelectWidth={false}\n          size='small'\n        >\n          <></>\n        </Select.Option>\n      )\n      presentationStateMenu = (\n        <Menu.SubMenu key='presentation-states' title='Presentation States'>\n          <Space align='center' size={20} style={{ padding: '14px' }}>\n            <Select\n              style={{ minWidth: 200, maxWidth: 200 }}\n              onSelect={this.handlePresentationStateSelection}\n              key='presentation-states'\n              value={this.state.selectedPresentationStateUID}\n            >\n              {presentationStateOptions}\n            </Select>\n            <Tooltip title='Reset'>\n              <Btn\n                icon={<UndoOutlined />}\n                type='primary'\n                onClick={this.handlePresentationStateReset}\n              />\n            </Tooltip>\n          </Space>\n        </Menu.SubMenu>\n      )\n    }\n\n    let segmentationMenu\n    if (segments.length > 0) {\n      const defaultSegmentStyles: {\n        [segmentUID: string]: {\n          opacity: number\n        }\n      } = {}\n      const segmentMetadata: {\n        [segmentUID: string]: dmv.metadata.Segmentation[]\n      } = {}\n      const segments = this.volumeViewer.getAllSegments()\n      segments.forEach(segment => {\n        defaultSegmentStyles[segment.uid] = this.volumeViewer.getSegmentStyle(\n          segment.uid\n        )\n        segmentMetadata[segment.uid] = this.volumeViewer.getSegmentMetadata(\n          segment.uid\n        )\n      })\n      segmentationMenu = (\n        <Menu.SubMenu key='segmentations' title='Segmentations'>\n          <SegmentList\n            segments={segments}\n            metadata={segmentMetadata}\n            defaultSegmentStyles={defaultSegmentStyles}\n            visibleSegmentUIDs={this.state.visibleSegmentUIDs}\n            onSegmentVisibilityChange={this.handleSegmentVisibilityChange}\n            onSegmentStyleChange={this.handleSegmentStyleChange}\n          />\n        </Menu.SubMenu>\n      )\n      openSubMenuItems.push('segmentations')\n    }\n\n    let parametricMapMenu\n    if (mappings.length > 0) {\n      const defaultMappingStyles: {\n        [mappingUID: string]: {\n          opacity: number\n        }\n      } = {}\n      const mappingMetadata: {\n        [mappingUID: string]: dmv.metadata.ParametricMap[]\n      } = {}\n      mappings.forEach(mapping => {\n        defaultMappingStyles[mapping.uid] = this.volumeViewer.getParameterMappingStyle(\n          mapping.uid\n        )\n        mappingMetadata[mapping.uid] = this.volumeViewer.getParameterMappingMetadata(\n          mapping.uid\n        )\n      })\n      parametricMapMenu = (\n        <Menu.SubMenu key='parmetric-maps' title='Parametric Maps'>\n          <MappingList\n            mappings={mappings}\n            metadata={mappingMetadata}\n            defaultMappingStyles={defaultMappingStyles}\n            visibleMappingUIDs={this.state.visibleMappingUIDs}\n            onMappingVisibilityChange={this.handleMappingVisibilityChange}\n            onMappingStyleChange={this.handleMappingStyleChange}\n          />\n        </Menu.SubMenu>\n      )\n      openSubMenuItems.push('parametric-maps')\n    }\n\n    let annotationGroupMenu\n\n    if (annotations.length > 0) {\n      annotations.forEach((annotation) => {\n        const roi = this.volumeViewer.getROI(annotation.uid)\n        const key = _getRoiKey(roi) as string\n        const color = this.roiStyles[key] !== undefined\n          ? this.roiStyles[key].stroke?.color.slice(0, 3)\n          : DEFAULT_ANNOTATION_COLOR_PALETTE[\n            Object.keys(this.roiStyles).length % DEFAULT_ANNOTATION_COLOR_PALETTE.length\n          ]\n        this.defaultAnnotationStyles[annotation.uid] = {\n          color,\n          opacity: DEFAULT_ANNOTATION_OPACITY\n        } as any\n\n        this.roiStyles[key] = this.generateRoiStyle(\n          this.defaultAnnotationStyles[annotation.uid]\n        )\n      })\n    }\n\n    if (annotationGroups.length > 0) {\n      const annotationGroupMetadata: {\n        [annotationGroupUID: string]: dmv.metadata.MicroscopyBulkSimpleAnnotations\n      } = {}\n      const defaultAnnotationGroupStyles: {\n        [annotationUID: string]: {\n          opacity: number\n          color: number[]\n        }\n      } = {}\n      annotationGroups.forEach(annotationGroup => {\n        defaultAnnotationGroupStyles[annotationGroup.uid] = this.volumeViewer.getAnnotationGroupStyle(\n          annotationGroup.uid\n        )\n        annotationGroupMetadata[annotationGroup.uid] = this.volumeViewer.getAnnotationGroupMetadata(\n          annotationGroup.uid\n        )\n      })\n      annotationGroupMenu = (\n        <Menu.SubMenu key='annotation-groups' title='Annotation Groups'>\n          <AnnotationGroupList\n            annotationGroups={annotationGroups}\n            metadata={annotationGroupMetadata}\n            // when adding annotationGroups to annotationCategory list,\n            // make so that this is uses this.defaultAnnotationStyles later instead of defaultAnnotationGroupStyles\n            defaultAnnotationGroupStyles={defaultAnnotationGroupStyles}\n            visibleAnnotationGroupUIDs={this.state.visibleAnnotationGroupUIDs}\n            onAnnotationGroupVisibilityChange={this.handleAnnotationGroupVisibilityChange}\n            onAnnotationGroupStyleChange={this.handleAnnotationGroupStyleChange}\n          />\n        </Menu.SubMenu>\n      )\n      openSubMenuItems.push('annotationGroups')\n    }\n\n    let toolbar\n    let toolbarHeight = '0px'\n    const annotationTools = [\n      <Button\n        tooltip='Draw ROI [Alt+D]'\n        icon={FaDrawPolygon}\n        onClick={this.handleRoiDrawing}\n        isSelected={this.state.isRoiDrawingActive}\n        key='draw-roi-button'\n      />,\n      <Button\n        tooltip='Modify ROIs [Alt+M]'\n        icon={FaHandPointer}\n        onClick={this.handleRoiModification}\n        isSelected={this.state.isRoiModificationActive}\n        key='modify-roi-button'\n      />,\n      <Button\n        tooltip='Translate ROIs [Alt+T]'\n        icon={FaHandPaper}\n        onClick={this.handleRoiTranslation}\n        isSelected={this.state.isRoiTranslationActive}\n        key='translate-roi-button'\n      />,\n      <Button\n        tooltip='Remove selected ROI [Alt+R]'\n        onClick={this.handleRoiRemoval}\n        icon={FaTrash}\n        key='remove-roi-button'\n      />,\n      <Button\n        tooltip='Show/Hide ROIs [Alt+V]'\n        icon={this.state.areRoisHidden ? FaEye : FaEyeSlash}\n        onClick={this.handleRoiVisibilityChange}\n        isSelected={this.state.areRoisHidden}\n        key='toggle-roi-visibility-button'\n      />,\n      <Button\n        tooltip='Save ROIs [Alt+S]'\n        icon={FaSave}\n        onClick={this.handleReportGeneration}\n        key='generate-report-button'\n      />\n    ]\n    const controlTools = [\n      <Button\n        tooltip='Go to [Alt+G]'\n        icon={FaCrosshairs}\n        onClick={this.handleGoTo}\n        key='go-to-slide-position-button'\n      />\n    ]\n    if (this.props.enableAnnotationTools) {\n      toolbar = (\n        <Row justify='start'>\n          {annotationTools.map((item, i) => {\n            return <React.Fragment key={i}>{item}</React.Fragment>\n          })}\n          {controlTools.map((item, i) => {\n            return <React.Fragment key={i}>{item}</React.Fragment>\n          })}\n        </Row>\n      )\n      toolbarHeight = '50px'\n    }\n\n    let cursor = 'default'\n    if (this.state.isLoading) {\n      cursor = 'progress'\n    }\n\n    let selectedRoiInformation\n    if (this.state.selectedRoi != null) {\n      const roiAttributes: Array<{\n        name: string\n        value: string\n        unit?: string\n      }> = [\n        {\n          name: 'UID',\n          value: this.state.selectedRoi.uid\n        }\n      ]\n      const roiScoordAttributes: Array<{\n        name: string\n        value: string\n      }> = [\n        {\n          name: 'Graphic type',\n          value: this.state.selectedRoi.scoord3d.graphicType\n        }\n      ]\n      const roiEvaluationAttributes: Array<{\n        name: string\n        value: string\n      }> = []\n      this.state.selectedRoi.evaluations.forEach(item => {\n        if (item.ValueType === 'CODE') {\n          const codeItem = item as dcmjs.sr.valueTypes.CodeContentItem\n          roiEvaluationAttributes.push({\n            name: codeItem.ConceptNameCodeSequence[0].CodeMeaning,\n            value: codeItem.ConceptCodeSequence[0].CodeMeaning\n          })\n        } else {\n          const textItem = item as dcmjs.sr.valueTypes.TextContentItem\n          roiEvaluationAttributes.push({\n            name: textItem.ConceptNameCodeSequence[0].CodeMeaning,\n            value: textItem.TextValue\n          })\n        }\n      })\n      const roiMeasurmentAttributesPerOpticalPath: {\n        [identifier: string]: Array<{\n          name: string\n          value: string\n          unit?: string\n        }>\n      } = {}\n      this.state.selectedRoi.measurements.forEach(item => {\n        let identifier = 'default'\n        if (item.ContentSequence != null) {\n          const refItems = findContentItemsByName({\n            content: item.ContentSequence,\n            name: new dcmjs.sr.coding.CodedConcept({\n              value: '121112',\n              meaning: 'Source of Measurement',\n              schemeDesignator: 'DCM'\n            })\n          })\n          if (refItems.length > 0) {\n            identifier = (\n              refItems[0]\n                // @ts-expect-error\n                .ReferencedSOPSequence[0]\n                .ReferencedOpticalPathIdentifier\n            )\n          }\n        }\n        if (!(identifier in roiMeasurmentAttributesPerOpticalPath)) {\n          roiMeasurmentAttributesPerOpticalPath[identifier] = []\n        }\n        const measuredValueItem = item.MeasuredValueSequence[0]\n        roiMeasurmentAttributesPerOpticalPath[identifier].push({\n          name: item.ConceptNameCodeSequence[0].CodeMeaning,\n          value: measuredValueItem.NumericValue.toString(),\n          unit: measuredValueItem.MeasurementUnitsCodeSequence[0].CodeMeaning\n        })\n      })\n      const createRoiDescription = (\n        attributes: Array<{ name: string, value: string, unit?: string }>\n      ): React.ReactNode[] => {\n        return attributes.map(item => {\n          let value\n          if (item.unit != null) {\n            value = `${item.value} [${item.unit}]`\n          } else {\n            value = item.value\n          }\n          return (\n            <Descriptions.Item\n              key={item.name}\n              label={item.name}\n            >\n              {value}\n            </Descriptions.Item>\n          )\n        })\n      }\n      const roiDescriptions = createRoiDescription(roiAttributes)\n      const roiScoordDescriptions = createRoiDescription(\n        roiScoordAttributes\n      )\n      const roiEvaluationDescriptions = createRoiDescription(\n        roiEvaluationAttributes\n      )\n      const roiMeasurementDescriptions = []\n      for (const identifier in roiMeasurmentAttributesPerOpticalPath) {\n        const descriptions = createRoiDescription(\n          roiMeasurmentAttributesPerOpticalPath[identifier]\n        )\n        if (identifier === 'default') {\n          roiMeasurementDescriptions.push(descriptions)\n        } else {\n          roiMeasurementDescriptions.push(\n            <>\n              <Divider orientation='left' orientationMargin={0} dashed plain>\n                {identifier}\n              </Divider>\n              {descriptions}\n            </>\n          )\n        }\n      }\n      selectedRoiInformation = (\n        <>\n          <Descriptions layout='horizontal' column={1}>\n            {roiDescriptions}\n          </Descriptions>\n          <Divider orientation='left' orientationMargin={0}>\n            Spatial coordinates\n          </Divider>\n          <Descriptions layout='horizontal' column={1}>\n            {roiScoordDescriptions}\n          </Descriptions>\n          <Divider orientation='left' orientationMargin={0}>\n            Evaluations\n          </Divider>\n          <Descriptions layout='horizontal' column={1}>\n            {roiEvaluationDescriptions}\n          </Descriptions>\n          <Divider orientation='left' orientationMargin={0}>\n            Measurements\n          </Divider>\n          <Descriptions layout='horizontal' column={1}>\n            {roiMeasurementDescriptions}\n          </Descriptions>\n        </>\n      )\n    }\n\n    return (\n      <Layout style={{ height: '100%' }} hasSider>\n        <Layout.Content style={{ height: '100%' }}>\n          {toolbar}\n\n          <div\n            style={{\n              height: `calc(100% - ${toolbarHeight})`,\n              overflow: 'hidden',\n              cursor: cursor\n            }}\n            ref={this.volumeViewportRef}\n          />\n\n          <Modal\n            open={this.state.isAnnotationModalVisible}\n            title='Configure annotations'\n            onOk={this.handleAnnotationConfigurationCompletion}\n            onCancel={this.handleAnnotationConfigurationCancellation}\n            okText='Select'\n          >\n            <Space align='start' direction='vertical'>\n              {annotationConfigurations}\n            </Space>\n          </Modal>\n\n          <Modal\n            open={this.state.isSelectedRoiModalVisible}\n            title='Selected ROI'\n            onCancel={this.handleRoiSelectionCancellation}\n            maskClosable\n            footer={null}\n          >\n            <Space align='start' direction='vertical'>\n              {selectedRoiInformation}\n            </Space>\n          </Modal>\n\n          <Modal\n            open={this.state.isGoToModalVisible}\n            title='Go to slide position'\n            onOk={this.handleSlidePositionSelection}\n            onCancel={this.handleSlidePositionSelectionCancellation}\n            okText='Select'\n          >\n            <Space align='start' direction='vertical'>\n              <InputNumber\n                placeholder={\n                  '[' +\n                  `${this.state.validXCoordinateRange[0]}` +\n                  ', ' +\n                  `${this.state.validXCoordinateRange[1]}` +\n                  ']'\n                }\n                prefix='X Coordinate [mm]'\n                onChange={this.handleXCoordinateSelection}\n                onPressEnter={this.handleXCoordinateSelection}\n                controls={false}\n                addonAfter={\n                  this.state.isSelectedXCoordinateValid\n                    ? (\n                      <CheckOutlined style={{ color: 'rgba(0,0,0,.45)' }} />\n                      )\n                    : (\n                      <StopOutlined style={{ color: 'rgba(0,0,0,.45)' }} />\n                      )\n                }\n              />\n              <InputNumber\n                placeholder={\n                  '[' +\n                  `${this.state.validYCoordinateRange[0]}` +\n                  ', ' +\n                  `${this.state.validYCoordinateRange[1]}` +\n                  ']'\n                }\n                prefix='Y Coordinate [mm]'\n                onChange={this.handleYCoordinateSelection}\n                onPressEnter={this.handleYCoordinateSelection}\n                controls={false}\n                addonAfter={\n                  this.state.isSelectedYCoordinateValid\n                    ? (\n                      <CheckOutlined style={{ color: 'rgba(0,0,0,.45)' }} />\n                      )\n                    : (\n                      <StopOutlined style={{ color: 'rgba(0,0,0,.45)' }} />\n                      )\n                }\n              />\n              <InputNumber\n                placeholder='[0 - 40]'\n                prefix='Magnification'\n                onChange={this.handleMagnificationSelection}\n                onPressEnter={this.handleMagnificationSelection}\n                controls={false}\n                addonAfter={\n                  this.state.isSelectedMagnificationValid\n                    ? (\n                      <CheckOutlined style={{ color: 'rgba(0,0,0,.45)' }} />\n                      )\n                    : (\n                      <StopOutlined style={{ color: 'rgba(0,0,0,.45)' }} />\n                      )\n                }\n              />\n            </Space>\n          </Modal>\n\n          <Modal\n            open={this.state.isReportModalVisible}\n            title='Verify and save report'\n            onOk={this.handleReportVerification}\n            onCancel={this.handleReportCancellation}\n            okText='Save'\n          >\n            {report}\n          </Modal>\n        </Layout.Content>\n\n        <Layout.Sider\n          width={300}\n          reverseArrow\n          style={{\n            borderLeft: 'solid',\n            borderLeftWidth: 0.25,\n            overflow: 'hidden',\n            background: 'none'\n          }}\n        >\n          <Menu\n            mode='inline'\n            defaultOpenKeys={openSubMenuItems}\n            style={{ height: '100%' }}\n            inlineIndent={14}\n            forceSubMenuRender\n            onOpenChange={() => {\n              // Give menu item time to render before updating viewer size\n              setTimeout(() => {\n                if (this.labelViewer != null) {\n                  this.labelViewer.resize()\n                }\n              }, 100)\n            }}\n          >\n            {this.labelViewportRef.current != null && (\n              <Menu.SubMenu key='label' title='Slide label'>\n                <Menu.Item style={{ height: '100%' }} key='image'>\n                  <div\n                    style={{ height: '220px' }}\n                    ref={this.labelViewportRef}\n                  />\n                </Menu.Item>\n              </Menu.SubMenu>\n            )}\n            {specimenMenu}\n            {equipmentMenu}\n            {opticalPathMenu}\n            {presentationStateMenu}\n            <Menu.SubMenu key='annotations' title='Annotations'>\n              {annotationMenuItems}\n            </Menu.SubMenu>\n            {annotationGroupMenu}\n            {annotations.length === 0\n              ? (\n                <></>\n                )\n              : (\n                <Menu.SubMenu\n                  key='annotation-category'\n                  title='Annotation Categories'\n                >\n                  <AnnotationCategoryList\n                    annotations={annotations}\n                    onChange={this.handleAnnotationVisibilityChange}\n                    checkedAnnotationUids={this.state.visibleRoiUIDs}\n                    onStyleChange={this.handleRoiStyleChange}\n                    defaultAnnotationStyles={this.defaultAnnotationStyles}\n                  />\n                </Menu.SubMenu>\n                )}\n            {segmentationMenu}\n            {parametricMapMenu}\n          </Menu>\n        </Layout.Sider>\n        {this.state.isHoveredRoiTooltipVisible &&\n        this.state.hoveredRoiAttributes.length > 0\n          ? (\n            <HoveredRoiTooltip\n              xPosition={this.state.hoveredRoiTooltipX}\n              yPosition={this.state.hoveredRoiTooltipY}\n              attributes={this.state.hoveredRoiAttributes}\n            />\n            )\n          : (\n            <></>\n            )}\n      </Layout>\n    )\n  }\n}\n\nexport default withRouter(SlideViewer)\n","import * as dmv from 'dicom-microscopy-viewer'\nimport * as dcmjs from 'dcmjs'\nimport { AnnotationCategoryAndType } from '../components/AnnotationCategoryList'\n\nexport const adaptRoiToAnnotation = (roi: dmv.roi.ROI): AnnotationCategoryAndType => {\n  const { uid, evaluations } = roi\n\n  const result = {\n    category: {\n      CodeValue: 'undefined',\n      CodeMeaning: 'undefined',\n      CodingSchemeDesignator: 'undefined'\n    },\n    type: {\n      CodeValue: 'undefined',\n      CodeMeaning: 'undefined',\n      CodingSchemeDesignator: 'undefined'\n    }\n  }\n\n  evaluations.forEach((\n    item: (\n      dcmjs.sr.valueTypes.TextContentItem |\n      dcmjs.sr.valueTypes.CodeContentItem\n    )\n  ) => {\n    const nameValue = item.ConceptNameCodeSequence[0].CodeValue\n    if (item.ValueType === dcmjs.sr.valueTypes.ValueTypes.CODE) {\n      const codeContentItem = item as dcmjs.sr.valueTypes.CodeContentItem\n      const value = codeContentItem.ConceptCodeSequence[0]\n      // For consistency with Segment and Annotation Group\n      if (nameValue === '276214006') {\n        result.category = { ...value }\n      } else if (nameValue === '121071') {\n        result.type = { ...value }\n      }\n    }\n  })\n\n  return {\n    ...result,\n    uid\n  }\n}\n","import * as dmv from 'dicom-microscopy-viewer'\nimport { CustomError, errorTypes } from '../utils/CustomError'\nimport NotificationMiddleware, {\n  NotificationMiddlewareContext\n} from '../services/NotificationMiddleware'\n\nenum ImageFlavors {\n  VOLUME = 'VOLUME',\n  LABEL = 'LABEL',\n  OVERVIEW = 'OVERVIEW',\n  THUMBNAIL = 'THUMBNAIL'\n}\n\nconst hasImageFlavor = (\n  image: dmv.metadata.VLWholeSlideMicroscopyImage,\n  imageFlavor: ImageFlavors\n): boolean => {\n  return image.ImageType[2] === imageFlavor\n}\n\nconst areSameAcquisition = (\n  image: dmv.metadata.VLWholeSlideMicroscopyImage,\n  refImage: dmv.metadata.VLWholeSlideMicroscopyImage\n): boolean => {\n  if (image.AcquisitionUID != null) {\n    return image.AcquisitionUID === refImage.AcquisitionUID\n  }\n  return false\n}\n\ninterface SlideImageCollection {\n  acquisitionUID?: string\n  frameOfReferenceUID: string\n  containerIdentifier: string\n  volumeImages: dmv.metadata.VLWholeSlideMicroscopyImage[]\n  labelImages: dmv.metadata.VLWholeSlideMicroscopyImage[]\n  overviewImages: dmv.metadata.VLWholeSlideMicroscopyImage[]\n}\n\ninterface SlideOptions {\n  images: dmv.metadata.VLWholeSlideMicroscopyImage[]\n  description?: string\n}\n\n/**\n * Slide - collection of images with the same Frame of Reference UID and\n * Container Identifier.\n */\nclass Slide {\n  readonly description: string\n  readonly acquisitionUID: string | null | undefined\n  readonly frameOfReferenceUID: string\n  readonly containerIdentifier: string\n  readonly seriesInstanceUIDs: string[]\n  readonly opticalPathIdentifiers: string[]\n  readonly pyramidUIDs: string[] = []\n  readonly areVolumeImagesMonochrome: boolean\n  readonly volumeImages: dmv.metadata.VLWholeSlideMicroscopyImage[]\n  readonly labelImages: dmv.metadata.VLWholeSlideMicroscopyImage[]\n  readonly overviewImages: dmv.metadata.VLWholeSlideMicroscopyImage[]\n\n  /**\n   * @param options\n   * @param options.images - Metadata of images associated with the slide\n   * @param options.description - Description of the slide\n   */\n  constructor (\n    options: SlideOptions\n  ) {\n    if (options.images.length === 0) {\n      NotificationMiddleware.onError(\n        NotificationMiddlewareContext.SLIM,\n        new CustomError(\n          errorTypes.ENCODINGANDDECODING,\n          'Value of option \"images\" have been non-zero length.'\n        )\n      )\n    }\n\n    const seriesInstanceUIDs = new Set([] as string[])\n    const acquisitionUIDs = new Set([] as string[])\n    const opticalPathIdentifiers = new Set([] as string[])\n    const containerIdentifiers = new Set([] as string[])\n    const frameOfReferenceUIDs = {\n      VOLUME: new Set([] as string[]),\n      LABEL: new Set([] as string[]),\n      OVERVIEW: new Set([] as string[])\n    }\n    const pyramidUIDs: {\n      [key: string]: { [opticalPathIdentifier: string]: Set<string> }\n    } = {\n      VOLUME: {}\n    }\n    const volumeImages: dmv.metadata.VLWholeSlideMicroscopyImage[] = []\n    const labelImages: dmv.metadata.VLWholeSlideMicroscopyImage[] = []\n    const overviewImages: dmv.metadata.VLWholeSlideMicroscopyImage[] = []\n    options.images.forEach((image) => {\n      containerIdentifiers.add(image.ContainerIdentifier)\n      seriesInstanceUIDs.add(image.SeriesInstanceUID)\n      image.OpticalPathSequence.forEach(item => {\n        opticalPathIdentifiers.add(item.OpticalPathIdentifier)\n      })\n      if (image.AcquisitionUID != null) {\n        acquisitionUIDs.add(image.AcquisitionUID)\n      }\n      if (\n        hasImageFlavor(image, ImageFlavors.VOLUME) ||\n        hasImageFlavor(image, ImageFlavors.THUMBNAIL)\n      ) {\n        frameOfReferenceUIDs.VOLUME.add(image.FrameOfReferenceUID)\n        if (image.PyramidUID != null) {\n          for (const identifier in opticalPathIdentifiers) {\n            pyramidUIDs.VOLUME[identifier].add(image.PyramidUID)\n          }\n        }\n        volumeImages.push(image)\n      } else if (hasImageFlavor(image, ImageFlavors.LABEL)) {\n        frameOfReferenceUIDs.LABEL.add(image.FrameOfReferenceUID)\n        labelImages.push(image)\n      } else if (hasImageFlavor(image, ImageFlavors.OVERVIEW)) {\n        frameOfReferenceUIDs.OVERVIEW.add(image.FrameOfReferenceUID)\n        overviewImages.push(image)\n      }\n    })\n    if (volumeImages.length === 0) {\n      NotificationMiddleware.onError(\n        NotificationMiddlewareContext.SLIM,\n        new CustomError(\n          errorTypes.ENCODINGANDDECODING,\n          'At least one VOLUME image must be provided for a slide.'\n        )\n      )\n    } else {\n      if (acquisitionUIDs.size > 1) {\n        NotificationMiddleware.onError(\n          NotificationMiddlewareContext.SLIM,\n          new CustomError(\n            errorTypes.ENCODINGANDDECODING,\n            'All VOLUME images of a slide must have the same number of ' +\n            'Samples per Pixel.'\n          )\n        )\n      }\n      const samplesPerPixel = new Set([] as number[])\n      volumeImages.forEach((image) => {\n        samplesPerPixel.add(image.SamplesPerPixel)\n      })\n      if (samplesPerPixel.size > 1) {\n        NotificationMiddleware.onError(\n          NotificationMiddlewareContext.SLIM,\n          new CustomError(\n            errorTypes.ENCODINGANDDECODING,\n            'All VOLUME images of a slide must have the same number of ' +\n            'Samples per Pixel.'\n          )\n        )\n      }\n      const isNotResampled = volumeImages.filter(image => {\n        return image.ImageType[3] !== 'RESAMPLED'\n      })\n      if (isNotResampled.length > opticalPathIdentifiers.size) {\n        console.warn(\n          'the set of VOLUME images of a slide must contain only a single ' +\n            'image that has not been resampled per optical path'\n        )\n      }\n    }\n    this.volumeImages = volumeImages\n    this.labelImages = labelImages\n    this.overviewImages = overviewImages\n\n    this.seriesInstanceUIDs = [...seriesInstanceUIDs]\n    this.opticalPathIdentifiers = [...opticalPathIdentifiers]\n\n    if (containerIdentifiers.size !== 1) {\n      NotificationMiddleware.onError(\n        NotificationMiddlewareContext.SLIM,\n        new CustomError(\n          errorTypes.ENCODINGANDDECODING,\n          'All images of a slide must have the same Container Identifier.'\n        )\n      )\n    }\n    this.containerIdentifier = [...containerIdentifiers][0]\n\n    if (frameOfReferenceUIDs.VOLUME.size !== 1) {\n      NotificationMiddleware.onError(\n        NotificationMiddlewareContext.SLIM,\n        new CustomError(\n          errorTypes.ENCODINGANDDECODING,\n          'All VOLUME images of a slide must have ' +\n          'the same Frame of Reference UID.'\n        )\n      )\n    }\n    this.frameOfReferenceUID = [...frameOfReferenceUIDs.VOLUME][0]\n\n    let requirePyramidUID = false\n    if (Object.keys(pyramidUIDs.VOLUME).length > 0) {\n      requirePyramidUID = true\n    }\n    this.opticalPathIdentifiers.forEach(identifier => {\n      if (pyramidUIDs.VOLUME[identifier] != null) {\n        if (pyramidUIDs.VOLUME[identifier].size > 1) {\n          NotificationMiddleware.onError(\n            NotificationMiddlewareContext.SLIM,\n            new CustomError(\n              errorTypes.ENCODINGANDDECODING,\n              `All VOLUME images for optical path \"${identifier}\"` +\n              'must be part of the same multi-resolution pyramid.'\n            )\n          )\n        } else if (pyramidUIDs.VOLUME[identifier].size === 1) {\n          this.pyramidUIDs.push([...pyramidUIDs.VOLUME[identifier]][0])\n        } else {\n          NotificationMiddleware.onError(\n            NotificationMiddlewareContext.SLIM,\n            new CustomError(\n              errorTypes.ENCODINGANDDECODING,\n              `The VOLUME images for optical path \"${identifier}\" ` +\n              'lack the Pyramid UID, while the images for other optical paths ' +\n              'contain it.'\n            )\n          )\n        }\n      } else {\n        if (requirePyramidUID) {\n          NotificationMiddleware.onError(\n            NotificationMiddlewareContext.SLIM,\n            new CustomError(\n              errorTypes.ENCODINGANDDECODING,\n              `The VOLUME images for optical path \"${identifier}\" ` +\n              'lack the Pyramid UID, while the images for other optical paths ' +\n              'contain it.'\n            )\n          )\n        }\n      }\n    })\n\n    if (acquisitionUIDs.size > 1) {\n      NotificationMiddleware.onError(\n        NotificationMiddlewareContext.SLIM,\n        new CustomError(\n          errorTypes.ENCODINGANDDECODING,\n          'All VOLUME images of a slide must be part of the same  ' +\n          'acquisition and have the same Acquisition UID.'\n        )\n      )\n    } else if (acquisitionUIDs.size === 1) {\n      this.acquisitionUID = [...acquisitionUIDs][0]\n    } else {\n      this.acquisitionUID = null\n    }\n\n    this.areVolumeImagesMonochrome = (\n      this.volumeImages[0].SamplesPerPixel === 1 &&\n      this.volumeImages[0].PhotometricInterpretation === 'MONOCHROME2'\n    )\n\n    this.description = (\n      options.description !== undefined ? options.description : ''\n    )\n  }\n}\n\n/**\n * Create slides.\n *\n * @param imagesPerSeries - Image instances grouped per series\n * @param referenceSeriesInstanceUID - Unique identifier of the series that serves as a reference for the slide\n * @returns Slides\n */\nconst createSlides = (\n  images: dmv.metadata.VLWholeSlideMicroscopyImage[][]\n): Slide[] => {\n  const slideMetadata: SlideImageCollection[] = []\n  images.forEach((series) => {\n    if (series.length > 0) {\n      const volumeImages = series.filter((image) => {\n        return (\n          hasImageFlavor(image, ImageFlavors.VOLUME) ||\n          hasImageFlavor(image, ImageFlavors.THUMBNAIL)\n        )\n      })\n      if (volumeImages.length > 0) {\n        const refImage = volumeImages[0]\n        const filteredVolumeImages = volumeImages.filter((image) => {\n          return refImage.SamplesPerPixel === image.SamplesPerPixel\n        })\n        const slideMetadataIndex = slideMetadata.findIndex((slide) => {\n          return _doesImageBelongToSlide(slide, refImage)\n        })\n\n        const labelImages = series.filter((image) => {\n          return hasImageFlavor(image, ImageFlavors.LABEL)\n        })\n        let filteredLabelImages: dmv.metadata.VLWholeSlideMicroscopyImage[]\n        if (labelImages.length > 1) {\n          filteredLabelImages = labelImages.filter((image) => {\n            return areSameAcquisition(image, refImage)\n          })\n        } else {\n          filteredLabelImages = labelImages\n        }\n        const overviewImages = series.filter((image) => {\n          return hasImageFlavor(image, ImageFlavors.OVERVIEW)\n        })\n        let filteredOverviewImages: dmv.metadata.VLWholeSlideMicroscopyImage[]\n        if (overviewImages.length > 1) {\n          filteredOverviewImages = overviewImages.filter((image) => {\n            return areSameAcquisition(image, refImage)\n          })\n        } else {\n          filteredOverviewImages = overviewImages\n        }\n\n        if (slideMetadataIndex === -1) {\n          const slideMetadataItem: SlideImageCollection = {\n            acquisitionUID: refImage.AcquisitionUID,\n            frameOfReferenceUID: refImage.FrameOfReferenceUID,\n            containerIdentifier: refImage.ContainerIdentifier,\n            volumeImages: filteredVolumeImages,\n            labelImages: filteredLabelImages,\n            overviewImages: filteredOverviewImages\n          }\n          slideMetadata.push(slideMetadataItem)\n        } else {\n          const slideMetadataItem = slideMetadata[slideMetadataIndex]\n          slideMetadataItem.volumeImages.push(...filteredVolumeImages)\n          slideMetadataItem.labelImages.push(...filteredLabelImages)\n          slideMetadataItem.overviewImages.push(...filteredOverviewImages)\n        }\n      }\n    }\n  })\n\n  let slides: Slide[] = slideMetadata.map((item) => {\n    return new Slide({\n      images: [\n        ...item.volumeImages,\n        ...item.labelImages,\n        ...item.overviewImages\n      ]\n    })\n  })\n  slides = slides.sort((a, b) => {\n    const imgA = a.volumeImages[0]\n    const imgB = b.volumeImages[0]\n    if (imgA.ContainerIdentifier != null && imgB.ContainerIdentifier != null) {\n      return Number(imgA.ContainerIdentifier) - Number(imgB.ContainerIdentifier)\n    } else {\n      return 0\n    }\n  })\n\n  return slides\n}\n\n/**\n * Check if instance belongs to the slide.\n *\n * Compares values of Frame of Reference UID and Container Identifier attributes.\n *\n * @param slide - Slide metadata object\n * @param image - Metadata of VOLUME, LABEL or OVERVIEW image instance\n */\nfunction _doesImageBelongToSlide (\n  slide: SlideImageCollection,\n  image: dmv.metadata.VLWholeSlideMicroscopyImage\n): boolean {\n  if (\n    slide.frameOfReferenceUID === image.FrameOfReferenceUID &&\n    slide.containerIdentifier === image.ContainerIdentifier &&\n    slide.acquisitionUID === image.AcquisitionUID\n  ) {\n    return true\n  }\n  return false\n}\n\nexport { Slide, createSlides }\n","import * as dmv from 'dicom-microscopy-viewer'\n\nimport DicomWebManager from '../DicomWebManager'\nimport { StorageClasses } from '../data/uids'\nimport { CustomError, errorTypes } from '../utils/CustomError'\nimport NotificationMiddleware, {\n  NotificationMiddlewareContext\n} from './NotificationMiddleware'\nimport { createSlides, Slide } from '../data/slides'\n\ninterface FetchImageMetadataParams {\n  clients: { [key: string]: DicomWebManager }\n  studyInstanceUID: string\n  onSuccess: (slides: Slide[]) => void\n  onError: (error: Error) => void\n}\n\nexport const fetchImageMetadata = async ({\n  clients,\n  studyInstanceUID,\n  onSuccess,\n  onError\n}: FetchImageMetadataParams): Promise<void> => {\n  try {\n    const images: dmv.metadata.VLWholeSlideMicroscopyImage[][] = []\n    console.info(`search for series of study \"${studyInstanceUID}\"...`)\n\n    const client = clients[StorageClasses.VL_WHOLE_SLIDE_MICROSCOPY_IMAGE]\n    const matchedSeries = await client.searchForSeries({\n      queryParams: {\n        Modality: 'SM',\n        StudyInstanceUID: studyInstanceUID\n      }\n    })\n\n    await Promise.all(\n      matchedSeries.map(async (s) => {\n        const { dataset } = dmv.metadata.formatMetadata(s)\n        const loadingSeries = dataset as dmv.metadata.Series\n        console.info(\n          `retrieve metadata of series \"${loadingSeries.SeriesInstanceUID}\"`\n        )\n        const retrievedMetadata = await client.retrieveSeriesMetadata({\n          studyInstanceUID: studyInstanceUID,\n          seriesInstanceUID: loadingSeries.SeriesInstanceUID\n        })\n\n        const seriesImages: dmv.metadata.VLWholeSlideMicroscopyImage[] = []\n        retrievedMetadata.forEach((item) => {\n          if (\n            item['00080016']?.Value?.[0] ===\n            StorageClasses.VL_WHOLE_SLIDE_MICROSCOPY_IMAGE\n          ) {\n            const image = new dmv.metadata.VLWholeSlideMicroscopyImage({\n              metadata: item\n            })\n            seriesImages.push(image)\n          }\n        })\n\n        if (seriesImages.length > 0) {\n          images.push(seriesImages)\n        }\n      })\n    )\n    const newSlides = createSlides(images)\n    onSuccess(newSlides)\n  } catch (err) {\n    console.error(err)\n    const customError = new CustomError(\n      errorTypes.ENCODINGANDDECODING,\n      'Image metadata could not be retrieved or decoded.'\n    )\n    onError(customError)\n    NotificationMiddleware.onError(\n      NotificationMiddlewareContext.SLIM,\n      customError\n    )\n  }\n}\n","import { useState, useEffect } from 'react'\n\nimport DicomWebManager from '../DicomWebManager'\nimport { Slide } from '../data/slides'\nimport { fetchImageMetadata } from '../services/fetchImageMetadata'\n\ninterface UseSlidesProps {\n  clients: { [key: string]: DicomWebManager }\n  studyInstanceUID: string\n}\n\ninterface UseSlidesReturn {\n  slides: Slide[]\n  isLoading: boolean\n  error: Error | null\n}\n\nconst slidesCache = new Map<string, Slide[]>()\nconst pendingRequests = new Map<string, Promise<Slide[]>>()\n\n/**\n * Hook to fetch and manage whole slide microscopy images for a given study.\n * Values are cached so they can be reused if props are not provided.\n *\n * @param props - Hook configuration props\n * @param props.clients - Map of DICOM web clients keyed by storage class\n */\nexport const useSlides = ({ clients, studyInstanceUID }: UseSlidesProps): UseSlidesReturn => {\n  const [slides, setSlides] = useState<Slide[]>([])\n  const [isLoading, setIsLoading] = useState<boolean>(false)\n  const [error, setError] = useState<Error | null>(null)\n\n  useEffect(() => {\n    if (studyInstanceUID === undefined) {\n      setSlides([])\n      setIsLoading(false)\n      return\n    }\n\n    const cachedData = slidesCache.get(studyInstanceUID)\n    if (cachedData !== undefined) {\n      setSlides(cachedData)\n      setIsLoading(false)\n      return\n    }\n\n    setIsLoading(true)\n\n    const fetchSlides = async (): Promise<void> => {\n      // Check if there's already a pending request for this study\n      let pendingRequest = pendingRequests.get(studyInstanceUID)\n\n      if (pendingRequest === undefined) {\n        // Create a new promise for this request\n        pendingRequest = new Promise((resolve, reject): void => {\n          fetchImageMetadata({\n            clients,\n            studyInstanceUID,\n            onSuccess: (newSlides) => {\n              slidesCache.set(studyInstanceUID, newSlides)\n              resolve(newSlides)\n            },\n            onError: (err) => {\n              reject(err)\n            }\n          }).catch((err) => {\n            reject(err)\n          })\n        })\n        pendingRequests.set(studyInstanceUID, pendingRequest)\n      }\n\n      try {\n        const newSlides = await pendingRequest\n        setSlides(newSlides)\n        setError(null)\n      } catch (err) {\n        setError(err as Error)\n        setSlides([])\n      } finally {\n        pendingRequests.delete(studyInstanceUID)\n        setIsLoading(false)\n      }\n    }\n\n    void fetchSlides()\n  }, [clients, studyInstanceUID])\n\n  return { slides, isLoading, error }\n}\n","import { Routes, Route, useLocation, useParams } from 'react-router-dom'\nimport { Layout, Menu } from 'antd'\n\nimport { AnnotationSettings } from '../AppConfig'\nimport ClinicalTrial from './ClinicalTrial'\nimport DicomWebManager from '../DicomWebManager'\nimport Patient from './Patient'\nimport Study from './Study'\nimport SlideList from './SlideList'\nimport SlideViewer from './SlideViewer'\n\nimport { User } from '../auth'\nimport { Slide } from '../data/slides'\nimport { RouteComponentProps, withRouter } from '../utils/router'\nimport { useSlides } from '../hooks/useSlides'\n\nfunction ParametrizedSlideViewer ({\n  clients,\n  slides,\n  user,\n  app,\n  preload,\n  enableAnnotationTools,\n  annotations\n}: {\n  clients: { [key: string]: DicomWebManager }\n  slides: Slide[]\n  user?: User\n  app: {\n    name: string\n    version: string\n    uid: string\n    organization?: string\n  }\n  preload: boolean\n  enableAnnotationTools: boolean\n  annotations: AnnotationSettings[]\n}): JSX.Element | null {\n  const { studyInstanceUID, seriesInstanceUID } = useParams()\n  const location = useLocation()\n\n  const selectedSlide = slides.find((slide: Slide) => {\n    return slide.seriesInstanceUIDs.find((uid: string) => {\n      return uid === seriesInstanceUID\n    })\n  })\n  const searchParams = new URLSearchParams(location.search)\n  let presentationStateUID: string | null | undefined\n  if (!searchParams.has('access_token')) {\n    presentationStateUID = searchParams.get('state')\n    if (presentationStateUID === null) {\n      presentationStateUID = undefined\n    }\n  }\n  let viewer = null\n  if (selectedSlide != null) {\n    viewer = (\n      <SlideViewer\n        clients={clients}\n        studyInstanceUID={studyInstanceUID}\n        seriesInstanceUID={seriesInstanceUID}\n        selectedPresentationStateUID={presentationStateUID}\n        slide={selectedSlide}\n        preload={preload}\n        annotations={annotations}\n        enableAnnotationTools={enableAnnotationTools}\n        app={app}\n        user={user}\n      />\n    )\n  }\n  return viewer\n}\n\ninterface ViewerProps extends RouteComponentProps {\n  clients: { [key: string]: DicomWebManager }\n  studyInstanceUID: string\n  app: {\n    name: string\n    version: string\n    uid: string\n    organization?: string\n  }\n  annotations: AnnotationSettings[]\n  enableAnnotationTools: boolean\n  preload: boolean\n  user?: {\n    name: string\n    email: string\n  }\n}\n\nfunction Viewer (props: ViewerProps): JSX.Element | null {\n  const { clients, studyInstanceUID, location, navigate } = props\n  const { slides, isLoading } = useSlides({ clients, studyInstanceUID })\n\n  const handleSeriesSelection = ({ seriesInstanceUID }: { seriesInstanceUID: string }): void => {\n    console.info(`switch to series \"${seriesInstanceUID}\"`)\n    let urlPath = (\n      `/studies/${studyInstanceUID}` +\n      `/series/${seriesInstanceUID}`\n    )\n\n    if (location.pathname.includes('/projects/')) {\n      urlPath = location.pathname\n      if (!location.pathname.includes('/series/')) {\n        urlPath += `/series/${seriesInstanceUID}`\n      } else {\n        urlPath = urlPath.replace(/\\/series\\/[^/]+/, `/series/${seriesInstanceUID}`)\n      }\n    }\n\n    if (\n      location.pathname.includes('/series/') &&\n      location.search != null\n    ) {\n      urlPath += location.search\n    }\n\n    navigate(urlPath, { replace: true })\n  }\n\n  if (isLoading) {\n    return null\n  }\n\n  if (slides.length === 0) {\n    return null\n  }\n\n  const firstSlide = slides[0]\n  const volumeInstances = firstSlide.volumeImages\n  if (volumeInstances.length === 0) {\n    return null\n  }\n  const refImage = volumeInstances[0]\n\n  /* If a series is encoded in the path, route the viewer to this series.\n   * Otherwise select the first series correspondent to\n   * the first slide contained in the study.\n   */\n  let selectedSeriesInstanceUID: string\n  if (location.pathname.includes('series/')) {\n    const seriesFragment = location.pathname.split('series/')[1]\n    selectedSeriesInstanceUID = seriesFragment.includes('/') ? seriesFragment.split('/')[0] : seriesFragment\n  } else {\n    selectedSeriesInstanceUID = volumeInstances[0].SeriesInstanceUID\n  }\n\n  let clinicalTrialMenu\n  if (refImage.ClinicalTrialSponsorName != null) {\n    clinicalTrialMenu = (\n      <Menu.SubMenu key='clinical-trial' title='Clinical Trial'>\n        <ClinicalTrial metadata={refImage} />\n      </Menu.SubMenu>\n    )\n  }\n\n  return (\n    <Layout style={{ height: '100%' }} hasSider>\n      <Layout.Sider\n        width={300}\n        style={{\n          height: '100%',\n          borderRight: 'solid',\n          borderRightWidth: 0.25,\n          overflow: 'hidden',\n          background: 'none'\n        }}\n      >\n        <Menu\n          mode='inline'\n          defaultOpenKeys={['patient', 'study', 'clinical-trial', 'slides']}\n          style={{ height: '100%' }}\n          inlineIndent={14}\n        >\n          <Menu.SubMenu key='patient' title='Patient'>\n            <Patient metadata={refImage} />\n          </Menu.SubMenu>\n          <Menu.SubMenu key='study' title='Study'>\n            <Study metadata={refImage} />\n          </Menu.SubMenu>\n          {clinicalTrialMenu}\n          <Menu.SubMenu key='slides' title='Slides'>\n            <SlideList\n              clients={props.clients}\n              metadata={slides}\n              selectedSeriesInstanceUID={selectedSeriesInstanceUID}\n              onSeriesSelection={handleSeriesSelection}\n            />\n          </Menu.SubMenu>\n        </Menu>\n      </Layout.Sider>\n\n      <Routes>\n        <Route\n          path='/series/:seriesInstanceUID'\n          element={\n            <ParametrizedSlideViewer\n              clients={props.clients}\n              slides={slides}\n              preload={props.preload}\n              annotations={props.annotations}\n              enableAnnotationTools={props.enableAnnotationTools}\n              app={props.app}\n              user={props.user}\n            />\n          }\n        />\n      </Routes>\n    </Layout>\n  )\n}\n\nexport default withRouter(Viewer)\n","import dcmjs from 'dcmjs'\n\nconst { DicomMetaDictionary } = dcmjs.data\n// @ts-expect-error\nconst { nameMap } = DicomMetaDictionary\n\ninterface TagInfo {\n  tag: string\n  vr: string\n  keyword: string\n  value: string\n  children?: TagInfo[]\n  level: number\n}\n\nexport interface DicomTag {\n  name: string\n  vr: string\n  Value?: any[]\n  [key: string]: any\n}\n\nconst formatValue = (val: any): string => {\n  if (typeof val === 'object' && val !== null) {\n    return JSON.stringify(val)\n  }\n  return String(val)\n}\n\nexport const formatTagValue = (tag: DicomTag): string => {\n  if (tag.Value == null) return ''\n\n  if (Array.isArray(tag.Value)) {\n    return tag.Value.map(formatValue).join(', ')\n  }\n\n  return formatValue(tag.Value)\n}\n\n/**\n * Processes DICOM metadata and returns a flattened array of tag information\n * @param metadata - The DICOM metadata object to process\n * @param depth - The current depth level for nested sequences (default: 0)\n * @returns Array of processed tag information\n */\nexport function getRows (metadata: Record<string, any>, depth = 0): TagInfo[] {\n  const keywords = Object.keys(metadata).filter(key => key !== '_vrMap')\n\n  return keywords.flatMap(keyword => {\n    const tagInfo = nameMap[keyword] as TagInfo | undefined\n    let value = metadata[keyword]\n\n    // Handle private or unknown tags\n    if (tagInfo === undefined) {\n      const regex = /[0-9A-Fa-f]{6}/g\n      if (keyword.match(regex) == null) return []\n\n      return [{\n        tag: `(${keyword.substring(0, 4)},${keyword.substring(4, 8)})`,\n        vr: '',\n        keyword: 'Private Tag',\n        value: value?.toString() ?? '',\n        level: depth\n      }]\n    }\n\n    // Handle sequence values (SQ VR)\n    if (tagInfo.vr === 'SQ' && value !== undefined) {\n      const sequenceItems = Array.isArray(value) ? value : [value]\n\n      // Create a parent sequence node\n      const sequenceNode: TagInfo = {\n        tag: tagInfo.tag,\n        vr: tagInfo.vr,\n        keyword,\n        value: `Sequence with ${sequenceItems.length} item(s)`,\n        level: depth,\n        children: []\n      }\n\n      // Create individual nodes for each sequence item\n      sequenceNode.children = sequenceItems.map((item, index) => {\n        const itemNode: TagInfo = {\n          tag: `${tagInfo.tag}.${index + 1}`,\n          vr: 'Item',\n          keyword: `Item ${index + 1}`,\n          value: `Sequence Item ${index + 1}`,\n          level: depth + 1,\n          children: getRows(item, depth + 2)\n        }\n        return itemNode\n      })\n\n      return [sequenceNode]\n    }\n\n    // Handle array values\n    if (Array.isArray(value)) {\n      value = value.map(formatValue).join('\\\\')\n    } else if (typeof value === 'object' && value !== null) {\n      value = formatValue(value)\n    }\n\n    return [{\n      tag: tagInfo.tag,\n      vr: tagInfo.vr,\n      keyword: keyword.replace('RETIRED_', ''),\n      value: value?.toString() ?? '',\n      level: depth\n    }]\n  })\n}\n\n/**\n * Sorts DICOM tags alphabetically by tag value\n * @param metadata - The DICOM metadata object to process\n * @returns Sorted array of tag information\n */\nexport function getSortedTags (metadata: Record<string, any>): TagInfo[] {\n  const tagList = getRows(metadata)\n  return tagList.sort((a, b) => a.tag.localeCompare(b.tag))\n}\n","/**\n * Formats a DICOM datetime string (YYYYMMDD:HHmmss) into a human-readable format\n *\n * @param dateStr - DICOM datetime string in format \"YYYYMMDD:HHmmss\"\n * @returns Formatted date string (e.g., \"Mon, Jan 1 2024\")\n * @example\n * formatDicomDate(\"20240101:120000\") // Returns \"Mon, Jan 1 2024\"\n * formatDicomDate(\"invalid\") // Returns \"invalid\"\n */\nexport const formatDicomDate = (dateStr: string): string => {\n  // Parse YYYYMMDD:HHmmss format\n  const match = dateStr.match(/^(\\d{4})(\\d{2})(\\d{2}):(\\d{2})(\\d{2})(\\d{2})/)\n  if (match == null) return dateStr\n\n  const [, year, month, day, hour, minute, second] = match\n\n  // Validate month and day\n  const monthNum = parseInt(month)\n  const dayNum = parseInt(day)\n  if (monthNum < 1 || monthNum > 12 || dayNum < 1 || dayNum > 31) {\n    return dateStr\n  }\n\n  const date = new Date(\n    parseInt(year),\n    monthNum - 1, // months are 0-based\n    dayNum,\n    parseInt(hour),\n    parseInt(minute),\n    parseInt(second)\n  )\n\n  // Check if the date is invalid or if the month/day combination is invalid\n  // This catches cases like February 31st where the date rolls over to March\n  if (\n    date.getMonth() !== monthNum - 1 || // month rolled over\n    date.getDate() !== dayNum // day rolled over\n  ) {\n    return dateStr\n  }\n\n  // Format parts separately to avoid the extra comma\n  const weekday = date.toLocaleDateString('en-US', { weekday: 'short' })\n  const monthName = date.toLocaleDateString('en-US', { month: 'short' })\n  const dayFormatted = date.getDate()\n  const yearNum = date.getFullYear()\n\n  return `${weekday}, ${monthName} ${dayFormatted} ${yearNum}`\n}\n","import { useState, useMemo, useEffect } from 'react'\nimport { Select, Input, Slider, Typography, Table } from 'antd'\nimport { SearchOutlined } from '@ant-design/icons'\n\nimport DicomWebManager from '../../DicomWebManager'\nimport './DicomTagBrowser.css'\nimport { useSlides } from '../../hooks/useSlides'\nimport { getSortedTags } from './dicomTagUtils'\nimport { formatDicomDate } from '../../utils/formatDicomDate'\n\nconst { Option } = Select\n\ninterface DisplaySet {\n  displaySetInstanceUID: number\n  SeriesDate: string\n  SeriesTime: string\n  SeriesNumber: number\n  SeriesDescription: string\n  Modality: string\n  images: any[]\n}\n\ninterface TableDataItem {\n  key: string\n  tag: string\n  vr: string\n  keyword: string\n  value: string\n  children?: TableDataItem[]\n}\n\ninterface DicomTagBrowserProps {\n  clients: { [key: string]: DicomWebManager }\n  studyInstanceUID: string\n}\n\nconst DicomTagBrowser = ({ clients, studyInstanceUID }: DicomTagBrowserProps): JSX.Element => {\n  const { slides, isLoading } = useSlides({ clients, studyInstanceUID })\n\n  const [displaySets, setDisplaySets] = useState<DisplaySet[]>([])\n  const [selectedDisplaySetInstanceUID, setSelectedDisplaySetInstanceUID] = useState(0)\n  const [instanceNumber, setInstanceNumber] = useState(1)\n  const [filterValue, setFilterValue] = useState('')\n  const [expandedKeys, setExpandedKeys] = useState<string[]>([])\n  const [searchExpandedKeys, setSearchExpandedKeys] = useState<string[]>([])\n\n  useEffect(() => {\n    if (slides.length === 0) return\n\n    const updatedDisplaySets = slides\n      .map((slide, index) => {\n        const { volumeImages } = slide\n        if (volumeImages?.[0] === undefined) return null\n\n        const {\n          SeriesDate,\n          SeriesTime,\n          SeriesNumber,\n          SeriesDescription,\n          Modality\n        } = volumeImages[0]\n\n        return {\n          displaySetInstanceUID: index,\n          SeriesDate,\n          SeriesTime,\n          SeriesNumber,\n          SeriesDescription,\n          Modality,\n          images: volumeImages\n        }\n      })\n      .filter((set): set is DisplaySet => set !== null)\n\n    setDisplaySets(updatedDisplaySets)\n  }, [slides])\n\n  const displaySetList = useMemo(() => {\n    displaySets.sort((a, b) => a.SeriesNumber - b.SeriesNumber)\n    return displaySets.map((displaySet) => {\n      const {\n        displaySetInstanceUID,\n        SeriesDate,\n        SeriesTime,\n        SeriesNumber,\n        SeriesDescription,\n        Modality\n      } = displaySet\n\n      const dateStr = `${SeriesDate}:${SeriesTime}`.split('.')[0]\n      const displayDate = formatDicomDate(dateStr)\n\n      return {\n        value: displaySetInstanceUID,\n        label: `${SeriesNumber} (${Modality}): ${SeriesDescription}`,\n        description: displayDate\n      }\n    })\n  }, [displaySets])\n\n  const showInstanceList =\n    displaySets[selectedDisplaySetInstanceUID]?.images.length > 1\n\n  const instanceSliderMarks = useMemo(() => {\n    if (displaySets[selectedDisplaySetInstanceUID] === undefined) return {}\n    const totalInstances = displaySets[selectedDisplaySetInstanceUID].images.length\n\n    // Create marks for first, middle, and last instances\n    const marks: Record<number, string> = {\n      1: '1', // First\n      [Math.ceil(totalInstances / 2)]: String(Math.ceil(totalInstances / 2)), // Middle\n      [totalInstances]: String(totalInstances) // Last\n    }\n\n    return marks\n  }, [selectedDisplaySetInstanceUID, displaySets])\n\n  const columns = [\n    {\n      title: 'Tag',\n      dataIndex: 'tag',\n      key: 'tag',\n      width: '30%'\n    },\n    {\n      title: 'VR',\n      dataIndex: 'vr',\n      key: 'vr',\n      width: '5%'\n    },\n    {\n      title: 'Keyword',\n      dataIndex: 'keyword',\n      key: 'keyword',\n      width: '30%'\n    },\n    {\n      title: 'Value',\n      dataIndex: 'value',\n      key: 'value',\n      width: '40%'\n    }\n  ]\n\n  const tableData = useMemo(() => {\n    const transformTagsToTableData = (tags: any[], parentKey = ''): TableDataItem[] => {\n      return tags.map((tag, index) => {\n        // Create a unique key that includes the parent path\n        const currentKey = parentKey !== undefined ? `${parentKey}-${index}` : `${index}`\n\n        const item: TableDataItem = {\n          key: currentKey,\n          tag: tag.tag,\n          vr: tag.vr,\n          keyword: tag.keyword,\n          value: tag.value\n        }\n\n        if (tag.children !== undefined && tag.children.length > 0) {\n          // Pass the current key as parent for nested items\n          item.children = transformTagsToTableData(tag.children, currentKey)\n        }\n\n        return item\n      })\n    }\n\n    if (displaySets[selectedDisplaySetInstanceUID] === undefined) return []\n    const metadata = displaySets[selectedDisplaySetInstanceUID]?.images[instanceNumber - 1]\n    const tags = getSortedTags(metadata)\n    return transformTagsToTableData(tags)\n  }, [instanceNumber, selectedDisplaySetInstanceUID, displaySets])\n\n  const filteredData = useMemo(() => {\n    if (filterValue === undefined || filterValue === '') return tableData\n\n    const searchLower = filterValue.toLowerCase()\n    const newSearchExpandedKeys: string[] = []\n\n    const filterNodes = (nodes: TableDataItem[], parentKey = ''): TableDataItem[] => {\n      return nodes.map(node => {\n        const newNode = { ...node }\n\n        const matchesSearch =\n          (node.tag?.toLowerCase() ?? '').includes(searchLower) ||\n          (node.vr?.toLowerCase() ?? '').includes(searchLower) ||\n          (node.keyword?.toLowerCase() ?? '').includes(searchLower) ||\n          (node.value?.toString().toLowerCase() ?? '').includes(searchLower)\n\n        if (node.children != null) {\n          const filteredChildren = filterNodes(node.children, node.key)\n          newNode.children = filteredChildren\n\n          if (matchesSearch || filteredChildren.length > 0) {\n            // Add all parent keys to maintain the expansion chain\n            if (parentKey !== undefined) {\n              newSearchExpandedKeys.push(parentKey)\n            }\n            newSearchExpandedKeys.push(node.key)\n            return newNode\n          }\n        }\n\n        return matchesSearch ? newNode : null\n      }).filter((node): node is TableDataItem => node !== null)\n    }\n\n    const filtered = filterNodes(tableData)\n    setSearchExpandedKeys(newSearchExpandedKeys)\n    return filtered\n  }, [tableData, filterValue])\n\n  // Reset search expanded keys when search is cleared\n  useEffect(() => {\n    if (filterValue === undefined || filterValue === '') {\n      setSearchExpandedKeys([])\n    }\n  }, [filterValue])\n\n  // Combine manual expansion with search expansion\n  const allExpandedKeys = useMemo(() => {\n    return [...new Set([...expandedKeys, ...searchExpandedKeys])]\n  }, [expandedKeys, searchExpandedKeys])\n\n  if (isLoading) {\n    return <div>Loading...</div>\n  }\n\n  return (\n    <div className='dicom-tag-browser'>\n      <div\n        style={{\n          width: '100%',\n          padding: '16px 20px 20px'\n        }}\n      >\n        <div style={{ display: 'flex', gap: '24px', marginBottom: '32px' }}>\n          <div style={{ flex: 1 }}>\n            <Typography.Text strong style={{ display: 'block', marginBottom: '8px' }}>Slides</Typography.Text>\n            <Select\n              style={{ width: '100%' }}\n              value={selectedDisplaySetInstanceUID}\n              defaultValue={0}\n              onChange={(value) => {\n                setSelectedDisplaySetInstanceUID(value)\n                setInstanceNumber(1)\n              }}\n              optionLabelProp='label'\n              optionFilterProp='label'\n            >\n              {displaySetList.map((item) => (\n                <Option key={item.value} value={item.value} label={item.label}>\n                  <div>\n                    <div>{item.label}</div>\n                    <div\n                      style={{ fontSize: '12px', color: 'rgba(0, 0, 0, 0.45)' }}\n                    >\n                      {item.description}\n                    </div>\n                  </div>\n                </Option>\n              ))}\n            </Select>\n          </div>\n\n          {showInstanceList && (\n            <div style={{ flex: 1 }}>\n              <Typography.Text strong style={{ display: 'block', marginBottom: '8px' }}>\n                Instance Number: {instanceNumber}\n              </Typography.Text>\n              <Slider\n                min={1}\n                max={displaySets[selectedDisplaySetInstanceUID]?.images.length}\n                value={instanceNumber}\n                onChange={(value) => setInstanceNumber(value)}\n                marks={instanceSliderMarks}\n                tooltip={{\n                  formatter: (value: number | undefined) => value !== undefined ? `Instance ${value}` : ''\n                }}\n              />\n            </div>\n          )}\n        </div>\n\n        <Input\n          style={{ marginBottom: '20px' }}\n          placeholder='Search DICOM tags...'\n          prefix={<SearchOutlined />}\n          onChange={(e) => setFilterValue(e.target.value)}\n          value={filterValue}\n        />\n\n        <Table\n          columns={columns}\n          dataSource={filteredData}\n          pagination={false}\n          expandable={{\n            expandedRowKeys: allExpandedKeys,\n            onExpandedRowsChange: (keys) => setExpandedKeys(keys as string[])\n          }}\n          size='small'\n          scroll={{ y: 500 }}\n        />\n      </div>\n    </div>\n  )\n}\n\nexport default DicomTagBrowser\n","import React from 'react'\nimport { NavLink } from 'react-router-dom'\nimport {\n  Col,\n  Descriptions,\n  Dropdown,\n  Input,\n  Layout,\n  Modal,\n  Row,\n  Space,\n  Badge,\n  Collapse\n} from 'antd'\nimport {\n  ApiOutlined,\n  CheckOutlined,\n  InfoOutlined,\n  StopOutlined,\n  FileSearchOutlined,\n  UnorderedListOutlined,\n  UserOutlined,\n  SettingOutlined\n} from '@ant-design/icons'\nimport { detect } from 'detect-browser'\n\nimport Button from './Button'\nimport { RouteComponentProps, withRouter } from '../utils/router'\nimport NotificationMiddleware, { NotificationMiddlewareEvents } from '../services/NotificationMiddleware'\nimport { CustomError } from '../utils/CustomError'\nimport { v4 as uuidv4 } from 'uuid'\nimport DicomTagBrowser from './DicomTagBrowser/DicomTagBrowser'\nimport DicomWebManager from '../DicomWebManager'\n\ninterface HeaderProps extends RouteComponentProps {\n  app: {\n    name: string\n    version: string\n    homepage: string\n    uid: string\n    organization?: string\n  }\n  user?: {\n    name: string\n    email: string\n  }\n  clients: { [key: string]: DicomWebManager }\n  showWorklistButton: boolean\n  onServerSelection: ({ url }: { url: string }) => void\n  onUserLogout?: () => void\n  showServerSelectionButton: boolean\n}\n\ninterface ExtendedCustomError extends CustomError {\n  source: string\n}\n\ninterface HeaderState {\n  selectedServerUrl?: string\n  isServerSelectionModalVisible: boolean\n  isServerSelectionDisabled: boolean\n  errorObj: ExtendedCustomError[]\n  errorCategory: string[]\n  warnings: string[]\n}\n\n/**\n * React component for the application header.\n */\nclass Header extends React.Component<HeaderProps, HeaderState> {\n  constructor (props: HeaderProps) {\n    super(props)\n    this.state = {\n      isServerSelectionModalVisible: false,\n      isServerSelectionDisabled: true,\n      errorObj: [],\n      errorCategory: [],\n      warnings: []\n    }\n\n    const onErrorHandler = ({ source, error }: {\n      source: string\n      error: CustomError\n    }): void => {\n      this.setState(state => ({\n        ...state,\n        errorObj: [...state.errorObj, { ...error, source }],\n        errorCategory: [...state.errorCategory, error.type]\n      }))\n    }\n\n    const onWarningHandler = (warning: string): void => {\n      this.setState(state => ({\n        ...state,\n        warnings: [...state.warnings, warning]\n      }))\n    }\n\n    NotificationMiddleware.subscribe(\n      NotificationMiddlewareEvents.OnError,\n      onErrorHandler\n    )\n\n    NotificationMiddleware.subscribe(\n      NotificationMiddlewareEvents.OnWarning,\n      onWarningHandler\n    )\n  }\n\n  componentDidUpdate (prevProps: Readonly<HeaderProps>, prevState: Readonly<HeaderState>): void {\n    if (((prevState.warnings.length > 0) || (prevState.errorObj.length > 0)) && this.props.location.pathname !== prevProps.location.pathname) {\n      this.setState({\n        isServerSelectionModalVisible: false,\n        isServerSelectionDisabled: true,\n        errorObj: [],\n        errorCategory: [],\n        warnings: []\n      })\n    }\n  }\n\n  handleInfoButtonClick = (): void => {\n    const browser = detect()\n    const environment: {\n      browser: {\n        name?: string\n        version?: string\n      }\n      os: {\n        name?: string\n      }\n    } = {\n      browser: {},\n      os: {}\n    }\n    if (browser != null) {\n      environment.browser = {\n        name: browser.name != null ? browser.name : undefined,\n        version: browser.version != null ? browser.version : undefined\n      }\n      environment.os = {\n        name: browser.os != null ? browser.os : undefined\n      }\n    }\n\n    Modal.info({\n      title: 'About',\n      width: 600,\n      content: (\n        <>\n          <Descriptions title='Application' column={1}>\n            <Descriptions.Item label='Name'>\n              {this.props.app.name}\n            </Descriptions.Item>\n            <Descriptions.Item label='Version'>\n              {this.props.app.version}\n            </Descriptions.Item>\n            <Descriptions.Item label='Homepage'>\n              {this.props.app.homepage}\n            </Descriptions.Item>\n          </Descriptions>\n          <Descriptions title='Browser' column={1}>\n            <Descriptions.Item label='Name'>\n              {environment.browser.name}\n            </Descriptions.Item>\n            <Descriptions.Item label='Version'>\n              {environment.browser.version}\n            </Descriptions.Item>\n          </Descriptions>\n          <Descriptions title='Operating System' column={1}>\n            <Descriptions.Item label='Name'>\n              {environment.os.name}\n            </Descriptions.Item>\n          </Descriptions>\n        </>\n      ),\n      onOk (): void {}\n    })\n  }\n\n  handleDicomTagBrowserButtonClick = (): void => {\n    const width = window.innerWidth - 200\n    Modal.info({\n      title: 'DICOM Tag Browser',\n      width,\n      content: <DicomTagBrowser\n        clients={this.props.clients}\n        studyInstanceUID={this.props.params.studyInstanceUID ?? ''}\n               />,\n      onOk (): void {}\n    })\n  }\n\n  handleDebugButtonClick = (): void => {\n    const errorMsgs: {\n      Authentication: string[]\n      Communication: string[]\n      EncodingDecoding: string[]\n      Visualization: string[]\n    } = {\n      Authentication: [],\n      Communication: [],\n      EncodingDecoding: [],\n      Visualization: []\n    }\n\n    type ObjectKey = keyof typeof errorMsgs\n    const errorNum = this.state.errorObj.length\n\n    if (errorNum > 0) {\n      for (let i = 0; i < errorNum; i++) {\n        const category = this.state.errorCategory[i] as ObjectKey\n        errorMsgs[category].push(`${this.state.errorObj[i].message as string} (Source: ${this.state.errorObj[i].source})`)\n      }\n    }\n\n    const { Panel } = Collapse\n\n    const showErrorCount = (errcount: number): JSX.Element => (\n      <Badge count={errcount} />\n    )\n\n    const showWarningCount = (warncount: number): JSX.Element => (\n      <Badge color='green' count={warncount} />\n    )\n\n    Modal.info({\n      title: 'Debug Information\\n (Check console for more information)',\n      width: 800,\n      content: (\n        <Collapse>\n          <Panel\n            header='Communication Error'\n            key='communicationerror'\n            extra={showErrorCount(errorMsgs.Communication.length)}\n          >\n            <ol>\n              {errorMsgs.Communication.map(e => (\n                <li key={uuidv4()}>{e}</li>\n              ))}\n            </ol>\n          </Panel>\n          <Panel\n            header='Data Encoding/Decoding error'\n            key='encodedecodeerror'\n            extra={showErrorCount(errorMsgs.EncodingDecoding.length)}\n          >\n            <ol>\n              {errorMsgs.EncodingDecoding.map(e => (\n                <li key={uuidv4()}>{e}</li>\n              ))}\n            </ol>\n          </Panel>\n          <Panel\n            header='Visualization error'\n            key='visualizationerror'\n            extra={showErrorCount(errorMsgs.Visualization.length)}\n          >\n            <ol>\n              {errorMsgs.Visualization.map(e => (\n                <li key={uuidv4()}>{e}</li>\n              ))}\n            </ol>\n          </Panel>\n          <Panel\n            header='Authentication error'\n            key='autherror'\n            extra={showErrorCount(errorMsgs.Authentication.length)}\n          >\n            <ol>\n              {errorMsgs.Authentication.map(e => (\n                <li key={uuidv4()}>{e}</li>\n              ))}\n            </ol>\n          </Panel>\n          <Panel\n            header='Warning'\n            key='warning'\n            extra={showWarningCount(this.state.warnings.length)}\n          >\n            <ol>\n              {this.state.warnings.map(warning => (\n                <li key={uuidv4()}>{warning}</li>\n              ))}\n            </ol>\n          </Panel>\n        </Collapse>\n      ),\n      onOk (): void {}\n    })\n  }\n\n  handleServerSelectionButtonClick = (): void => {\n    this.setState({ isServerSelectionModalVisible: true })\n  }\n\n  render (): React.ReactNode {\n    let user = null\n    if (this.props.user !== undefined) {\n      const userMenuItems = []\n      if (this.props.onUserLogout !== undefined) {\n        userMenuItems.push(\n          {\n            label: 'Logout',\n            key: 'user-logout',\n            onClick: () => {\n              if (this.props.onUserLogout !== undefined) {\n                this.props.onUserLogout()\n              }\n            }\n          }\n        )\n      }\n      const userMenu = { items: userMenuItems }\n      user = (\n        <Dropdown menu={userMenu} trigger={['click']}>\n          <Button\n            icon={UserOutlined}\n            onClick={e => e.preventDefault()}\n            label={`${this.props.user.name} (${this.props.user.email})`}\n          />\n        </Dropdown>\n      )\n    }\n\n    let worklistButton\n    if (this.props.showWorklistButton) {\n      worklistButton = (\n        <NavLink to='/'>\n          <Button icon={UnorderedListOutlined} tooltip='Go to worklist' />\n        </NavLink>\n      )\n    }\n\n    const infoButton = (\n      <Button\n        icon={InfoOutlined}\n        tooltip='Get app info'\n        onClick={this.handleInfoButtonClick}\n      />\n    )\n\n    const debugButton = (\n      <Badge count={this.state.errorObj.length}>\n        <Badge color='green' count={this.state.warnings.length}>\n          <Button\n            icon={SettingOutlined}\n            tooltip='Debug info'\n            onClick={this.handleDebugButtonClick}\n          />\n        </Badge>\n      </Badge>\n    )\n\n    const showDicomTagBrowser = this.props.location.pathname.includes('/studies/')\n\n    const dicomTagBrowserButton = showDicomTagBrowser\n      ? (\n        <Button\n          icon={FileSearchOutlined}\n          tooltip='Dicom Tag Browser'\n          onClick={this.handleDicomTagBrowserButtonClick}\n        />\n        )\n      : null\n\n    let serverSelectionButton\n    if (this.props.showServerSelectionButton) {\n      serverSelectionButton = (\n        <Button\n          icon={ApiOutlined}\n          tooltip='Select server'\n          onClick={this.handleServerSelectionButtonClick}\n        />\n      )\n    }\n\n    const handleServerSelectionInput = (\n      event: React.FormEvent<HTMLInputElement>\n    ): void => {\n      const value = event.currentTarget.value\n      let isDisabled = true\n      if (value != null) {\n        try {\n          const url = new URL(value)\n          if (url.protocol.startsWith('http') && url.pathname.length > 0) {\n            isDisabled = false\n          }\n        } catch (TypeError) {}\n      }\n      this.setState({\n        selectedServerUrl: value,\n        isServerSelectionDisabled: isDisabled\n      })\n    }\n\n    const handleServerSelectionCancellation = (): void => {\n      this.setState({\n        selectedServerUrl: undefined,\n        isServerSelectionModalVisible: false,\n        isServerSelectionDisabled: true\n      })\n    }\n\n    const handleServerSelection = (): void => {\n      const url = this.state.selectedServerUrl\n      let closeModal = false\n      if (url != null && url !== '') {\n        if (url.startsWith('http://') || url.startsWith('https://')) {\n          this.props.onServerSelection({ url })\n          closeModal = true\n        }\n      }\n      this.setState({\n        selectedServerUrl: undefined,\n        isServerSelectionModalVisible: !closeModal,\n        isServerSelectionDisabled: true\n      })\n    }\n\n    const logoUrl = process.env.PUBLIC_URL + '/logo.svg'\n\n    return (\n      <>\n        <Layout.Header style={{ width: '100%', padding: '0 14px' }}>\n          <Row>\n            <Col>\n              <Space align='center' direction='horizontal'>\n                <img\n                  src={logoUrl}\n                  alt=''\n                  style={{ height: '64px', margin: '-14px' }}\n                />\n              </Space>\n            </Col>\n            <Col flex='auto' />\n            <Col>\n              <Space direction='horizontal'>\n                {worklistButton}\n                {infoButton}\n                {debugButton}\n                {dicomTagBrowserButton}\n                {serverSelectionButton}\n                {user}\n              </Space>\n            </Col>\n          </Row>\n        </Layout.Header>\n\n        <Modal\n          open={this.state.isServerSelectionModalVisible}\n          title='Select DICOMweb server'\n          onOk={handleServerSelection}\n          onCancel={handleServerSelectionCancellation}\n        >\n          <Input\n            placeholder='Enter base URL of DICOMweb Study Service'\n            onChange={handleServerSelectionInput}\n            onPressEnter={handleServerSelection}\n            addonAfter={\n              this.state.isServerSelectionDisabled\n                ? <StopOutlined style={{ color: 'rgba(0,0,0,.45)' }} />\n                : <CheckOutlined style={{ color: 'rgba(0,0,0,.45)' }} />\n            }\n          />\n        </Modal>\n      </>\n    )\n  }\n}\n\nexport default withRouter(Header)\n","import React from 'react'\nimport { Result } from 'antd'\n\ninterface InfoPageProps {\n  type: string\n  title?: string\n  message?: string\n}\n\nconst InfoPage = ({ title, message }: InfoPageProps): JSX.Element => {\n  return (\n    <div style={{\n      height: '100vh',\n      display: 'flex',\n      alignItems: 'center',\n      justifyContent: 'center'\n    }}\n    >\n      <Result\n        title={title}\n        subTitle={message}\n      />\n    </div>\n  )\n}\n\nexport default InfoPage\n","import React from 'react'\nimport { Button, Input, Space, Table, TablePaginationConfig } from 'antd'\nimport { ColumnsType } from 'antd/es/table'\nimport { FilterConfirmProps } from 'antd/es/table/interface'\nimport { SearchOutlined } from '@ant-design/icons'\nimport DicomWebManager from '../DicomWebManager'\n\nimport * as dmv from 'dicom-microscopy-viewer'\n\nimport { StorageClasses } from '../data/uids'\nimport { withRouter, RouteComponentProps } from '../utils/router'\nimport { parseDate, parseName, parseSex, parseTime } from '../utils/values'\nimport { CustomError, errorTypes } from '../utils/CustomError'\nimport NotificationMiddleware, {\n  NotificationMiddlewareContext\n} from '../services/NotificationMiddleware'\n\ninterface WorklistProps extends RouteComponentProps {\n  clients: { [key: string]: DicomWebManager }\n}\n\ninterface WorklistState {\n  studies: dmv.metadata.Study[]\n  isLoading: boolean\n  numStudies: number\n  pageSize: number\n}\n\nclass Worklist extends React.Component<WorklistProps, WorklistState> {\n  private readonly defaultPageSize = 20\n\n  constructor (props: WorklistProps) {\n    super(props)\n    this.fetchData = this.fetchData.bind(this)\n    this.handleClick = this.handleClick.bind(this)\n    this.handleChange = this.handleChange.bind(this)\n    this.state = {\n      studies: [],\n      isLoading: false,\n      numStudies: 0,\n      pageSize: this.defaultPageSize\n    }\n  }\n\n  searchForStudies (): void {\n    const queryParams: { [key: string]: any } = { ModalitiesInStudy: 'SM' }\n    const searchOptions = { queryParams }\n    // TODO: retrieve remaining results\n    const client = this.props.clients[\n      StorageClasses.VL_WHOLE_SLIDE_MICROSCOPY_IMAGE\n    ]\n    client.searchForStudies(searchOptions).then((studies) => {\n      this.setState({\n        numStudies: studies.length,\n        studies: studies.slice(0, this.state.pageSize).map(study => {\n          const { dataset } = dmv.metadata.formatMetadata(study)\n          return dataset as dmv.metadata.Study\n        })\n      })\n    })\n      .catch((error) => {\n        console.error(error)\n        // eslint-disable-next-line @typescript-eslint/no-floating-promises\n        NotificationMiddleware.onError(\n          NotificationMiddlewareContext.DICOMWEB,\n          new CustomError(\n            errorTypes.COMMUNICATION,\n            'An error occured. Search for studies failed.'\n          )\n        )\n      })\n  }\n\n  componentDidMount (): void {\n    this.searchForStudies()\n  }\n\n  componentDidUpdate (previousProps: WorklistProps): void {\n    if (this.props.clients !== previousProps.clients) {\n      this.searchForStudies()\n    }\n  }\n\n  handleClick (event: React.SyntheticEvent, study: dmv.metadata.Study): void {\n    this.props.navigate(`/studies/${study.StudyInstanceUID}`)\n  }\n\n  fetchData ({ offset, limit, searchCriteria }: {\n    offset: number\n    limit: number\n    searchCriteria?: { [attribute: string]: string }\n  }): void {\n    const queryParams: { [key: string]: any } = {\n      ModalitiesInStudy: 'SM',\n      offset: offset,\n      limit: limit\n    }\n    if (searchCriteria !== undefined) {\n      for (const key in searchCriteria) {\n        const value = searchCriteria[key]\n        if (key === 'PersonName') {\n          queryParams[key] = `*${value}*`\n        } else {\n          queryParams[key] = value\n        }\n      }\n      queryParams.fuzzymatching = 'true'\n    }\n    const searchOptions = { queryParams }\n    const client = this.props.clients[\n      StorageClasses.VL_WHOLE_SLIDE_MICROSCOPY_IMAGE\n    ]\n    client.searchForStudies(searchOptions).then((studies) => {\n      this.setState({\n        studies: studies.map(study => {\n          const { dataset } = dmv.metadata.formatMetadata(study)\n          return dataset as dmv.metadata.Study\n        })\n      })\n    })\n      .catch((error) => {\n        console.error(error)\n        NotificationMiddleware.onError(\n          NotificationMiddlewareContext.DICOMWEB,\n          new CustomError(\n            errorTypes.COMMUNICATION,\n            'Request to search for studies failed.'\n          )\n        )\n      })\n  }\n\n  handleChange (\n    pagination: TablePaginationConfig,\n    filters: any\n  ): void {\n    this.setState({ isLoading: true })\n    let index = pagination.current\n    if (index === undefined) {\n      index = 1\n    }\n    let pageSize = pagination.pageSize\n    if (pageSize === undefined) {\n      pageSize = this.state.pageSize\n    }\n    const offset = pageSize * (index - 1)\n    const limit = pageSize\n    console.debug(`search for studies of page #${index}...`)\n    const searchCriteria: { [attribute: string]: string } = {}\n    for (const dataIndex in filters) {\n      if (filters[dataIndex] !== null) {\n        searchCriteria[dataIndex] = filters[dataIndex][0].toString()\n      }\n    }\n    this.fetchData({ offset, limit, searchCriteria })\n    this.setState({ isLoading: false, pageSize: pageSize })\n  }\n\n  handleSearch = (\n    selectedKeys: React.Key[],\n    confirm: (params?: FilterConfirmProps) => void,\n    dataIndex: string\n  ): void => {\n    confirm()\n  }\n\n  handleReset = (clearFilters: () => void): void => {\n    clearFilters()\n  }\n\n  render (): React.ReactNode {\n    const columns: ColumnsType<dmv.metadata.Study> = [\n      {\n        title: 'Accession Number',\n        dataIndex: 'AccessionNumber',\n        ...this.getColumnSearchProps('AccessionNumber')\n      },\n      {\n        title: 'Study ID',\n        dataIndex: 'StudyID',\n        ...this.getColumnSearchProps('StudyID')\n      },\n      {\n        title: 'Study Date',\n        dataIndex: 'StudyDate',\n        render: (value: string): string => parseDate(value)\n      },\n      {\n        title: 'Study Time',\n        dataIndex: 'StudyTime',\n        render: (value: string): string => parseTime(value)\n      },\n      {\n        title: 'Patient ID',\n        dataIndex: 'PatientID',\n        ...this.getColumnSearchProps('PatientID')\n      },\n      {\n        title: \"Patient's Name\",\n        dataIndex: 'PatientName',\n        render: (value: dmv.metadata.PersonName): string => parseName(value),\n        ...this.getColumnSearchProps('PatientName')\n      },\n      {\n        title: \"Patient's Sex\",\n        dataIndex: 'PatientSex',\n        render: (value: string): string => parseSex(value)\n      },\n      {\n        title: \"Patient's Birthdate\",\n        dataIndex: 'PatientBirthDate',\n        render: (value: string): string => parseDate(value)\n      },\n      {\n        title: \"Referring Physician's Name\",\n        dataIndex: 'ReferringPhysicianName',\n        render: (value: dmv.metadata.PersonName): string => parseName(value)\n      },\n      {\n        title: 'Modalities in Study',\n        dataIndex: 'ModalitiesInStudy',\n        render: (value: string[] | string): string => {\n          if (value === undefined) {\n            /*\n             * This should not happen, since the attribute is required.\n             * However, some origin servers don't include it.\n             */\n            return ''\n          } else {\n            return String(value)\n          }\n        }\n      }\n    ]\n\n    const pagination = {\n      defaultPageSize: this.defaultPageSize,\n      pageSize: this.state.pageSize,\n      hideOnSinglePage: true,\n      showSizeChanger: true,\n      showQuickJumper: true,\n      showTotal: (total: number, range: number[]) => {\n        return `${range[0]}-${range[1]} of ${total} studies`\n      },\n      total: this.state.numStudies\n    }\n\n    return (\n      <Table<dmv.metadata.Study>\n        style={{ cursor: 'pointer' }}\n        columns={columns}\n        rowKey={record => record.StudyInstanceUID}\n        dataSource={this.state.studies}\n        pagination={pagination}\n        onRow={(record: dmv.metadata.Study): object => {\n          return {\n            onClick: (event: React.SyntheticEvent): void => {\n              return this.handleClick(event, record)\n            }\n          }\n        }}\n        onChange={this.handleChange}\n        size='small'\n        loading={this.state.isLoading}\n      />\n    )\n  }\n\n  getColumnSearchProps = (dataIndex: string): object => ({\n    filterDropdown: ({ setSelectedKeys, selectedKeys, confirm, clearFilters }: {\n      setSelectedKeys: (selectedKeys: React.Key[]) => void\n      selectedKeys: React.Key[]\n      confirm: (params?: FilterConfirmProps) => void\n      clearFilters: () => void\n    }) => (\n      <div style={{ padding: 8 }}>\n        <Input\n          placeholder='Search'\n          value={String(selectedKeys[0])}\n          onChange={e => setSelectedKeys(\n            e.target.value !== undefined ? [e.target.value] : []\n          )}\n          onPressEnter={() => this.handleSearch(selectedKeys, confirm, dataIndex)}\n          style={{ width: 188, marginBottom: 8, display: 'block' }}\n        />\n        <Space>\n          <Button\n            type='primary'\n            onClick={() => this.handleSearch(selectedKeys, confirm, dataIndex)}\n            icon={<SearchOutlined />}\n            size='small'\n            style={{ width: 90 }}\n          >\n            Search\n          </Button>\n          <Button\n            onClick={() => this.handleReset(clearFilters)}\n            size='small'\n            style={{ width: 90 }}\n          >\n            Reset\n          </Button>\n        </Space>\n      </div>\n    ),\n    filterIcon: (filtered: boolean) => (\n      <SearchOutlined\n        style={{ color: filtered ? '#1890ff' : undefined }}\n      />\n    )\n  })\n}\n\nexport default withRouter(Worklist)\n","/**\n * Join a URI with a path to form a full URL.\n *\n * @param path - Path component\n * @param uri - Base URI to which the path component should be added\n */\nexport const joinUrl = (path: string, uri: string): string => {\n  let baseUri = uri\n  if (!baseUri.endsWith('/')) {\n    baseUri += '/'\n  }\n  const url = new URL(path, baseUri)\n  return url.toString()\n}\n\n/**\n * Check whether a URL contains an OAuth 2.0 authorization code.\n *\n * @param location - URL components (JavaScript location object)\n * @returns Whether the URL contains a code\n */\nexport const isAuthorizationCodeInUrl = (location: {\n  search: string\n  hash: string\n}): boolean => {\n  const searchParams = new URLSearchParams(location.search)\n  const hashParams = new URLSearchParams(location.hash.replace('#', '?'))\n\n  return Boolean(\n    searchParams.get('code') ??\n    searchParams.get('id_token') ??\n    searchParams.get('session_state') ??\n    hashParams.get('code') ??\n    hashParams.get('id_token') ??\n    hashParams.get('session_state')\n  )\n}\n","import { UserManager, User as UserData } from 'oidc-client'\n\nimport { OidcSettings } from '../AppConfig'\nimport { isAuthorizationCodeInUrl } from '../utils/url'\nimport { User, AuthManager, SignInCallback } from './'\nimport NotificationMiddleware,\n{ NotificationMiddlewareContext } from '../services/NotificationMiddleware'\nimport { CustomError, errorTypes } from '../utils/CustomError'\n\nconst createUser = (userData: UserData | null): User => {\n  let profile\n  if (userData !== null) {\n    profile = userData.profile\n  }\n\n  if (profile !== undefined) {\n    if (profile.name === undefined || profile.email === undefined) {\n      NotificationMiddleware.onError(\n        NotificationMiddlewareContext.AUTH,\n        new CustomError(\n          errorTypes.AUTHENTICATION,\n          'Failed to obtain user \"name\" and \"email\".'\n        )\n      )\n    } else {\n      return {\n        name: profile.name,\n        email: profile.email\n      }\n    }\n  } else {\n    NotificationMiddleware.onError(\n      NotificationMiddlewareContext.AUTH,\n      new CustomError(\n        errorTypes.AUTHENTICATION,\n        'Failed to obtain user profile.'\n      )\n    )\n  }\n  return {\n    name: undefined,\n    email: undefined\n  }\n}\n\nexport default class OidcManager implements AuthManager {\n  private _oidc: UserManager\n\n  constructor (baseUri: string, settings: OidcSettings) {\n    let responseType = 'code'\n    if (settings.grantType !== undefined) {\n      if (settings.grantType === 'implicit') {\n        responseType = 'id_token token'\n      }\n    }\n    this._oidc = new UserManager({\n      authority: settings.authority,\n      client_id: settings.clientId,\n      redirect_uri: baseUri,\n      scope: settings.scope,\n      response_type: responseType,\n      loadUserInfo: true,\n      automaticSilentRenew: true,\n      revokeAccessTokenOnSignout: true,\n      post_logout_redirect_uri: `${baseUri}/logout`\n    })\n    if (settings.endSessionEndpoint != null) {\n      /*\n       * Unfortunately, the end session endpoint alone cannot be provided to\n       * the construction of UserManager and the other metadata parameters\n       * would need to be provided as well. However, configuring all of them\n       * individually would not be desirable and they will be automatically\n       * determined anyways. Therefore, we first construct an object, get the\n       * metadata, update the metadata, and then reconstruct an object with the\n       * updated metadata.\n       */\n      this._oidc.metadataService.getMetadata().then(metadata => {\n        if (settings.endSessionEndpoint != null) {\n          metadata.end_session_endpoint = settings.endSessionEndpoint\n          this._oidc = new UserManager({\n            authority: settings.authority,\n            client_id: settings.clientId,\n            redirect_uri: baseUri,\n            scope: settings.scope,\n            response_type: responseType,\n            loadUserInfo: true,\n            automaticSilentRenew: true,\n            revokeAccessTokenOnSignout: true,\n            post_logout_redirect_uri: `${baseUri}/logout`,\n            metadata\n          })\n        }\n      }).catch((error) => {\n        console.error(\n          'failed to get metadata from authorization server: ',\n          error\n        )\n      })\n    }\n  }\n\n  /**\n   * Sign-in to authenticate the user and obtain authorization.\n   */\n  signIn = async ({ onSignIn }: {\n    onSignIn?: SignInCallback\n  }): Promise<void> => {\n    const handleSignIn = (userData: UserData): void => {\n      const user = createUser(userData)\n      const authorization = `${userData.token_type} ${userData.access_token}`\n      if (onSignIn != null) {\n        console.info('handling sign-in using provided callback function')\n        onSignIn({ user: user, authorization: authorization })\n      } else {\n        console.warn('no callback function was provided to handle sign-in')\n      }\n    }\n\n    if (isAuthorizationCodeInUrl(window.location)) {\n      /* Handle the callback from the authorization server: extract the code\n       * from the callback URL, obtain user information and the access token\n       * for the DICOMweb server.\n       */\n      console.info('obtaining authorization')\n      const userData = await this._oidc.signinCallback()\n      if (userData != null) {\n        console.info('obtained user data: ', userData)\n        handleSignIn(userData)\n      }\n    } else {\n      /* Redirect to the authorization server to authenticate the user\n       * and authorize the application to obtain user information and access\n       * the DICOMweb server.\n       */\n      const userData = await this._oidc.getUser()\n      if (userData === null || userData.expired) {\n        console.info('authenticating user')\n        await this._oidc.signinRedirect()\n      } else {\n        console.info('user has already been authenticated')\n        handleSignIn(userData)\n      }\n    }\n  }\n\n  /**\n   * Sign-out to revoke authorization.\n   */\n  signOut = async (): Promise<void> => {\n    console.log('signing out user and revoking authorization')\n    return await this._oidc.signoutRedirect()\n  }\n\n  /**\n   * Get authorization. Requires prior sign-in.\n   */\n  getAuthorization = async (): Promise<string|undefined> => {\n    return await this._oidc.getUser().then((userData) => {\n      if (userData !== null) {\n        return userData.access_token\n      } else {\n        NotificationMiddleware.onError(\n          NotificationMiddlewareContext.AUTH,\n          new CustomError(\n            errorTypes.AUTHENTICATION,\n            'Failed to obtain user profile.'\n          )\n        )\n      }\n    })\n  }\n\n  /**\n   * Get user information. Requires prior sign-in.\n   */\n  getUser = async (): Promise<User> => {\n    return await this._oidc.getUser().then((userData) => {\n      if (userData === null) {\n        NotificationMiddleware.onError(\n          NotificationMiddlewareContext.AUTH,\n          new CustomError(\n            errorTypes.AUTHENTICATION,\n            'Failed to obtain user information.'\n          )\n        )\n      }\n      return createUser(userData)\n    })\n  }\n}\n","import retry from 'retry'\n\nimport {\n  RetryRequestSettings,\n  DICOMwebClientRequestHookMetadata\n} from '../AppConfig'\n\ntype RequestHook = (\n  request: XMLHttpRequest,\n  metadata: DICOMwebClientRequestHookMetadata\n) => XMLHttpRequest\n\n/**\n * Returns a configured retry request hook function\n * that can be used to add retry functionality to XHR request.\n *\n * Default options:\n *   retries: 5\n *   factor: 3\n *   minTimeout: 1 * 1000\n *   maxTimeout: 60 * 1000\n *   randomize: true\n *\n * @param options\n * @param options.retires - Number of retries\n * @param options.factor - Factor\n * @param options.minTimeout - Min number of seconds to wait before next retry\n * @param options.maxTimeout - Max number of seconds to wait before next retry\n * @param options.randomize - Whether randomization should be applied\n * @param options.retryableStatusCodes HTTP status codes that can trigger a retry\n * @returns Configured retry request function\n */\nexport const getXHRRetryHook = (options: RetryRequestSettings = {\n  retries: 5,\n  factor: 3,\n  minTimeout: 1 * 1000,\n  maxTimeout: 60 * 1000,\n  randomize: true,\n  retryableStatusCodes: [429, 500]\n}): RequestHook => {\n  const retryOptions = options\n\n  if (options.retries != null) {\n    retryOptions.retries = options.retries\n  }\n\n  if (options.factor != null) {\n    retryOptions.factor = options.factor\n  }\n\n  if (options.minTimeout != null) {\n    retryOptions.minTimeout = options.minTimeout\n  }\n\n  if (options.maxTimeout != null) {\n    retryOptions.maxTimeout = options.maxTimeout\n  }\n\n  if (options.randomize != null) {\n    retryOptions.randomize = options.randomize\n  }\n\n  if (options.retryableStatusCodes != null) {\n    retryOptions.retryableStatusCodes = options.retryableStatusCodes\n  }\n\n  /**\n   * Request hook used to add retry functionality to XHR requests.\n   *\n   * @param request - XHR request instance\n   * @param metadata - Metadata about the request\n   * @param metadata.url - URL\n   * @param metadata.method - HTTP method\n   * @returns - XHR request instance (potentially modified)\n   */\n  const xhrRetryHook = (\n    request: XMLHttpRequest,\n    metadata: DICOMwebClientRequestHookMetadata\n  ): XMLHttpRequest => {\n    const { url, method } = metadata\n\n    function faultTolerantRequestSend (...args: any): void {\n      const operation = retry.operation(retryOptions)\n\n      operation.attempt(function operationAttempt (currentAttempt) {\n        const originalOnReadyStateChange = request.onreadystatechange\n\n        /** Overriding/extending XHR function */\n        request.onreadystatechange = function onReadyStateChange (...args: any): void {\n          if (originalOnReadyStateChange != null) {\n            originalOnReadyStateChange.apply(request, args)\n          }\n\n          if (retryOptions.retryableStatusCodes.includes(request.status)) {\n            const errorMessage = `Attempt to request ${url} failed.`\n            const attemptFailedError = new Error(errorMessage)\n            operation.retry(attemptFailedError)\n          }\n        }\n\n        /** Call open only on retry (after headers and other things were set in the xhr instance) */\n        if (currentAttempt > 1) {\n          console.warn(`Requesting ${url}... (attempt: ${currentAttempt})`)\n          request.open(method, url, true)\n        }\n      })\n\n      originalRequestSend.apply(request, args)\n    }\n\n    /** Overriding/extending XHR function */\n    const originalRequestSend = request.send\n    request.send = faultTolerantRequestSend\n\n    return request\n  }\n\n  return xhrRetryHook\n}\n\nexport default getXHRRetryHook\n","import * as dwc from 'dicomweb-client'\n\nimport { ServerSettings, DicomWebManagerErrorHandler } from './AppConfig'\nimport { joinUrl } from './utils/url'\nimport getXHRRetryHook from './utils/xhrRetryHook'\nimport { CustomError, errorTypes } from './utils/CustomError'\nimport NotificationMiddleware, {\n  NotificationMiddlewareContext\n} from './services/NotificationMiddleware'\n\ninterface Store {\n  id: string\n  read: boolean\n  write: boolean\n  client: dwc.api.DICOMwebClient\n}\n\nexport default class DicomWebManager implements dwc.api.DICOMwebClient {\n  private readonly stores: Store[] = []\n\n  private readonly handleError: DicomWebManagerErrorHandler\n\n  constructor ({ baseUri, settings, onError }: {\n    baseUri: string\n    settings: ServerSettings[]\n    onError?: DicomWebManagerErrorHandler\n  }) {\n    if (onError != null) {\n      this.handleError = onError\n    } else {\n      this.handleError = (error, serverSettings) => {\n        console.error(error, serverSettings)\n      }\n    }\n\n    settings.forEach(serverSettings => {\n      if (serverSettings === undefined) {\n        NotificationMiddleware.onError(\n          NotificationMiddlewareContext.SLIM,\n          new CustomError(\n            errorTypes.COMMUNICATION,\n            'At least one server needs to be configured.'\n          )\n        )\n      }\n\n      let serviceUrl\n      if (serverSettings.url !== undefined) {\n        serviceUrl = serverSettings.url\n      } else if (serverSettings.path !== undefined) {\n        serviceUrl = joinUrl(serverSettings.path, baseUri)\n      } else {\n        NotificationMiddleware.onError(\n          NotificationMiddlewareContext.SLIM,\n          new CustomError(\n            errorTypes.COMMUNICATION,\n            'Either path or full URL needs to be configured for server.'\n          )\n        )\n      }\n\n      const hasHttpsUrl = (url?: string): boolean => url?.startsWith('https') ?? false\n\n      const clientSettings: dwc.api.DICOMwebClientOptions = {\n        url: serviceUrl\n      }\n\n      const shouldUpgradeInsecure = serverSettings.upgradeInsecureRequests === true && [\n        serviceUrl,\n        serverSettings.qidoPathPrefix,\n        serverSettings.wadoPathPrefix,\n        serverSettings.stowPathPrefix\n      ].some(hasHttpsUrl)\n\n      if (serverSettings.qidoPathPrefix !== undefined) {\n        clientSettings.qidoURLPrefix = serverSettings.qidoPathPrefix\n      }\n      if (serverSettings.wadoPathPrefix !== undefined) {\n        clientSettings.wadoURLPrefix = serverSettings.wadoPathPrefix\n      }\n      if (serverSettings.stowPathPrefix !== undefined) {\n        clientSettings.stowURLPrefix = serverSettings.stowPathPrefix\n      }\n\n      if (shouldUpgradeInsecure) {\n        clientSettings.headers = {\n          ...clientSettings.headers,\n          'Content-Security-Policy': 'upgrade-insecure-requests'\n        }\n      }\n\n      if (serverSettings.retry !== undefined) {\n        clientSettings.requestHooks = [getXHRRetryHook(serverSettings.retry)]\n      }\n\n      clientSettings.errorInterceptor = (error: dwc.api.DICOMwebClientError) => {\n        this.handleError(error, serverSettings)\n      }\n\n      this.stores.push({\n        id: serverSettings.id,\n        write: serverSettings.write ?? false,\n        read: serverSettings.read ?? true,\n        client: new dwc.api.DICOMwebClient(clientSettings)\n      })\n    })\n\n    if (this.stores.length > 1) {\n      NotificationMiddleware.onError(\n        NotificationMiddlewareContext.SLIM,\n        new CustomError(\n          errorTypes.COMMUNICATION,\n          'Only one store is supported for now.'\n        )\n      )\n    }\n  }\n\n  get baseURL (): string {\n    return this.stores[0].client.baseURL\n  }\n\n  updateHeaders = (fields: { [name: string]: string }): void => {\n    for (const f in fields) {\n      this.stores[0].client.headers[f] = fields[f]\n    }\n  }\n\n  get headers (): { [name: string]: string } {\n    return this.stores[0].client.headers\n  }\n\n  storeInstances = async (\n    options: dwc.api.StoreInstancesOptions\n  ): Promise<void> => {\n    if (this.stores[0].write) {\n      return await this.stores[0].client.storeInstances(options)\n    } else {\n      return await Promise.reject(\n        new Error('Store is not writable.')\n      )\n    }\n  }\n\n  searchForStudies = async (\n    options: dwc.api.SearchForStudiesOptions\n  ): Promise<dwc.api.Study[]> => {\n    return await this.stores[0].client.searchForStudies(options)\n  }\n\n  searchForSeries = async (\n    options: dwc.api.SearchForSeriesOptions\n  ): Promise<dwc.api.Series[]> => {\n    return await this.stores[0].client.searchForSeries(options)\n  }\n\n  searchForInstances = async (\n    options: dwc.api.SearchForInstancesOptions\n  ): Promise<dwc.api.Instance[]> => {\n    return await this.stores[0].client.searchForInstances(options)\n  }\n\n  retrieveStudyMetadata = async (\n    options: dwc.api.RetrieveStudyMetadataOptions\n  ): Promise<dwc.api.Metadata[]> => {\n    return await this.stores[0].client.retrieveStudyMetadata(options)\n  }\n\n  retrieveSeriesMetadata = async (\n    options: dwc.api.RetrieveSeriesMetadataOptions\n  ): Promise<dwc.api.Metadata[]> => {\n    return await this.stores[0].client.retrieveSeriesMetadata(options)\n  }\n\n  retrieveInstanceMetadata = async (\n    options: dwc.api.RetrieveInstanceMetadataOptions\n  ): Promise<dwc.api.Metadata[]> => {\n    return await this.stores[0].client.retrieveInstanceMetadata(options)\n  }\n\n  retrieveInstance = async (\n    options: dwc.api.RetrieveInstanceOptions\n  ): Promise<dwc.api.Dataset> => {\n    return await this.stores[0].client.retrieveInstance(options)\n  }\n\n  retrieveInstanceFrames = async (\n    options: dwc.api.RetrieveInstanceFramesOptions\n  ): Promise<dwc.api.Pixeldata[]> => {\n    return await this.stores[0].client.retrieveInstanceFrames(options)\n  }\n\n  retrieveInstanceRendered = async (\n    options: dwc.api.RetrieveInstanceRenderedOptions\n  ): Promise<dwc.api.Pixeldata> => {\n    return await this.stores[0].client.retrieveInstanceRendered(options)\n  }\n\n  retrieveInstanceFramesRendered = async (\n    options: dwc.api.RetrieveInstanceFramesRenderedOptions\n  ): Promise<dwc.api.Pixeldata> => {\n    return await this.stores[0].client.retrieveInstanceFramesRendered(options)\n  }\n\n  retrieveBulkData = async (\n    options: dwc.api.RetrieveBulkDataOptions\n  ): Promise<dwc.api.Bulkdata[]> => {\n    return await this.stores[0].client.retrieveBulkData(options)\n  }\n}\n","import React from 'react'\nimport {\n  BrowserRouter,\n  Navigate,\n  Route,\n  Routes,\n  useParams\n} from 'react-router-dom'\nimport { Layout, message } from 'antd'\nimport { FaSpinner } from 'react-icons/fa'\nimport * as dwc from 'dicomweb-client'\n\nimport AppConfig, { ServerSettings, ErrorMessageSettings } from './AppConfig'\nimport CaseViewer from './components/CaseViewer'\nimport Header from './components/Header'\nimport InfoPage from './components/InfoPage'\nimport Worklist from './components/Worklist'\n\nimport { User, AuthManager } from './auth'\nimport OidcManager from './auth/OidcManager'\nimport { StorageClasses } from './data/uids'\nimport DicomWebManager from './DicomWebManager'\nimport { joinUrl } from './utils/url'\nimport { CustomError, errorTypes } from './utils/CustomError'\nimport NotificationMiddleware, {\n  NotificationMiddlewareContext\n} from './services/NotificationMiddleware'\n\nfunction ParametrizedCaseViewer ({ clients, user, app, config }: {\n  clients: { [key: string]: DicomWebManager }\n  user?: User\n  app: {\n    name: string\n    version: string\n    uid: string\n    organization?: string\n  }\n  config: AppConfig\n}): JSX.Element {\n  const { studyInstanceUID } = useParams()\n\n  const enableAnnotationTools = !(config.disableAnnotationTools ?? false)\n  const preload = config.preload ?? false\n  return (\n    <CaseViewer\n      clients={clients}\n      user={user}\n      annotations={config.annotations}\n      preload={preload}\n      app={app}\n      enableAnnotationTools={enableAnnotationTools}\n      studyInstanceUID={studyInstanceUID}\n    />\n  )\n}\n\nfunction _createClientMapping ({ baseUri, gcpBaseUrl, settings, onError }: {\n  baseUri: string\n  gcpBaseUrl: string\n  settings: ServerSettings[]\n  onError: (\n    error: dwc.api.DICOMwebClientError,\n    serverSettings: ServerSettings\n  ) => void\n}): { [sopClassUID: string]: DicomWebManager } {\n  const storageClassMapping: { [key: string]: number } = { default: 0 }\n  const clientMapping: { [sopClassUID: string]: DicomWebManager } = {}\n\n  settings.forEach(serverSettings => {\n    if (serverSettings.storageClasses != null) {\n      serverSettings.storageClasses.forEach(sopClassUID => {\n        if (Object.values<string>(StorageClasses).includes(sopClassUID)) {\n          if (sopClassUID in storageClassMapping) {\n            storageClassMapping[sopClassUID] += 1\n          } else {\n            storageClassMapping[sopClassUID] = 1\n          }\n        } else {\n          console.warn(\n            `unknown storage class \"${sopClassUID}\" specified ` +\n            `for configured server \"${serverSettings.id}\"`\n          )\n        }\n      })\n    } else {\n      if (window.location.pathname.includes('/projects/')) {\n        const pathname = window.location.pathname.split('/study/')[0]\n        const pathUrl = `${gcpBaseUrl}${pathname}/dicomWeb`\n        serverSettings.url = pathUrl\n      }\n\n      storageClassMapping.default += 1\n      clientMapping.default = new DicomWebManager({\n        baseUri,\n        settings: [serverSettings],\n        onError\n      })\n    }\n  })\n\n  if (storageClassMapping.default > 1) {\n    NotificationMiddleware.onError(\n      NotificationMiddlewareContext.SLIM,\n      new CustomError(\n        errorTypes.COMMUNICATION,\n        'Only one default server can be configured without specification ' +\n        'of storage classes.'\n      )\n    )\n  }\n\n  for (const key in storageClassMapping) {\n    if (key === 'default') {\n      continue\n    }\n    if (storageClassMapping[key] > 1) {\n      NotificationMiddleware.onError(\n        NotificationMiddlewareContext.SLIM,\n        new CustomError(\n          errorTypes.COMMUNICATION,\n          'Only one configured server can specify a given storage class. ' +\n          `Storage class \"${key}\" is specified by more than one ` +\n          'of the configured servers.'\n        )\n      )\n    }\n  }\n\n  if (Object.keys(storageClassMapping).length > 1) {\n    settings.forEach(server => {\n      const client = new DicomWebManager({\n        baseUri,\n        settings: [server],\n        onError\n      })\n      if (server.storageClasses != null) {\n        server.storageClasses.forEach(sopClassUID => {\n          clientMapping[sopClassUID] = client\n        })\n      }\n    })\n  }\n\n  Object.values(StorageClasses).forEach(sopClassUID => {\n    if (!(sopClassUID in clientMapping)) {\n      clientMapping[sopClassUID] = clientMapping.default\n    }\n  })\n  return clientMapping\n}\n\ninterface AppProps {\n  name: string\n  homepage: string\n  version: string\n  config: AppConfig\n}\n\ninterface AppState {\n  clients: { [sopClassUID: string]: DicomWebManager }\n  user?: User\n  isLoading: boolean\n  redirectTo?: string\n  wasAuthSuccessful: boolean\n  error?: ErrorMessageSettings\n}\n\nclass App extends React.Component<AppProps, AppState> {\n  private readonly auth?: AuthManager\n\n  private readonly handleDICOMwebError = (\n    error: dwc.api.DICOMwebClientError,\n    serverSettings: ServerSettings\n  ): void => {\n    if (error.status === 401) {\n      this.signIn()\n    } else if (error.status === 403) {\n      // eslint-disable-next-line @typescript-eslint/no-floating-promises\n      NotificationMiddleware.onError(\n        NotificationMiddlewareContext.DICOMWEB,\n        new CustomError(\n          errorTypes.COMMUNICATION,\n          'User is not authorized to access DICOMweb resources.')\n      )\n    }\n\n    const logServerError = (): void => {\n      // eslint-disable-next-line @typescript-eslint/no-floating-promises\n      NotificationMiddleware.onError(\n        NotificationMiddlewareContext.DICOMWEB,\n        new CustomError(\n          errorTypes.COMMUNICATION,\n          'An unexpected server error occured.'\n        )\n      )\n    }\n\n    if (serverSettings.errorMessages !== undefined) {\n      serverSettings.errorMessages.forEach((setting: ErrorMessageSettings) => {\n        if (error.status === setting.status) {\n          this.setState({\n            error: {\n              status: error.status,\n              message: setting.message\n            }\n          })\n        } else if (error.status === 500) {\n          logServerError()\n        }\n      })\n    } else if (error.status === 500) {\n      logServerError()\n    }\n  }\n\n  constructor (props: AppProps) {\n    super(props)\n\n    console.info('instatiate app')\n    console.info(`app is located at \"${props.config.path}\"`)\n    const { protocol, host } = window.location\n    const baseUri = `${protocol}//${host}`\n    const appUri = joinUrl(props.config.path, baseUri)\n\n    const oidcSettings = props.config.oidc\n    if (oidcSettings !== undefined) {\n      console.info(\n        'app uses the following OIDC configuration: ',\n        props.config.oidc\n      )\n      this.auth = new OidcManager(appUri, oidcSettings)\n    }\n\n    if (props.config.servers.length === 0) {\n      NotificationMiddleware.onError(\n        NotificationMiddlewareContext.SLIM,\n        new CustomError(\n          errorTypes.COMMUNICATION,\n          'One server needs to be configured.')\n      )\n    }\n    console.info(\n      'app uses the following DICOMweb server configuration: ',\n      props.config.servers\n    )\n\n    this.handleServerSelection = this.handleServerSelection.bind(this)\n\n    message.config({ duration: 5 })\n    this.addGcpSecondaryAnnotationServer(props.config)\n\n    this.state = {\n      clients: _createClientMapping({\n        baseUri,\n        gcpBaseUrl: props.config.gcpBaseUrl ?? 'https://healthcare.googleapis.com/v1',\n        settings: props.config.servers,\n        onError: this.handleDICOMwebError\n      }),\n      isLoading: true,\n      wasAuthSuccessful: false\n    }\n  }\n\n  addGcpSecondaryAnnotationServer (config: AppProps['config']): void {\n    const serverId = 'gcp_secondary_annotation_server'\n    const urlParams = new URLSearchParams(window.location.search)\n    const url = urlParams.get('gcp')\n    const gcpSecondaryAnnotationServer = config.servers.find(\n      (server) => server.id === serverId\n    )\n    if (gcpSecondaryAnnotationServer === undefined && typeof url === 'string') {\n      config.servers.push({\n        id: serverId,\n        write: true,\n        url,\n        storageClasses: [\n          StorageClasses.COMPREHENSIVE_SR,\n          StorageClasses.COMPREHENSIVE_3D_SR,\n          StorageClasses.SEGMENTATION,\n          StorageClasses.MICROSCOPY_BULK_SIMPLE_ANNOTATION,\n          StorageClasses.PARAMETRIC_MAP,\n          StorageClasses.ADVANCED_BLENDING_PRESENTATION_STATE,\n          StorageClasses.COLOR_SOFTCOPY_PRESENTATION_STATE,\n          StorageClasses.GRAYSCALE_SOFTCOPY_PRESENTATION_STATE,\n          StorageClasses.PSEUDOCOLOR_SOFTCOPY_PRESENTATION_STATE\n        ]\n      })\n    }\n  }\n\n  handleServerSelection ({ url }: { url: string }): void {\n    console.info('select DICOMweb server: ', url)\n    const tmpClient = new DicomWebManager({\n      baseUri: '',\n      settings: [{\n        id: 'tmp',\n        url,\n        read: true,\n        write: false\n      }],\n      onError: this.handleDICOMwebError\n    })\n    tmpClient.updateHeaders(this.state.clients.default.headers)\n    /**\n     * Use the newly created client for all storage classes. We may want to\n     * make this more sophisticated in the future to allow users to override\n     * the entire server configuration.\n     */\n    this.setState(state => {\n      const clients: { [key: string]: DicomWebManager } = {}\n      for (const key in state.clients) {\n        clients[key] = tmpClient\n      }\n      return { clients }\n    })\n  }\n\n  /**\n   * Handle successful authentication event.\n   *\n   * Authorizes the DICOMweb client to access the DICOMweb server and directs\n   * the user back to the App.\n   *\n   * @param user - Information about the user\n   * @param authorization - Value of the \"Authorization\" HTTP header field\n   */\n  handleSignIn = ({ user, authorization }: {\n    user: User\n    authorization: string\n  }): void => {\n    for (const key in this.state.clients) {\n      const client = this.state.clients[key]\n      client.updateHeaders({ Authorization: authorization })\n    }\n    const storedPath = window.localStorage.getItem('slim_path')\n    const storedSearch = window.localStorage.getItem('slim_search')\n    if (storedPath != null) {\n      const currentPath = window.location.pathname\n      if (storedPath !== currentPath) {\n        let path = storedPath\n        if (storedSearch != null) {\n          path += storedSearch\n        }\n        window.location.href = path\n      }\n    }\n    window.localStorage.removeItem('slim_path')\n    window.localStorage.removeItem('slim_search')\n    this.setState({ user: user })\n  }\n\n  signIn (): void {\n    if (this.auth !== undefined) {\n      console.info('try to sign in user')\n      this.auth.signIn({ onSignIn: this.handleSignIn }).then(() => {\n        console.info('sign-in was successful')\n        this.setState({\n          isLoading: false,\n          wasAuthSuccessful: true\n        })\n      }).catch((error) => {\n        console.error(error)\n        // eslint-disable-next-line @typescript-eslint/no-floating-promises\n        NotificationMiddleware.onError(\n          NotificationMiddlewareContext.AUTH,\n          new CustomError(\n            errorTypes.AUTHENTICATION,\n            'Could not sign-in user.')\n        )\n        this.setState({\n          isLoading: false,\n          redirectTo: undefined,\n          wasAuthSuccessful: false\n        })\n      })\n    } else {\n      this.setState({\n        isLoading: false,\n        redirectTo: undefined,\n        wasAuthSuccessful: true\n      })\n    }\n  }\n\n  componentDidMount (): void {\n    const path = window.localStorage.getItem('slim_path')\n    if (path == null) {\n      window.localStorage.setItem('slim_path', window.location.pathname)\n      window.localStorage.setItem('slim_search', window.location.search)\n    }\n    this.signIn()\n  }\n\n  render (): React.ReactNode {\n    const appInfo = {\n      name: this.props.name,\n      version: this.props.version,\n      homepage: this.props.homepage,\n      uid: '1.2.826.0.1.3680043.9.7433.1.5',\n      organization: this.props.config.organization\n    }\n\n    const enableWorklist = !(\n      this.props.config.disableWorklist ?? false\n    )\n    const enableServerSelection = (\n      this.props.config.enableServerSelection ?? false\n    )\n\n    let worklist\n    if (enableWorklist) {\n      worklist = <Worklist clients={this.state.clients} />\n    } else {\n      worklist = <div>Worklist has been disabled.</div>\n    }\n\n    let isLogoutPossible = false\n    let onLogout: () => void\n    if (\n      // eslint-disable-next-line @typescript-eslint/prefer-optional-chain\n      this.props.config.oidc != null &&\n      this.props.config.oidc.endSessionEndpoint != null\n    ) {\n      onLogout = (): void => {\n        if (this.auth != null) {\n          // eslint-disable-next-line @typescript-eslint/no-floating-promises\n          this.auth.signOut()\n        }\n      }\n      isLogoutPossible = true\n    } else {\n      onLogout = () => {}\n      isLogoutPossible = false\n    }\n\n    const layoutStyle = { height: '100vh' }\n    const layoutContentStyle = { height: '100%' }\n\n    if (this.state.redirectTo !== undefined) {\n      return (\n        <BrowserRouter basename={this.props.config.path}>\n          <Navigate to={this.state.redirectTo} replace />\n        </BrowserRouter>\n      )\n    } else if (this.state.isLoading) {\n      return (\n        <BrowserRouter basename={this.props.config.path}>\n          <Layout style={layoutStyle}>\n            <Header\n              app={appInfo}\n              user={this.state.user}\n              showWorklistButton={false}\n              onServerSelection={this.handleServerSelection}\n              showServerSelectionButton={false}\n              clients={this.state.clients}\n            />\n            <Layout.Content style={layoutContentStyle}>\n              <FaSpinner />\n            </Layout.Content>\n          </Layout>\n        </BrowserRouter>\n      )\n    } else if (!this.state.wasAuthSuccessful) {\n      return (\n        <InfoPage type='error' message='Sign-in failed.' />\n      )\n    } else if (this.state.error != null) {\n      return (\n        <InfoPage type='error' message={this.state.error.message} />\n      )\n    } else {\n      return (\n        <BrowserRouter basename={this.props.config.path}>\n          <Routes>\n            <Route\n              path='/'\n              element={\n                <Layout style={layoutStyle}>\n                  <Header\n                    app={appInfo}\n                    user={this.state.user}\n                    showWorklistButton={false}\n                    onServerSelection={this.handleServerSelection}\n                    onUserLogout={isLogoutPossible ? onLogout : undefined}\n                    showServerSelectionButton={enableServerSelection}\n                  />\n                  <Layout.Content style={layoutContentStyle}>\n                    {worklist}\n                  </Layout.Content>\n                </Layout>\n              }\n            />\n            <Route\n              path='/studies/:studyInstanceUID/*'\n              element={\n                <Layout style={layoutStyle}>\n                  <Header\n                    app={appInfo}\n                    user={this.state.user}\n                    showWorklistButton={enableWorklist}\n                    onServerSelection={this.handleServerSelection}\n                    onUserLogout={isLogoutPossible ? onLogout : undefined}\n                    showServerSelectionButton={enableServerSelection}\n                  />\n                  <Layout.Content style={layoutContentStyle}>\n                    <ParametrizedCaseViewer\n                      clients={this.state.clients}\n                      user={this.state.user}\n                      config={this.props.config}\n                      app={appInfo}\n                    />\n                  </Layout.Content>\n                </Layout>\n              }\n            />\n            <Route\n              path='/projects/:project/locations/:location/datasets/:dataset/dicomStores/:dicomStore/study/:studyInstanceUID/*'\n              element={\n                <Layout style={layoutStyle}>\n                  <Header\n                    app={appInfo}\n                    user={this.state.user}\n                    showWorklistButton={enableWorklist}\n                    onServerSelection={this.handleServerSelection}\n                    onUserLogout={isLogoutPossible ? onLogout : undefined}\n                    showServerSelectionButton={enableServerSelection}\n                  />\n                  <Layout.Content style={layoutContentStyle}>\n                    <ParametrizedCaseViewer\n                      clients={this.state.clients}\n                      user={this.state.user}\n                      config={this.props.config}\n                      app={appInfo}\n                    />\n                  </Layout.Content>\n                </Layout>\n              }\n            />\n            <Route\n              path='/logout'\n              element={\n                <Layout style={layoutStyle}>\n                  <Header\n                    app={appInfo}\n                    user={this.state.user}\n                    showWorklistButton={false}\n                    onServerSelection={this.handleServerSelection}\n                    onUserLogout={isLogoutPossible ? onLogout : undefined}\n                    showServerSelectionButton={enableServerSelection}\n                  />\n                  Logged out\n                </Layout>\n              }\n            />\n          </Routes>\n        </BrowserRouter>\n      )\n    }\n  }\n}\n\nexport default App\n"],"names":["Description","React","render","layout","labelLineHeight","undefined","this","props","hasLongValues","items","attributes","map","item","index","uid","generateUUID","_jsx","Descriptions","Item","label","name","labelStyle","lineHeight","contentStyle","fontWeight","whiteSpace","span","children","value","icon","_jsxs","Card","title","header","extra","size","hoverable","selectable","bordered","actions","methods","column","ClinicalTrial","metadata","ClinicalTrialSponsorName","push","ClinicalTrialProtocolID","ClinicalTrialProtocolName","ClinicalTrialSiteName","ClinicalTrialTimePointID","parseName","Alphabetic","split","join","parseDate","substring","parseTime","parseSex","F","M","O","Patient","PatientID","PatientName","PatientSex","PatientBirthDate","Study","AccessionNumber","StudyID","StudyDate","StudyTime","StorageClasses","_subscriptions","Symbol","_lastSubscriptionId","PubSub","constructor","subscribe","eventName","callback","Error","hasOwnProperty","subscriptionId","unsubscribe","callbacks","publish","_len","arguments","length","payload","Array","_key","unsubscribeFromAll","errorTypes","CustomError","type","message","super","stack","NotificationMiddlewareEvents","NotificationMiddlewareContext","NotificationType","NotificationSourceDefinition","sources","category","notificationType","outerContext","args","from","warn","console","JSON","stringify","includes","apply","prototype","slice","call","onError","source","error","errorCategory","sourceConfig","find","s","notificationMsg","String","notification","description","duration","SlideItem","state","isLoading","overviewViewportRef","overviewViewer","componentDidMount","setState","slide","overviewImages","current","innerHTML","info","ContainerIdentifier","dmv","OverviewImageViewer","client","clients","VL_WHOLE_SLIDE_MICROSCOPY_IMAGE","resizeFactor","errorInterceptor","NotificationMiddleware","container","resize","FaSpinner","Menu","style","height","containerIdentifier","ref","seriesInstanceUIDs","SlideList","selectedSeriesInstanceUID","onSeriesSelection","seriesInstanceUID","slideList","slideItemList","i","slideItem","selectedKeys","width","onSelect","_ref","key","keyPath","domEvent","toString","mode","inlineIndent","AnnotationItem","handleVisibilityChange","bind","checked","event","onVisibilityChange","roiUID","roi","isVisible","identifier","otherProps","evaluations","forEach","nameValue","ConceptNameCodeSequence","CodeValue","CodeMeaning","ValueType","dcmjs","valueTypes","ValueTypes","CODE","valueMeaning","ConceptCodeSequence","TEXT","textContentItem","TextValue","measurements","seq","MeasuredValueSequence","NumericValue","toPrecision","unit","MeasurementUnitsCodeSequence","Space","align","paddingLeft","Switch","onChange","checkedChildren","FaEye","unCheckedChildren","FaEyeSlash","AnnotationList","handleMenuItemSelection","rois","visibleRoiUIDs","object","onSelection","has","_Fragment","paddingTop","paddingBottom","selectedRoiUIDs","values","onClick","AnnotationGroupItem","handleMeasurementSelection","handleOpacityChange","handleColorRChange","handleColorGChange","handleColorBChange","getCurrentColor","currentStyle","opacity","defaultStyle","color","annotationGroupUID","annotationGroup","onStyleChange","styleOptions","limitValues","isArray","handleLowerLimitChange","handleUpperLimitChange","handleLimitChange","option","codeComponents","measurement","coding","CodedConcept","schemeDesignator","meaning","_item$MeasurementsSeq","AnnotationGroupSequence","findIndex","AnnotationGroupUID","propertyType","propertyCategory","GraphicType","AnnotationCoordinateType","measurementsSequence","MeasurementsSequence","measurementOptions","measurementItem","Select","Option","CodingSchemeDesignator","dropdownMatchSelectWidth","disabled","colorSettings","windowSettings","explorationSettings","Divider","plain","Row","justify","gutter","Col","Slider","range","min","max","step","InputNumber","minValue","maxValue","minWidth","defaultValue","settings","isBadgeVisible","direction","Popover","placement","content","overlayStyle","Button","shape","SettingOutlined","Badge","offset","count","borderStyle","borderWidth","borderColor","visibility","backgroundImage","AnnotationGroupList","annotationGroups","visibleAnnotationGroupUIDs","defaultAnnotationGroupStyles","onAnnotationGroupVisibilityChange","onAnnotationGroupStyleChange","handleClick","_this$props$isSelecte","Icon","text","button","isSelected","Btn","tooltip","Tooltip","Equipment","Manufacturer","ManufacturerModelName","DeviceSerialNumber","SoftwareVersions","InstitutionName","findContentItemsByName","hasName","concept","hasValueType","valueType","getROIs","report","matches","ContentSequence","measurementsItem","measurementGroupItems","observerType","group","trackingUIDItem","algorithmNameItem","algorithmVersionItem","regionItem","scoord3d","Point","frameOfReferenceUID","ReferencedFrameOfReferenceUID","coordinates","GraphicData","Polygon","MultiPoint","Polyline","Ellipse","Ellipsoid","_ref2","evaluation","findEvaluationItems","NUM","findMeasurementItems","ROI","properties","trackingUID","UID","MeasurementReport","PersonObserverName","PersonObserverLoginName","DeviceObserverUID","DeviceObserverName","SpecimenUID","SpecimenIdentifier","ROIs","specimenUIDItem","specimenIdItem","containerIdItem","personNameItem","PersonName","personLoginNameItem","deviceUIDItem","deviceNameItem","Report","dataset","containerAttrs","specimenAttrs","observerAttrs","annotations","id","attrs","orientation","groups","List","SpecimenPreparationAdditives","FIXATIVE","EMBEDDING_MEDIUM","SpecimenPreparationStepItems","SPECIMEN_IDENTIFIER","PARENT_SPECIMEN_IDENTIFIER","PROCESSING_TYPE","DATETIME_OF_PROCESSING","PROCESSING_STEP_DESCRIPTION","COLLECTION_METHOD","SAMPLING_METHOD","STAIN","SpecimenItem","_specimenDescription$","specimenDescription","SpecimenDescriptionSequence","SpecimenShortDescription","PrimaryAnatomicStructureSequence","structures","SpecimenPreparationSequence","SpecimenPreparationStepContentItemSequence","equals","showstain","SpecimenList","_this$props$metadata$","overflowY","OpticalPathItem","handleRemoval","getCurrentColors","paletteColorLookupTable","componentDidUpdate","previousProps","previousState","opticalPath","opticalPathIdentifier","rgb2hex","data","onRemoval","illuminationWaveLength","illuminationColor","specimenDescriptions","_description$Specimen","Math","pow","BitsAllocated","isMonochromatic","colors","buttons","isRemovable","DeleteOutlined","EyeOutlined","EyeInvisibleOutlined","OpticalPathList","selectedOpticalPathIdentifier","handleItemAddition","handleItemRemoval","handleItemSelectionChange","onOpticalPathActivityChange","isActive","isSelectable","opticalPaths","opticalPathItems","optionItems","opticalPathSelector","images","SeriesInstanceUID","OpticalPathSequence","opticalPathItem","OpticalPathIdentifier","OpticalPathDescription","activeOpticalPathIdentifiers","visibleOpticalPathIdentifiers","defaultOpticalPathStyles","onOpticalPathVisibilityChange","onOpticalPathStyleChange","padding","allowClear","AppstoreAddOutlined","MappingItem","mappingUID","mapping","MappingList","mappings","visibleMappingUIDs","defaultMappingStyles","onMappingVisibilityChange","onMappingStyleChange","SegmentItem","segmentUID","segment","algorithmName","SegmentList","segments","visibleSegmentUIDs","defaultSegmentStyles","onSegmentVisibilityChange","onSegmentStyleChange","withRouter","Component","location","useLocation","navigate","useNavigate","params","useParams","ColorSettingsMenu","annotationGroupsUIDs","checkedAnnotationUids","defaultAnnotationStyles","types","checkAll","every","uids","indeterminate","some","handleChangeCheckedType","Checkbox","e","target","mouseEnterDelay","reduce","acc","marginLeft","shortenedCodeMeaning","displayCodeMeaning","isChecked","indeterminateType","display","flexDirection","categories","categoriesAcc","annotation","_categoriesAcc$catego","_oldCategory$types$ty","categoryKey","typeKey","oldCategory","oldType","Object","keys","typesArr","getCategories","AnnotationCategoryItem","xPosition","yPosition","position","top","left","backgroundColor","minHeight","pointerEvents","attr","DEFAULT_ROI_STROKE_COLOR","DEFAULT_ROI_FILL_COLOR","DEFAULT_ANNOTATION_STROKE_COLOR","DEFAULT_ANNOTATION_COLOR_PALETTE","_buildKey","_getRoiKey","findingName","_formatRoiStyle","stroke","fill","image","circle","radius","_constructViewers","preload","volumeImages","volumeViewer","VolumeImageViewer","clientMapping","controls","labelViewer","activateSelectInteraction","labelImages","LabelImageViewer","SlideViewer","findingOptions","evaluationOptions","geometryTypeOptions","volumeViewportRef","labelViewportRef","defaultRoiStyle","roiStyles","selectionColor","selectedRoiStyle","loadPresentationStates","ADVANCED_BLENDING_PRESENTATION_STATE","searchForInstances","studyInstanceUID","queryParams","Modality","then","matchedInstances","rawInstance","formatMetadata","instance","SOPInstanceUID","retrieveInstance","sopInstanceUID","retrievedInstance","DicomMessage","readFile","dict","areVolumeImagesMonochrome","presentationState","doesMatch","AdvancedBlendingSequence","blendingItem","selectedPresentationStateUID","setPresentationState","presentationStates","catch","getAllOpticalPaths","opticalPathStyles","hideOpticalPath","deactivateOpticalPath","getOpticalPathDefaultStyle","setOpticalPathStyle","refInstanceItems","ReferencedInstanceSequence","ReferencedImageSequence","imageItem","sopInstanceUIDs","ReferencedSOPInstanceUID","paletteColorLUT","PaletteColorLookupTableSequence","cpLUTItem","PaletteColorLookupTable","PaletteColorLookupTableUID","redDescriptor","RedPaletteColorLookupTableDescriptor","greenDescriptor","GreenPaletteColorLookupTableDescriptor","blueDescriptor","BluePaletteColorLookupTableDescriptor","redData","RedPaletteColorLookupTableData","Uint16Array","greenData","GreenPaletteColorLookupTableData","blueData","BluePaletteColorLookupTableData","redSegmentedData","SegmentedRedPaletteColorLookupTableData","greenSegmentedData","SegmentedGreenPaletteColorLookupTableData","blueSegmentedData","SegmentedBluePaletteColorLookupTableData","SoftcopyVOILUTSequence","voiLUTItem","windowCenter","WindowCenter","windowWidth","WindowWidth","selectedOpticalPathIdentifiers","Set","activateOpticalPath","showOpticalPath","add","searchParams","URLSearchParams","search","set","pathname","replace","getRoiStyle","addAnnotations","COMPREHENSIVE_3D_SR","SOPClassUID","templateSeq","ContentTemplateSequence","TemplateIdentifier","_implementsTID1500","debug","subjectClassValue","retrievedConcept","expectedConcept","_describesSpecimenSubject","measurementGroups","foundRegion","regions","SCOORD3D","_containsROIAnnotations","FrameOfReferenceUID","doesROIExist","getAllROIs","otherROI","_areROIsEqual","a","b","graphicType","graphicData","s1","s2","j","addROI","forceUpdate","addAnnotationGroups","MICROSCOPY_BULK_SIMPLE_ANNOTATION","searchForSeries","matchedSeries","series","retrieveSeriesMetadata","retrievedMetadata","MicroscopyBulkSimpleAnnotations","ann","finding","AnnotationPropertyTypeCodeSequence","setAnnotationGroupStyle","addSegmentations","SEGMENTATION","segmentations","seg","Segmentation","refImage","addSegments","addParametricMaps","PARAMETRIC_MAP","parametricMaps","pm","ParametricMap","addParameterMappings","populateViewports","setDefaultPresentationState","onRoiModified","onWindowResize","onRoiDrawn","detail","selectedFinding","selectedEvaluations","findingItem","CodeContentItem","relationshipType","addEvaluation","onRoiDoubleClicked","isSelectedRoiModalVisible","setHoveredRoiAttributes","hoveredRoi","hoveredRoiAttributes","onPointerMove","feature","evt","originalEvent","isHoveredRoiTooltipVisible","hoveredRoiTooltipX","clientX","hoveredRoiTooltipY","clientY","onRoiSelected","selectedRoi","setROIStyle","onLoadingStarted","onLoadingEnded","onFrameLoadingStarted","frameInfo","frameNumber","loadingFrames","onFrameLoadingError","onLoadingError","_event$detail","_event$detail$payload","_event$detail2","_event$detail2$payloa","onFrameLoadingEnded","delete","sopClassUID","channelIdentifier","pixelDataStatistics","pixelArray","chunks","ceil","minValues","maxValues","pixels","stats","numFramesSampled","getOpticalPathStyle","onRoiRemoved","onKeyUp","isRoiDrawingActive","deactivateDrawInteraction","isRoiModificationActive","deactivateModifyInteraction","isRoiTranslationActive","deactivateTranslateInteraction","isAnnotationModalVisible","isGoToModalVisible","altKey","code","handleRoiDrawing","handleRoiModification","handleRoiTranslation","handleRoiRemoval","handleRoiVisibilityChange","handleReportGeneration","handleGoTo","geometryTypes","componentSetup","componentCleanup","handleRoiSelectionCancellation","handleAnnotationConfigurationCancellation","handleAnnotationGeometryTypeSelection","handleAnnotationMeasurementActivation","handleAnnotationFindingSelection","handleAnnotationEvaluationSelection","handleAnnotationEvaluationClearance","handleAnnotationConfigurationCompletion","handleAnnotationSelection","handleAnnotationVisibilityChange","handleAnnotationGroupVisibilityChange","handleAnnotationGroupStyleChange","handleRoiStyleChange","handleXCoordinateSelection","handleYCoordinateSelection","handleMagnificationSelection","handleSlidePositionSelection","handleSlidePositionSelectionCancellation","handleReportVerification","handleReportCancellation","handleSegmentVisibilityChange","handleSegmentStyleChange","handleMappingVisibilityChange","handleMappingStyleChange","handleOpticalPathVisibilityChange","handleOpticalPathStyleChange","handleOpticalPathActivityChange","handlePresentationStateSelection","handlePresentationStateReset","boundingBox","generatedReport","isSelectedMagnificationValid","isReportModalVisible","isSelectedXCoordinateValid","isSelectedYCoordinateValid","selectedXCoordinate","validXCoordinateRange","selectedYCoordinate","validYCoordinateRange","selectedMagnification","areRoisHidden","cleanup","isOpticalPathVisible","isOpticalPathActive","document","body","removeEventListener","window","componentWillUnmount","addEventListener","hasICCProfile","ICCProfile","bulkdataReferences","warning","selectedGeometryType","selectedMarkup","filteredEvaluations","filter","x","Number","start","end","y","targetPixelSpacing","diffs","numLevels","actualPixelSpacing","getPixelSpacing","abs","level","indexOf","point","log","geometryType","markup","activateDrawInteraction","getOpticalPathMetadata","refSpecimen","observer","user","templates","PersonObserverIdentifyingAttributes","loginName","email","observationContext","ObservationContext","observerPersonContext","ObserverContext","observerIdentifyingAttributes","observerDeviceContext","DeviceObserverIdentifyingAttributes","app","manufacturerName","modelName","subjectContext","SubjectContext","subjectClass","subjectClassSpecificContext","SubjectContextSpecimen","imagingMeasurements","_roi$properties$track","findingType","PlanarROIMeasurementsAndQualitativeEvaluations","trackingIdentifier","TrackingIdentifier","referencedRegion","contentItems","ImageRegion3D","qualitativeEvaluations","MappingResource","measurementReport","languageOfContentItemAndDescendants","LanguageOfContentItemAndDescendants","procedureReported","documents","Comprehensive3DSR","evidence","DicomMetaDictionary","seriesNumber","seriesDescription","instanceNumber","manufacturer","previousVersions","fileMetaInformationVersionArray","Uint8Array","fileMeta","Value","buffer","vr","writer","DicomDict","denaturalizeDataset","write","storeInstances","datasets","response","_ref3","getROI","_ref4","showAnnotationGroup","hideAnnotationGroup","_ref5","generateRoiStyle","_styleOptions$opacity","_styleOptions$color","_this$defaultRoiStyle","strokeColor","fillColor","c","_ref6","_ref7","showSegment","hideSegment","_ref8","setSegmentStyle","_ref9","showParameterMapping","hideParameterMapping","_ref10","setParameterMappingStyle","_ref11","_ref12","_ref13","sort","localeCompare","paletteColorLookupTableUID","defaultColors","numVisible","urlPath","deactivateSelectInteraction","deactivateSnapInteraction","isModifyInteractionActive","activateSnapInteraction","activateModifyInteraction","isTranslateInteractionActive","activateTranslateInteraction","removeROI","areROIsVisible","hideROIs","showROIs","getAllSegments","getAllParameterMappings","allAnnotationGroups","getAllAnnotationGroups","filteredAnnotationGroups","referencedSeriesInstanceUID","result","adaptRoiToAnnotation","openSubMenuItems","annotationMenuItems","geometryTypeOptionsMapping","box","polygon","line","freehandpolygon","freehandline","annotationConfigurations","defaultActiveFirstOption","onClear","specimenMenu","SubMenu","equipmentMenu","opticalPathMetadata","opticalPathMenu","presentationStateMenu","segmentationMenu","parametricMapMenu","annotationGroupMenu","toolbar","presentationStateOptions","ContentDescription","maxWidth","UndoOutlined","segmentMetadata","getSegmentStyle","getSegmentMetadata","mappingMetadata","getParameterMappingStyle","getParameterMappingMetadata","_this$roiStyles$key$s","annotationGroupMetadata","getAnnotationGroupStyle","getAnnotationGroupMetadata","toolbarHeight","annotationTools","FaDrawPolygon","FaHandPointer","FaHandPaper","FaTrash","FaSave","controlTools","FaCrosshairs","enableAnnotationTools","selectedRoiInformation","cursor","roiAttributes","roiScoordAttributes","roiEvaluationAttributes","codeItem","textItem","roiMeasurmentAttributesPerOpticalPath","refItems","ReferencedSOPSequence","ReferencedOpticalPathIdentifier","measuredValueItem","createRoiDescription","roiDescriptions","roiScoordDescriptions","roiEvaluationDescriptions","roiMeasurementDescriptions","descriptions","orientationMargin","dashed","Layout","hasSider","Content","overflow","Modal","open","onOk","onCancel","okText","maskClosable","footer","placeholder","prefix","onPressEnter","addonAfter","CheckOutlined","StopOutlined","Sider","reverseArrow","borderLeft","borderLeftWidth","background","defaultOpenKeys","forceSubMenuRender","onOpenChange","setTimeout","AnnotationCategoryList","HoveredRoiTooltip","ImageFlavors","hasImageFlavor","imageFlavor","ImageType","areSameAcquisition","AcquisitionUID","Slide","options","acquisitionUID","opticalPathIdentifiers","pyramidUIDs","acquisitionUIDs","containerIdentifiers","frameOfReferenceUIDs","VOLUME","LABEL","OVERVIEW","THUMBNAIL","PyramidUID","samplesPerPixel","SamplesPerPixel","requirePyramidUID","PhotometricInterpretation","fetchImageMetadata","async","onSuccess","StudyInstanceUID","Promise","all","loadingSeries","seriesImages","_item$","_item$$Value","VLWholeSlideMicroscopyImage","newSlides","slideMetadata","filteredVolumeImages","slideMetadataIndex","_doesImageBelongToSlide","filteredLabelImages","filteredOverviewImages","slideMetadataItem","slides","imgA","imgB","createSlides","err","customError","slidesCache","Map","pendingRequests","useSlides","setSlides","useState","setIsLoading","setError","useEffect","cachedData","get","pendingRequest","resolve","reject","fetchSlides","ParametrizedSlideViewer","selectedSlide","presentationStateUID","viewer","volumeInstances","clinicalTrialMenu","seriesFragment","borderRight","borderRightWidth","Routes","Route","path","element","nameMap","formatValue","val","getRows","depth","flatMap","keyword","_value$toString2","_value2","tagInfo","_value$toString","_value","regex","match","tag","sequenceItems","sequenceNode","getSortedTags","_displaySets$selected","_displaySets$selected3","displaySets","setDisplaySets","selectedDisplaySetInstanceUID","setSelectedDisplaySetInstanceUID","setInstanceNumber","filterValue","setFilterValue","expandedKeys","setExpandedKeys","searchExpandedKeys","setSearchExpandedKeys","updatedDisplaySets","SeriesDate","SeriesTime","SeriesNumber","SeriesDescription","displaySetInstanceUID","displaySetList","useMemo","displaySet","displayDate","dateStr","year","month","day","hour","minute","second","monthNum","parseInt","dayNum","date","Date","getMonth","getDate","toLocaleDateString","weekday","getFullYear","formatDicomDate","showInstanceList","instanceSliderMarks","totalInstances","tableData","_displaySets$selected2","transformTagsToTableData","tags","parentKey","currentKey","filteredData","searchLower","toLowerCase","newSearchExpandedKeys","filterNodes","nodes","node","_node$tag$toLowerCase","_node$tag","_node$vr$toLowerCase","_node$vr","_node$keyword$toLower","_node$keyword","_node$value$toString$","_node$value","newNode","matchesSearch","filteredChildren","filtered","allExpandedKeys","className","gap","marginBottom","flex","Typography","Text","strong","optionLabelProp","optionFilterProp","fontSize","marks","formatter","Input","SearchOutlined","Table","columns","dataIndex","dataSource","pagination","expandable","expandedRowKeys","onExpandedRowsChange","scroll","Header","handleInfoButtonClick","browser","detect","environment","os","version","homepage","handleDicomTagBrowserButtonClick","_this$props$params$st","innerWidth","DicomTagBrowser","handleDebugButtonClick","errorMsgs","Authentication","Communication","EncodingDecoding","Visualization","errorNum","errorObj","Panel","Collapse","showErrorCount","errcount","warncount","uuidv4","warnings","handleServerSelectionButtonClick","isServerSelectionModalVisible","isServerSelectionDisabled","prevProps","prevState","worklistButton","userMenuItems","onUserLogout","userMenu","Dropdown","menu","trigger","UserOutlined","preventDefault","showWorklistButton","NavLink","to","UnorderedListOutlined","infoButton","InfoOutlined","debugButton","dicomTagBrowserButton","FileSearchOutlined","serverSelectionButton","showServerSelectionButton","ApiOutlined","handleServerSelection","url","selectedServerUrl","closeModal","startsWith","onServerSelection","src","process","alt","margin","handleServerSelectionCancellation","currentTarget","isDisabled","URL","protocol","TypeError","alignItems","justifyContent","Result","subTitle","Worklist","defaultPageSize","handleSearch","confirm","handleReset","clearFilters","getColumnSearchProps","filterDropdown","setSelectedKeys","filterIcon","fetchData","handleChange","studies","numStudies","pageSize","searchForStudies","searchOptions","ModalitiesInStudy","study","limit","searchCriteria","fuzzymatching","filters","hideOnSinglePage","showSizeChanger","showQuickJumper","showTotal","total","rowKey","record","onRow","loading","joinUrl","uri","baseUri","endsWith","createUser","userData","profile","OidcManager","_oidc","signIn","onSignIn","handleSignIn","authorization","token_type","access_token","_searchParams$get","hashParams","hash","Boolean","isAuthorizationCodeInUrl","signinCallback","getUser","expired","signinRedirect","signOut","signoutRedirect","getAuthorization","responseType","grantType","UserManager","authority","client_id","clientId","redirect_uri","scope","response_type","loadUserInfo","automaticSilentRenew","revokeAccessTokenOnSignout","post_logout_redirect_uri","endSessionEndpoint","metadataService","getMetadata","end_session_endpoint","retries","factor","minTimeout","maxTimeout","randomize","retryableStatusCodes","retryOptions","xhrRetryHook","request","method","originalRequestSend","send","operation","retry","attempt","currentAttempt","originalOnReadyStateChange","onreadystatechange","_len2","_key2","status","attemptFailedError","DicomWebManager","stores","handleError","updateHeaders","fields","f","headers","retrieveStudyMetadata","retrieveInstanceMetadata","retrieveInstanceFrames","retrieveInstanceRendered","retrieveInstanceFramesRendered","retrieveBulkData","serverSettings","_serverSettings$write","_serverSettings$read","serviceUrl","clientSettings","shouldUpgradeInsecure","upgradeInsecureRequests","qidoPathPrefix","wadoPathPrefix","stowPathPrefix","_url$startsWith","qidoURLPrefix","wadoURLPrefix","stowURLPrefix","requestHooks","getXHRRetryHook","read","dwc","DICOMwebClient","baseURL","ParametrizedCaseViewer","_config$disableAnnota","_config$preload","config","disableAnnotationTools","CaseViewer","_createClientMapping","gcpBaseUrl","storageClassMapping","default","storageClasses","pathUrl","server","App","_props$config$gcpBase","auth","handleDICOMwebError","logServerError","errorMessages","setting","Authorization","storedPath","localStorage","getItem","storedSearch","href","removeItem","host","appUri","oidcSettings","oidc","servers","addGcpSecondaryAnnotationServer","wasAuthSuccessful","serverId","COMPREHENSIVE_SR","COLOR_SOFTCOPY_PRESENTATION_STATE","GRAYSCALE_SOFTCOPY_PRESENTATION_STATE","PSEUDOCOLOR_SOFTCOPY_PRESENTATION_STATE","tmpClient","redirectTo","setItem","_this$props$config$di","_this$props$config$en","appInfo","organization","enableWorklist","disableWorklist","enableServerSelection","worklist","onLogout","isLogoutPossible","layoutStyle","layoutContentStyle","BrowserRouter","basename","Navigate","InfoPage"],"sourceRoot":""}